plugins {
  id "com.github.johnrengelman.shadow"
}

apply from: "$rootDir/gradle/java.gradle"
// We do not publish separate jar, but having version file is useful
apply from: "$rootDir/gradle/version.gradle"

minimumInstructionCoverage = 0.1
minimumBranchCoverage = 0.6
excludedClassesCoverage += [
  'com.datadog.debugger.model.*Exception',
  'com.datadog.debugger.parser.*Exception',
  'com.datadog.debugger.agent.DebuggerTransformer.SafeClassWriter',
  'com.datadog.debugger.agent.DebuggerProbe.When.Threshold',
  'com.datadog.debugger.agent.DebuggerAgent.ShutdownHook',
  'com.datadog.debugger.agent.DebuggerAgent',
  'com.datadog.debugger.agent.DebuggerAgent.DebuggerReporter',
  // too old for this coverage (JDK 1.2)
  'antlr.*',
  // only static classes
  'com.datadog.debugger.util.MoshiSnapshotHelper',
  // based on JDK WeakHashMap
  'com.datadog.debugger.util.WeakIdentityHashMap*'
]

dependencies {
  // main dependencies
  implementation project(':utils:container-utils')
  implementation libs.slf4j
  implementation libs.bundles.asm
  implementation project(':internal-api')
  implementation project(':communication')
  compileOnly project(':dd-java-agent:agent-tooling')
  compileOnly project(':dd-java-agent:agent-builder')
  compileOnly project(':dd-trace-core')
  implementation project(':dd-java-agent:agent-debugger:debugger-el')
  implementation project(':dd-java-agent:agent-debugger:debugger-bootstrap')
  implementation libs.okhttp
  implementation libs.dogstatsd
  implementation libs.moshi

  testImplementation libs.bundles.junit5
  testImplementation group: 'org.ow2.asm', name: 'asm-util', version: libs.versions.asm.get()
  testImplementation group: "org.junit.jupiter", name: "junit-jupiter-params", version: libs.versions.junit5.get()
  testImplementation project(':dd-java-agent:agent-debugger:debugger-test-scala')
  testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.7.0")
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: libs.versions.junit5.get()
  testImplementation libs.bundles.mockito
  testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: libs.versions.okhttp.legacy.get()
  testImplementation group: 'org.springframework.boot', name: 'spring-boot', version: '2.3.5.RELEASE'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.3.5.RELEASE'
  testImplementation group: 'org.freemarker', name: 'freemarker', version: '2.3.30'
  testImplementation group: 'org.jooq', name: 'joor-java-8', version: '0.9.13'
  testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-compiler-embeddable', version: "1.9.25"
  testImplementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: "1.0.0"
  testImplementation project(':dd-trace-core')
  testImplementation project(':dd-java-agent:agent-builder')
  testImplementation project(':remote-config:remote-config-core')
  testImplementation project(':utils:test-utils')
  testRuntimeOnly group: 'org.scala-lang', name: 'scala-compiler', version: libs.versions.scala213.get()
  testRuntimeOnly group: 'antlr', name: 'antlr', version: '2.7.7'
}

shadowJar {
  dependencies deps.excludeShared
  dependencies {
    exclude(project(':dd-java-agent:agent-debugger:debugger-bootstrap'))
  }
}

jar {
  archiveClassifier = 'unbundled'
  from sourceSets.main.output
}

// we want to test with no special reflective access (no --add-opens)
ext.allowReflectiveAccessToJdk = false
