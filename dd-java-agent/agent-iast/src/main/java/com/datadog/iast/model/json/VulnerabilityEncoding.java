package com.datadog.iast.model.json;

import com.datadog.iast.model.Evidence;
import com.datadog.iast.model.Vulnerability;
import com.datadog.iast.model.VulnerabilityBatch;
import com.squareup.moshi.JsonAdapter;
import com.squareup.moshi.Moshi;
import com.squareup.moshi.Types;
import java.util.List;
import java.util.stream.Collectors;

public class VulnerabilityEncoding {

  private static final String MAX_SIZE_EXCEEDED = "MAX SIZE EXCEEDED";

  static final Moshi MOSHI =
      new Moshi.Builder().add(new SourceTypeAdapter()).add(new AdapterFactory()).build();

  private static final JsonAdapter<VulnerabilityBatch> BATCH_ADAPTER =
      MOSHI.adapter(VulnerabilityBatch.class);

  public static String toJson(final VulnerabilityBatch value) {
    String json = BATCH_ADAPTER.toJson(value);
    return json.getBytes().length > 25000 ? getExceededTagSizeJson(value) : json;
  }

  static String getExceededTagSizeJson(final VulnerabilityBatch value) {
    // TODO report via telemetry
    List<Vulnerability> newList =
        value.getVulnerabilities().stream()
            .map(
                vuln ->
                    new Vulnerability(
                        vuln.getType(), vuln.getLocation(), new Evidence(MAX_SIZE_EXCEEDED)))
            .collect(Collectors.toList());
    return String.format(
        "{ \"vulnerabilities\":  %s }",
        MOSHI.adapter(Types.newParameterizedType(List.class, Vulnerability.class)).toJson(newList));
  }
}
