import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
  id 'com.github.johnrengelman.shadow'
  id 'me.champeau.jmh'
  id 'java-test-fixtures'
  id 'com.google.protobuf' version '0.8.18'
  id 'net.ltgt.errorprone' version '3.1.0'
}

apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/version.gradle"

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(11))
  }
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}

tasks.withType(AbstractCompile).configureEach {
  // ensure no APIs beyond JDK8 are used
  options.compilerArgs.addAll(['--release', '8'])
}

// First version with Mac M1 support
def grpcVersion = '1.42.2'
protobuf {
  protoc {
    // Download compiler rather than using locally installed version:
    // First version with Mac M1 support
    artifact = 'com.google.protobuf:protoc:3.17.3'
  }
  plugins {
    // First version with aarch support
    grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
  }
  generateProtoTasks {
    all()*.plugins { grpc {} }
  }
}

dependencies {
  api deps.slf4j

  compileOnly project(':dd-java-agent:instrumentation:iast-instrumenter')
  testRuntimeOnly project(':dd-java-agent:instrumentation:iast-instrumenter')

  implementation project(':internal-api')
  implementation project(':internal-api:internal-api-9')
  implementation group: 'com.squareup.moshi', name: 'moshi', version: versions.moshi

  testFixturesApi project(':dd-java-agent:testing')
  testFixturesApi project(':utils:test-utils')
  testImplementation deps.bytebuddy
  testImplementation('org.skyscreamer:jsonassert:1.5.1')
  testImplementation('org.codehaus.groovy:groovy-yaml:3.0.17')

  testImplementation group: 'io.grpc', name: 'grpc-core', version: grpcVersion
  testImplementation group: 'io.grpc', name: 'grpc-protobuf', version: grpcVersion

  jmh project(':utils:test-utils')
  jmh project(':dd-trace-core')
  jmh project(':dd-java-agent:agent-builder')
  jmh project(':dd-java-agent:instrumentation:iast-instrumenter')
  jmh project(':dd-java-agent:instrumentation:java-lang')

  compileOnly('org.jetbrains:annotations:24.0.0')
  errorprone('com.uber.nullaway:nullaway:0.10.15')
  errorprone('com.google.errorprone:error_prone_core:2.23.0')
}

shadowJar {
  dependencies deps.excludeShared
}

jar {
  archiveClassifier = 'unbundled'
}

ext {
  minimumBranchCoverage = 0.6
  minimumInstructionCoverage = 0.8
  excludedClassesCoverage = [
    // Avoid coverage measurement of model getters atm
    'com.datadog.iast.model.Evidence',
    'com.datadog.iast.model.Range',
    'com.datadog.iast.model.Source',
    'com.datadog.iast.model.Vulnerability',
    // Small JsonAdapters with unimplemented fromJson
    'com.datadog.iast.model.json.FormattingAdapter',
    'com.datadog.iast.model.json.SourceTypeAdapter',
    'com.datadog.iast.model.json.VulnerabilityTypeAdapter',
  ]
  excludedClassesBranchCoverage = [
    // logger level related branches
    'com.datadog.iast.taint.TaintedObjects.TaintedObjectsDebugAdapter'
  ]
  excludedClassesInstructionCoverage = []
}

tasks.withType(Test).configureEach {
  jvmArgs += ['-Ddd.iast.enabled=true']
}
spotless {
  java {
    target 'src/**/*.java'
  }
}

jmh {
  jmhVersion = '1.28'
  duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
}

pitest {
  targetClasses = ['com.datadog.iast.*']
  jvmArgs = ['-Ddd.iast.enabled=true']
}

sourceSets {
  test {
    java {
      srcDirs += ["$buildDir/generated/source/proto/test/java"]
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  if (name == 'compileJava') {
    options.errorprone {
      check("NullAway", CheckSeverity.ERROR)
      option("NullAway:AnnotatedPackages", "com.datadog.iast")
      disableAllWarnings = true // only errors for now
    }
  } else {
    // disable null away for test and jmh
    options.errorprone.enabled = false
  }
}
