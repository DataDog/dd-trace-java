import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
  id 'com.gradleup.shadow'
  id 'me.champeau.jmh'
  id 'com.google.protobuf' version '0.8.18'
  id 'net.ltgt.errorprone' version '3.1.0'
}

apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/version.gradle"

tasks.withType(AbstractCompile).configureEach {
  configureCompiler(it, 11, JavaVersion.VERSION_1_8, "Ensure no APIs beyond JDK8 are used")
}

// First version with Mac M1 support
def grpcVersion = '1.42.2'
protobuf {
  protoc {
    // Download compiler rather than using locally installed version:
    // First version with Mac M1 support
    artifact = 'com.google.protobuf:protoc:3.17.3'
  }
  plugins {
    // First version with aarch support
    grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
  }
  generateProtoTasks {
    ofSourceSet("test").configureEach {
      plugins { grpc {} }
    }
  }
}

dependencies {
  api libs.slf4j

  compileOnly project(':dd-java-agent:instrumentation:iast-instrumenter')
  testRuntimeOnly project(':dd-java-agent:instrumentation:iast-instrumenter')

  implementation project(':internal-api')
  implementation project(':internal-api:internal-api-9')
  implementation libs.moshi
  implementation libs.bundles.asm

  testImplementation project(':utils:test-utils')
  testImplementation project(':dd-java-agent:agent-bootstrap')
  testImplementation libs.bytebuddy
  testImplementation('org.skyscreamer:jsonassert:1.5.1')
  testImplementation libs.groovy.yaml
  testImplementation libs.guava

  testImplementation group: 'io.grpc', name: 'grpc-core', version: grpcVersion
  testImplementation group: 'io.grpc', name: 'grpc-protobuf', version: grpcVersion

  testImplementation libs.logback.classic

  jmh project(':utils:test-utils')
  jmh project(':dd-trace-core')
  jmh project(':dd-java-agent:agent-builder')
  jmh project(':dd-java-agent:instrumentation:iast-instrumenter')
  jmh project(':dd-java-agent:instrumentation:java:java-lang:java-lang-1.8')

  compileOnly('org.jetbrains:annotations:24.0.0')
  errorprone('com.uber.nullaway:nullaway:0.10.15')
  errorprone('com.google.errorprone:error_prone_core:2.23.0')
}

tasks.named("shadowJar", ShadowJar) {
  dependencies deps.excludeShared
}

tasks.named("jar", Jar) {
  archiveClassifier = 'unbundled'
}

ext {
  minimumBranchCoverage = 0.6
  minimumInstructionCoverage = 0.8
  excludedClassesCoverage = [
    // Avoid coverage measurement of model getters atm
    'com.datadog.iast.model.Evidence',
    'com.datadog.iast.sink.SinkModuleBase.EvidenceBuilder',
    'com.datadog.iast.model.Range',
    'com.datadog.iast.model.Source',
    'com.datadog.iast.model.Vulnerability',
    // Small JsonAdapters with unimplemented fromJson
    'com.datadog.iast.model.json.FormattingAdapter',
    'com.datadog.iast.model.json.SourceTypeAdapter',
    'com.datadog.iast.model.json.VulnerabilityTypeAdapter',
    'com.datadog.iast.taint.TaintedMap',
    // TODO: Groovy 4 issues
    'com.datadog.iast.taint.TaintedMap.TaintedMapImpl',
    // TODO: Groovy 4 issues
    'com.datadog.iast.taint.TaintedMap.TaintedMapImpl.1',
    // TODO: Groovy 4 issues
    'com.datadog.iast.taint.TaintedMap.Debug',
    // TODO: Groovy 4 issues
    'com.datadog.iast.taint.TaintedMap.NoOp', // TODO: Groovy 4 issues
  ]
  excludedClassesBranchCoverage = []
  excludedClassesInstructionCoverage = []
}

tasks.withType(Test).configureEach {
  jvmArgs += ['-Ddd.iast.enabled=true']
}
spotless {
  java {
    target 'src/**/*.java'
  }
}

jmh {
  jmhVersion = libs.versions.jmh.get()
  duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named("forbiddenApisJmh") {
  ignoreFailures = true
}

sourceSets {
  test {
    java {
      srcDirs += ["$buildDir/generated/source/proto/test/java"]
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  if (name == 'compileJava') {
    options.errorprone {
      check("NullAway", CheckSeverity.ERROR)
      option("NullAway:AnnotatedPackages", "com.datadog.iast")
      disableAllWarnings = true // only errors for now
    }
  } else {
    // disable null away for test and jmh
    options.errorprone.enabled = false
  }
}
