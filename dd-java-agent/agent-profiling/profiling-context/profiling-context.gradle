apply from: "$rootDir/gradle/java.gradle"
apply plugin: 'idea'

ext {
  minimumBranchCoverage = 0.8
  excludedClassesCoverage = [
    // simple DTO
    "com.datadog.profiling.context.PositionDecoder.*",
    "com.datadog.profiling.context.JfrTimestampPatch",
    // jacoco does not allow per-method excludes so, here we go
    "com.datadog.profiling.context.ProfilerTracingContextTrackerFactory",
    // this one has pretty good coverage but being a small class the one method touching reflection
    // and failing in most test runners (just to fall back) means that the instruction coverage is busted
    "com.datadog.profiling.context.allocator.heap.HeapAllocator",
  ]
}

sourceSets {
  "main_java11" {
    java.srcDirs "${project.projectDir}/src/main/java11"
  }
}

dependencies {
  api project(':internal-api')

  implementation deps.slf4j
  main_java11CompileOnly deps.slf4j
  implementation sourceSets.main_java11.output

  testImplementation deps.junit5
  testImplementation deps.mockito
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileMain_java11Java.doFirst {
  if (!System.env.JAVA_11_HOME) {
    throw new GradleException('JAVA_11_HOME must be set to build transformer helpers')
  }
  options.fork = true
  options.forkOptions.javaHome = file(System.env.JAVA_11_HOME)
  sourceCompatibility = JavaVersion.VERSION_1_9
  targetCompatibility = JavaVersion.VERSION_1_9
}

jar {
  from sourceSets.main_java11.output
}
forbiddenApisMain_java11 {
  failOnMissingClasses = false
}

idea {
  module {
    jdkName = '11'
  }
}
