// Set properties before any plugins get loaded
ext {
}

apply from: "$rootDir/gradle/java.gradle"

minimumBranchCoverage = 0.80

excludedClassesCoverage += [
  // This is just a static declaration that is hard to test
  'com.datadog.profiling.uploader.VersionInfo',
  // Large parts of this class are jvm specific which makes jacoco really confused since we run it only for 'default' jvm
  'com.datadog.profiling.uploader.util.PidHelper',
  // The byte counting input/output stream are delegating most of their methods so it does not make sense to force the coverage there
  'com.datadog.profiling.uploader.ByteCountingInputStream',
  'com.datadog.profiling.uploader.ByteCountingOutputStream',
  // A call-back inner class holds few enough instructions to make not testing with different log levels to breach the jacoco limits
  'com.datadog.profiling.uploader.ProfileUploader.1'
]

dependencies {
  compile deps.slf4j
  compile project(':utils:container-utils')
  compile project(':internal-api')

  compile project(':dd-java-agent:agent-profiling:profiling-controller')

  compile deps.okhttp
  compile group: 'com.github.jnr', name: 'jnr-posix', version: '3.0.52'
  compile group: 'org.lz4', name: 'lz4-java', version: '1.7.1'

  testCompile deps.junit5
  testCompile project(':dd-java-agent:agent-profiling:profiling-testing')
  testCompile deps.mockito
  testCompile group: 'com.squareup.okhttp3', name: 'mockwebserver', version: versions.okhttp
}

/* We use Java8 features, but there is no code needing JFR libraries */
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
