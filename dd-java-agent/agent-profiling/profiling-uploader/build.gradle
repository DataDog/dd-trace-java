// Set properties before any plugins get loaded
ext {
}

apply from: "$rootDir/gradle/java.gradle"

minimumBranchCoverage = 0.80

excludedClassesCoverage += [
  // Large parts of this class are jvm specific which makes jacoco really confused since we run it only for 'default' jvm
  'com.datadog.profiling.uploader.util.PidHelper',
  // The byte counting input/output stream are delegating most of their methods so it does not make sense to force the coverage there
  'com.datadog.profiling.uploader.ByteCountingInputStream',
  'com.datadog.profiling.uploader.ByteCountingOutputStream',
  // A call-back inner class holds few enough instructions to make not testing with different log levels to breach the jacoco limits
  'com.datadog.profiling.uploader.ProfileUploader.1',
  // When running on Java 8 without `jfr`, no code is executed
  'com.datadog.profiling.uploader.util.JfrCliHelper',
  'com.datadog.profiling.uploader.util.JfrCliHelper.Event'
]

dependencies {
  implementation libs.slf4j
  implementation project(':communication')
  implementation project(':internal-api')
  implementation project(':utils:socket-utils')
  implementation project(':utils:version-utils')

  implementation project(':dd-java-agent:agent-profiling:profiling-controller')

  implementation libs.okhttp
  implementation libs.lz4

  testImplementation libs.bundles.junit5
  testImplementation project(':dd-java-agent:agent-profiling:profiling-testing')
  testImplementation libs.bundles.mockito
  testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: libs.versions.okhttp.legacy.get()

  testImplementation(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.10')
}

