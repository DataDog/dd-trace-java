plugins {
  id "de.undercouch.download" version "4.1.1"
  id "com.github.johnrengelman.shadow"
}

apply from: "$rootDir/gradle/java.gradle"

minimumInstructionCoverage = 0.5
minimumBranchCoverage = 0.5

excludedClassesCoverage += [
  // enums with no additional functionality
  'com.datadog.profiling.controller.async.Arch',
  'com.datadog.profiling.controller.async.OperatingSystem',
  // --
  // although it is quite well covered jacoco complains about branch coverage due to exception handlers
  'com.datadog.profiling.auxiliary.async.AsyncProfilerRecording'
]

def AP_VERSION = project.findProperty("dd.async_profiler")
AP_VERSION = AP_VERSION != null ? AP_VERSION : "2.5-DD-SNAPSHOT"

dependencies {
  api project(':dd-java-agent:agent-profiling:profiling-controller')
  api project(':dd-java-agent:agent-profiling:profiling-auxiliary')
  implementation group: "tools.profiler", name: "async-profiler", version: "${AP_VERSION}", changing: true

  annotationProcessor deps.autoserviceProcessor
  compileOnly deps.autoserviceAnnotation

  implementation deps.slf4j

  testImplementation deps.jmc
  testImplementation deps.junit5
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

shadowJar {
  classifier ""
  include {
    def rslt = false
    rslt |= it.path == "com" || it.path == "com/datadog" || it.path.startsWith("com/datadog/")
    rslt |= it.path == "one" || it.path == "one/profiler" || it.path.startsWith("one/profiler/")
    rslt |= it.path == "META-INF" || it.path == "META-INF/services" || it.path.startsWith("META-INF/services/")
    // TODO: modify the filter to include other OS/arch combinations once the overhead is evaluated
    rslt |= it.path == "native-libs" || it.path.startsWith("native-libs/linux-arm64")
    rslt |= (it.path.contains("async-profiler") && it.path.endsWith(".jar"))
    return rslt
  }
}

build.dependsOn shadowJar

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
