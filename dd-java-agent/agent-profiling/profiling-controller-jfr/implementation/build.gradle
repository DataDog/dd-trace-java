import de.thetaphi.forbiddenapis.gradle.CheckForbiddenApis

// Set properties before any plugins get loaded
apply from: "$rootDir/gradle/java.gradle"
apply plugin: 'idea'

testJvmConstraint {
  minJavaVersion = JavaVersion.VERSION_1_8
}

sourceSets {
  "main_java11" {
    java.srcDirs "${project.projectDir}/src/main/java11"
  }
}

tasks.named("compileJava", JavaCompile) {
  configureCompiler(it, 11, JavaVersion.VERSION_1_8, "Need access to jdk.jfr.internal.*")
}

tasks.named("compileMain_java11Java", JavaCompile) {
  configureCompiler(it, 11, JavaVersion.VERSION_1_9)
}

dependencies {
  api project(':dd-java-agent:agent-profiling:profiling-controller-jfr')
  main_java11CompileOnly project(':dd-java-agent:agent-profiling:profiling-controller-jfr')

  implementation project(':components:environment')
  implementation libs.slf4j

  testImplementation libs.bundles.mockito
  testImplementation libs.bundles.junit5
  testImplementation sourceSets.main_java11.output
}

excludedClassesCoverage += [
  'com.datadog.profiling.controller.jfr.JPMSJFRAccess*',
  // The tests will be run only on Java 8 so we exclude the coverage check to prevent failures for other Java versions
  'com.datadog.profiling.controller.jfr.SimpleJFRAccess*'
]

tasks.named("jar", Jar) {
  from sourceSets.main_java11.output
}

tasks.named("forbiddenApisMain", CheckForbiddenApis) {
  it.failOnMissingClasses = false
}

idea {
  module {
    jdkName = '11'
  }
}

tasks.withType(Test).configureEach {
  conditionalJvmArgs(
    it,
    JavaVersion.VERSION_1_9,
    [
      '--add-opens',
      'jdk.jfr/jdk.jfr.internal=ALL-UNNAMED'] // JPMSJFRAccess needs access to jdk.jfr.internal package
    )
}
