import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'com.gradleup.shadow'
}

apply from: "$rootDir/gradle/java.gradle"

tasks.withType(JavaCompile).configureEach {
  configureCompiler(it, 8, JavaVersion.VERSION_1_8, "Need access to sun.misc package")
}

minimumBranchCoverage = 0.5
minimumInstructionCoverage = 0.5
excludedClassesCoverage += [
  'datadog.trace.agent.test.asserts.*Assert',
  'datadog.trace.agent.test.asserts.*Assert.*',
  'datadog.trace.agent.test.base.*',
  'datadog.trace.agent.test.server.http.HttpProxy.AsyncPipe',
  'datadog.trace.agent.test.server.http.TestHttpServer.*',
  'datadog.trace.agent.test.utils.*',
  // Avoid applying jacoco instrumentation to classes instrumented by tested agent
  'context.FieldInjectionTestInstrumentation**',
  'context.ExcludeFilterTestInstrumentation**',
  // profiling
  'datadog.trace.agent.test.TestProfilingContextIntegration',
  'datadog.trace.agent.test.TestProfilingContextIntegration.TestQueueTiming'
]

configurations.named('api') {
  exclude group: 'org.snakeyaml', module: 'snakeyaml-engine' // we vendor this in the agent jar
}

dependencies {
  api libs.bytebuddy
  api libs.bytebuddyagent
  api libs.slf4j
  api libs.bundles.spock
  api libs.bundles.test.logging
  api libs.guava

  api group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.56.v20240826'
  // ^ 9.4 last to support java 8
  api group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: libs.versions.okhttp.legacy.get()

  api project(':dd-java-agent:agent-tooling')
  api project(':dd-java-agent:agent-builder')
  api project(':utils:test-utils')
  api project(':utils:time-utils')

  api libs.groovy

  implementation "org.junit.platform:junit-platform-runner:${libs.versions.junit.platform.get()}"
  implementation project(':dd-java-agent:appsec')
}

tasks.named("shadowJar", ShadowJar) {
  dependencies {
    include(dependency {
      it.moduleGroup == 'org.eclipse.jetty'
    })
  }
  relocate "org.eclipse.jetty", "datadog.eclipse.jetty"
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()
}
