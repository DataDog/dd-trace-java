buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE'
  }
}

repositories {
  maven {
    url "https://packagecloud.io/sqreen/sqreen-public/maven2"
  }
  maven {
    url 'https://oss.sonatype.org/content/groups/public/'
  }
  ivy {
    artifactPattern 'http://sqreen-ci-java.s3-website-us-east-1.amazonaws.com/jars/[organisation]/[artifact]-[revision](-[classifier]).[ext]'
    ivyPattern 'http://sqreen-ci-java.s3-website-us-east-1.amazonaws.com/jars/[organisation]/[module]-[revision].xml'
  }
}

apply from: "$rootDir/gradle/java.gradle"
apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 8
targetCompatibility = 8

def testVersion = null
if (project.hasProperty('testExecutable') && project.testExecutable) {
  def javaProcess = "${project.testExecutable} -version".split(' ').execute()
  def text = javaProcess.errorStream.text.trim()
  def m = text =~ /version "(\d+)/
  if (m.find()) {
    testVersion = m.group(1) as int
  }
}

/* Last versions supporting Java 6
 * (this can be updated now though, because we support only 8+) */
ext['jetty.version'] = '8.1.22.v20160922'
ext['jackson.version'] = '2.7.9'

def groovyVersion = '2.5.8'
ext['groovy.version'] = groovyVersion

dependencies {
  implementation(project(':dd-java-agent:appsec:weblog:weblog-common')) {
    exclude module: 'servlet-api'
  }

  // these need replacement in the future
  implementation group: 'io.sqreen', name: 'sqreen-sdk', version: '0.3'
  implementation group: 'io.sqreen', name: 'sqreen-sdk-standalone', version: '0.3.0'

  implementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.8'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa', {
    exclude module: 'tomcat-jdbc'
  }

  // overrides version thru boot-starter. jboss6 chokes on 1.1.10+
  implementation 'ch.qos.logback:logback-core:1.1.9'
  implementation 'ch.qos.logback:logback-classic:1.1.9' // overrides version thru boot-starter. jboss6 chokes on 1.1.10+

  implementation 'org.apache.tomcat:tomcat-jdbc:7.0.82'

  implementation 'org.apache.httpcomponents:httpclient:4.5.10'

  implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.5'
  implementation 'org.mongodb:mongodb-driver:3.6.1'

  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-freemarker'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.apache.velocity:velocity:1.7'
  implementation 'org.apache.velocity:velocity-tools:2.0'

  implementation 'org.grails:grails-plugin-codecs:3.2.10'
  implementation 'org.grails:grails-plugin-i18n:3.2.10'
  implementation 'org.grails:grails-gsp:3.3.0'
  implementation 'org.grails:grails-web-fileupload:3.2.10'

  // gradle is not pulling grails dependencies for compile classpath anymore
  compileOnly 'org.grails:grails-gsp:3.3.0'
  compileOnly 'org.grails:grails-web-gsp:3.3.0'
  compileOnly 'org.grails:grails-taglib:3.3.0'
  compileOnly 'org.grails:grails-core:3.2.10'
  compileOnly 'org.grails:grails-bootstrap:3.2.10'
  compileOnly 'org.grails:grails-web-common:3.2.10'
  compileOnly 'org.grails:grails-web-url-mappings:3.2.10'
  compileOnly 'org.grails:grails-encoder:3.2.10'

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.9.1'
  implementation group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity3', version: '2.1.3.RELEASE'

  if (JavaVersion.current() >= JavaVersion.VERSION_1_9 ||
  (testVersion && testVersion >= 9)) {
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    implementation group: 'com.sun.activation', name: 'javax.activation', version: '1.2.0'
  }

  compileOnly 'javax.servlet:javax.servlet-api:3.0.1'

  // jdbc drivers
  runtimeOnly 'org.hsqldb:hsqldb:2.3.5:jdk6debug'
  runtimeOnly 'org.postgresql:postgresql:42.2.5.jre6'
  runtimeOnly 'oracle:ojdbc6:11.2.0.4'
  runtimeOnly 'mysql:mysql-connector-java:5.1.42'
  runtimeOnly 'org.mongodb:mongodb-jdbc:1.0.0'
  implementation 'redis.clients:jedis:3.3.0'

  // message brokers
  implementation 'com.amazonaws:aws-java-sdk-sqs:1.11.838'

  runtimeOnly 'javax.servlet:jstl:1.2'

  // jaxb
  runtimeOnly 'javax.xml.bind:jaxb-api:2.3.1'
  runtimeOnly 'com.sun.xml.bind:jaxb-core:2.3.0.1'
  runtimeOnly 'com.sun.xml.bind:jaxb-impl:2.3.0.1'

  // SSRF
  implementation 'org.apache.httpcomponents:httpclient:4.5.10'
  implementation 'commons-httpclient:commons-httpclient:3.1'

  // XXE
  implementation 'com.fasterxml.woodstox:woodstox-core:6.0.3'
  implementation 'com.sun.xml.stream:sjsxp:1.0.2'
  implementation 'org.dom4j:dom4j:2.0.2' // 2.1+ is java 8 only
  implementation 'jaxen:jaxen:1.2.0'
  implementation 'com.fasterxml:aalto-xml:1.2.2'
  implementation 'xerces:xercesImpl:2.12.0'

  // For jetty (jsp not supported, and adding jetty-jsp has problems finding jstl libs)
  // This is used instead of Tomcat 8 because Jetty 8 supports Java 6
  providedRuntime 'org.springframework.boot:spring-boot-starter-jetty', {
    exclude group: 'org.eclipse.jetty.websocket'
  }

  // For tomcat 8 (see also global exclusion ahead):
  //    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
  //    providedRuntime 'org.apache.tomcat.embed:tomcat-embed-jasper:8.5.23'
  //    providedRuntime 'javax.servlet:javax.servlet-api:3.1.0'

  testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
  testImplementation group: 'junit', name: 'junit', version: '4.12'
  testImplementation group: 'org.gmock', name: 'gmock', version: '0.8.3'

  testCompileOnly 'javax.servlet:servlet-api:2.4'
}

configurations.all*.exclude module: 'spring-boot-starter-tomcat'

// to avoid loop in glassfish (jul -> slf4j -> logback -> console -> jul)
configurations.all*.exclude module: 'jul-to-slf4j'

def xmlFactoriesJvmArgs = [
  '-Djavax.xml.parsers.DocumentBuilderFactory=com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl',
  '-Djavax.xml.parsers.SAXParserFactory=com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl'
]

project.ext.mainClassName = 'io.sqreen.testapp.sampleapp.Application'
bootRun {
  if (project.hasProperty('jvmArgs')) {
    jvmArgs = (project.jvmArgs.split(/\s+/) as List) //  + ["-Ddebug"]
  }

  if (project.hasProperty('debugJvm') && project.debugJvm == 'true') {
    // put it at the front so we can debug premain
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=0.0.0.0:5005']+ jvmArgs
  }
  if (project.hasProperty('testExecutable') && project.testExecutable) {
    executable = project.testExecutable
  }

  jvmArgs += xmlFactoriesJvmArgs
}

ext.minJavaVersionForTests = JavaVersion.VERSION_1_8
// our version of groovy is broken on JDK 14+
ext.maxJavaVersionForTests = JavaVersion.VERSION_13
tasks.withType(Test).all {
  jvmArgs = xmlFactoriesJvmArgs
  outputs.upToDateWhen { false }
}

def createBundleTarget = { name, deps ->
  def resourcesSubDir = new File("${sourceSets.main.output.resourcesDir}/modules/${name}")

  sourceSets {
    "$name" {
      java.srcDir "src/$name/java"
      java.destinationDirectory.fileValue resourcesSubDir
      groovy.srcDir "src/$name/groovy"
      groovy.destinationDirectory.fileValue resourcesSubDir
      resources.srcDir "src/$name/resources"
      output.resourcesDir = resourcesSubDir
    }
  }
  dependencies {
    delegate."${name}CompileOnly" 'org.slf4j:slf4j-api'
    delegate."${name}CompileOnly" 'javax.servlet:javax.servlet-api:3.0.1'
    delegate."${name}CompileOnly" 'org.springframework:spring-context'
    delegate."${name}CompileOnly" 'org.springframework:spring-webmvc'
    delegate."${name}CompileOnly" "org.codehaus.groovy:groovy-all:${groovyVersion}"
    deps.each { d ->
      if (!(d instanceof List)) {
        d = [d]
      }
      delegate."${name}Compile"(*d)
    }
  }

  def allTasks = [
    "process${name.capitalize()}Resources",
    "compile${name.capitalize()}Groovy",
    "compile${name.capitalize()}Java",
  ]*.toString()
  tasks.findAll { it.name in allTasks }.each { task ->
    processResources.dependsOn task
  }

  def taskName = "copyJars${name.capitalize()}"
  def copyJarsTask = tasks.create(name: taskName, type: Copy) {
    group = null
    description = "Copies $name jar dependencies into resources/$name."
    from configurations."${name}Compile"
    into resourcesSubDir
  }
  processResources.dependsOn copyJarsTask
}
createBundleTarget 'thymeleaf3', [
  [
    'org.thymeleaf:thymeleaf:3.0.11.RELEASE',
    {
      exclude group: 'org.slf4j', module: 'slf4j-api'
      exclude group: 'org.javassist', module: 'javassist'
    }]
]
