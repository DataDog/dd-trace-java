buildscript {
  dependencies {
    classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.1.1'
  }
}
plugins {
  id "com.github.johnrengelman.shadow"
  id "me.champeau.jmh"
}

apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/version.gradle"
apply plugin: 'jsonschema2pojo'

repositories {
  ivy {
    artifactPattern 'http://sqreen-ci-java.s3-website-us-east-1.amazonaws.com/jars/[organisation]/[artifact]-[revision](-[classifier]).[ext]'
    ivyPattern 'http://sqreen-ci-java.s3-website-us-east-1.amazonaws.com/jars/[organisation]/[module]-[revision].xml'
  }
}

dependencies {
  api deps.slf4j
  implementation project(':internal-api')
  implementation project(':communication')
  implementation group: 'io.sqreen', name: 'libsqreen', version: '2.0.1'
  implementation group: 'com.squareup.moshi', name: 'moshi', version: versions.moshi

  annotationProcessor deps.autoserviceProcessor
  compileOnly deps.autoserviceAnnotation

  testImplementation deps.bytebuddy
  testImplementation project(':utils:test-utils')
  testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
  testImplementation group: 'com.flipkart.zjsonpatch', name: 'zjsonpatch', version: '0.4.11'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

shadowJar {
  exclude '**/*-dbgsym.zip'
  dependencies deps.sharedInverse
  dependencies {
    exclude(project(':dd-java-agent:agent-bootstrap'))
    exclude(project(':dd-java-agent:agent-logging'))
    exclude(project(':dd-trace-api'))
    exclude(project(':internal-api'))
    exclude(project(':communication'))
    exclude(dependency('org.slf4j::'))
  }
}

jar {
  archiveClassifier = 'unbundled'
}

jmh {
  jmhVersion = '1.32'
  duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
  jvmArgs = ['-Ddd.appsec.enabled=true -Xms64m -Xmx64m']
  failOnError = false
  forceGC = true
  if (project.hasProperty('jmhIncludes')) {
    includes = [project.jmhIncludes]
  }
}
jmhJar {
  exclude 'org/slf4j/impl/**/*'
}

jsonSchema2Pojo {
  source = files("$projectDir/src/main/schemas")
  targetPackage = 'com.datadog.appsec.report'
  includeAdditionalProperties = false
  includeGeneratedAnnotation = false
  generateBuilders = true
  useInnerClassBuilders = true
  usePrimitives = false
  annotationStyle = 'moshi1'
  //  customAnnotator = 'org.jsonschema2pojo.NoopAnnotator'

  // Whether to use the 'title' property of the schema to decide the class name (if not
  // set to true, the filename and property names are used).
  useTitleAsClassname = false
  sourceType = 'jsonschema'


  dateType = "java.time.LocalDate"
  dateTimeType = "java.time.Instant"
  timeType = "java.time.LocalDate"

  //  formatTypeMapping = []
  //  toStringExcludes = ["someProperty"]

  targetVersion = "1.8"
}

tasks['generateJsonSchema2Pojo'].doLast {
  project.delete(files(
    "${project.buildDir}/generated-sources/js2p/com/datadog/appsec/report/raw/contexts/actor/Identifiers.java",
    "${project.buildDir}/generated-sources/js2p/com/datadog/appsec/report/raw/contexts/http/HttpHeaders.java",
    "${project.buildDir}/generated-sources/js2p/com/datadog/appsec/report/raw/contexts/service_stack/Service.java"
    ))
}

task runSampleApp(type: GradleBuild, dependsOn: ':dd-java-agent:shadowJar') {
  description = "Run AppSec sample app with instrumentation"
  group = 'application'

  def agentShadowJar = project(':dd-java-agent').tasks['shadowJar']

  def jvmArgs = '-Ddd.appsec.enabled=true'
  if (project.hasProperty('jvmArgs')) {
    jvmArgs += " ${project.'jvmArgs'}"
  }

  doFirst {
    startParameter = startParameter.newInstance()
    startParameter.projectProperties = [
      testExecutable: System.getenv('TEST_EXECUTABLE') ?: '',
      jvmArgs       : "-javaagent:${agentShadowJar.archiveFile.get().asFile} $jvmArgs",
      debugJvm      : project.hasProperty('debugJvm') ? project.debugJvm : 'false',
    ]
  }
  tasks = ['weblog:weblog-spring-app:bootRun']
}

ext {
  minimumBranchCoverage = 0.6
  minimumInstructionCoverage = 0.8
  excludedClassesCoverage = [
    'com.datadog.appsec.powerwaf.LibSqreenInitialization',
    'com.datadog.appsec.report.struct.*',
    'com.datadog.appsec.report.raw.*',
    'com.datadog.appsec.report.ReportSerializer.MoshiAdapter',
    'com.datadog.appsec.report.AppSecApi.1',
    'com.datadog.appsec.config.AppSecConfigServiceImpl.SubscribeFleetServiceRunnable.1',
  ]
  excludedClassesBranchCoverage = [
    'com.datadog.appsec.gateway.GatewayBridge',
    'com.datadog.appsec.event.data.Address', // assert never fails
  ]
  excludedClassesInstructionCoverage = ['com.datadog.appsec.report.ReportServiceImpl.TaskSchedulerImpl',]
  minJavaVersionForTests = JavaVersion.VERSION_1_8
}

tasks.withType(Test).configureEach {
  jvmArgs += ['-Ddd.appsec.enabled=true']
}
def rootDir = project.rootDir
spotless {
  java {
    target 'src/**/*.java'
  }
}
