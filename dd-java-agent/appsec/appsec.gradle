plugins {
  id "com.github.johnrengelman.shadow"
}

apply from: "$rootDir/gradle/java.gradle"

repositories {
  ivy {
    artifactPattern 'http://sqreen-ci-java.s3-website-us-east-1.amazonaws.com/jars/[organisation]/[artifact]-[revision](-[classifier]).[ext]'
    ivyPattern 'http://sqreen-ci-java.s3-website-us-east-1.amazonaws.com/jars/[organisation]/[module]-[revision].xml'
  }
}

dependencies {
  compile deps.slf4j
  compile project(':internal-api')
  compile group: 'io.sqreen', name: 'libsqreen', version: '2.0'

  annotationProcessor deps.autoserviceProcessor
  compileOnly deps.autoserviceAnnotation
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configurations {
  // exclude bootstrap dependencies from shadowJar
  runtime.exclude module: deps.slf4j
  runtime.exclude group: 'org.slf4j'
}

shadowJar {
  exclude '**/*-dbgsym.zip'
  dependencies deps.sharedInverse
  dependencies {
    exclude(project(':dd-java-agent:agent-bootstrap'))
    exclude(project(':dd-java-agent:agent-logging'))
    exclude(project(':dd-trace-api'))
    exclude(project(':internal-api'))
    exclude(dependency('org.slf4j::'))
  }
}

jar {
  archiveClassifier = 'unbundled'
}

task runSampleApp(type: GradleBuild, dependsOn: ':dd-java-agent:shadowJar') {
  description = "Run AppSec sample app with instrumentation"
  group = 'application'

  def agentShadowJar = project(':dd-java-agent').tasks['shadowJar']

  def jvmArgs = '-Ddd.appsec.beta=true'
  if (project.hasProperty('jvmArgs')) {
    jvmArgs += " ${project.'jvmArgs'}"
  }

  doFirst {
    startParameter = startParameter.newInstance()
    startParameter.projectProperties = [
      testExecutable: System.getenv('TEST_EXECUTABLE') ?: '',
      jvmArgs       : "-javaagent:${agentShadowJar.archiveFile.get().asFile} $jvmArgs",
      debugJvm      : project.hasProperty('debugJvm') ? project.debugJvm : 'false',
    ]
  }
  tasks = ['weblog:weblog-spring-app:bootRun']
}
