plugins {
  id "com.github.johnrengelman.shadow" version "2.0.1"
}

description = 'dd-java-agent'

apply from: "${rootDir}/gradle/java.gradle"
apply from: "${rootDir}/gradle/publish.gradle"
apply from: "${rootDir}/gradle/jacoco.gradle"
jacocoTestReport.dependsOn ':dd-java-agent-ittests:test'

whitelistedInstructionClasses += whitelistedBranchClasses += [
  'com.datadoghq.trace.agent.TracingAgent',
  'com.datadoghq.trace.agent.OpenTracingHelper*',
  'com.datadoghq.trace.agent.*Config',
  'com.datadoghq.trace.agent.*Info',
  'com.datadoghq.trace.agent.*ArtifactSupport',
  'com.datadoghq.trace.agent.integration.*',
  'io.opentracing.contrib.*',
  'com.datadoghq.trace.agent.*',
]

dependencies {
  compile project(':dd-trace')
  compile project(':dd-trace-annotations')

  compile group: 'org.jboss.byteman', name: 'byteman', version: '4.0.0-BETA5'

  compile group: 'org.reflections', name: 'reflections', version: '0.9.11'
  compile group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc3'
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

  compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
  // ^ Generally a bad idea for libraries, but we're shadowing.

  testCompile project(':dd-java-agent:integrations:helpers')
  testCompile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.4.2'
  testCompile group: 'io.opentracing', name: 'opentracing-mock', version: '0.30.0'
  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.2'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.22'
  testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

  // Not bundled in with the agent.  Usage requires being on the app's classpath (eg. Spring Boot's executable jar)
  compileOnly group: 'io.opentracing.contrib', name: 'opentracing-jdbc', version: '0.0.3'

  runtime files("${project(':dd-java-agent:integrations:helpers').buildDir}/libs/dd-java-agent-0.2.2-SNAPSHOT.jar")
}

project(':dd-java-agent:integrations:helpers').afterEvaluate { helperProject ->
  project.processResources {
    from(helperProject.tasks.shadowJar)
    rename {
      it.startsWith("helpers") && it.endsWith(".jar") ?
        "helpers.jar.zip" :
        it
    }
  }
  project.processResources.dependsOn helperProject.tasks.shadowJar
}

jar {
  classifier = 'unbundled'

  manifest {
    attributes(
      "Main-Class": "com.datadoghq.trace.agent.DDJavaAgentInfo",
      // I don't think we want to define this since we can't really load after startup:
      //"Agent-Class": "com.datadoghq.trace.agent.TracingAgent",
      "Premain-Class": "com.datadoghq.trace.agent.TracingAgent",
      "Can-Redefine-Classes": true,
      "Can-Retransform-Classes": true,
    )
  }
}

shadowJar {
  classifier null

//    mergeServiceFiles()

  relocate 'org.slf4j', 'dd.slf4j'  // Prevents conflict with other SLF4J instances. Important for premain.

  if (!project.hasProperty("disableShadowRelocate") || !disableShadowRelocate) {
    // Don't relocate opentracing deps.

    relocate 'org.yaml', 'dd.deps.org.yaml'
    relocate 'org.msgpack', 'dd.deps.org.msgpack'
    relocate('com.fasterxml', 'dd.deps.com.fasterxml') {
      exclude 'com.fasterxml.jackson.core.type.TypeReference'
      exclude 'com.fasterxml.jackson.annotation.*'
    }

    relocate 'javassist', 'dd.deps.javassist'
    relocate 'org.reflections', 'dd.deps.org.reflections'
    relocate('org.jboss.byteman', 'dd.deps.org.jboss.byteman') {
      // Renaming these causes a verify error in the tests.
      exclude 'org.jboss.byteman.rule.*'
      exclude 'org.jboss.byteman.rule.helper.*'
    }
    relocate('com.google', 'dd.deps.com.google') {
      // This is used in the Cassandra Cluster.connectAsync signature so we can't relocate it. :fingers_crossed:
      exclude 'com.google.common.util.concurrent.ListenableFuture'
    }
  }

  //Exclude Java 9 compiled classes:
  exclude 'org/jboss/byteman/agent/JigsawAccessEnablerGenerator.class'
  exclude 'org/jboss/byteman/agent/JigsawAccessManager$1.class'
  exclude 'org/jboss/byteman/agent/JigsawAccessManager.class'
  exclude 'org/jboss/byteman/layer/LayerFactory.class'
  exclude 'org/jboss/byteman/layer/LayerModuleFinder$1.class'
  exclude 'org/jboss/byteman/layer/LayerModuleFinder.class'
  exclude 'org/jboss/byteman/layer/LayerModuleReader.class'
  exclude 'org/jboss/byteman/layer/LayerModuleReference.class'

  dependencies {
    exclude(dependency('org.projectlombok:lombok:1.16.18'))
  }
}

// We don't want bundled dependencies to show up in the pom.
modifyPom {
  dependencies.removeAll { true }
}
