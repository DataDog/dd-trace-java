import de.thetaphi.forbiddenapis.gradle.CheckForbiddenApis

// The shadowJar of this project will be injected into the JVM's bootstrap classloader
plugins {
  id 'com.gradleup.shadow'
  id 'me.champeau.jmh'
}

apply from: "$rootDir/gradle/java.gradle"
apply plugin: "idea"

tasks.named("compileJava", JavaCompile).configure {
  configureCompiler(it, 8, JavaVersion.VERSION_1_8, "Need access to sun.* packages")
}

// FIXME: Improve test coverage.
minimumBranchCoverage = 0.0
minimumInstructionCoverage = 0.0

dependencies {
  api project(':dd-trace-api')
  api project(':internal-api')
  api project(':internal-api:internal-api-9')
  api project(':dd-java-agent:agent-logging')
  api project(':dd-java-agent:agent-debugger:debugger-bootstrap')
  api project(':components:environment')
  api project(':components:json')
  api libs.slf4j
  // ^ Generally a bad idea for libraries, but we're shadowing.

  testImplementation project(':dd-java-agent:testing')
}

// Must use Java 11 to build JFR enabled code - there is no JFR in OpenJDK 8 (revisit once JFR in Java 8 is available)
sourceSets {
  "main_java11" {
    java.srcDirs "${project.projectDir}/src/main/java11"
  }
}

tasks.named("compileMain_java11Java", JavaCompile) {
  configureCompiler(it, 11, JavaVersion.VERSION_1_8)
}

dependencies {
  main_java11CompileOnly project(':internal-api')
  main_java11CompileOnly sourceSets.main.output
}

tasks.named("jar", Jar) {
  from sourceSets.main_java11.output
}

tasks.named("forbiddenApisMain_java11", CheckForbiddenApis) {
  failOnMissingClasses = false
}

idea {
  module {
    jdkName = '11'
  }
}

jmh {
  jmhVersion = libs.versions.jmh
  duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Test).configureEach {
  if (javaLauncher.get().metadata.languageVersion.asInt() >= 16) {
    jvmArgs += ['--add-opens', 'java.base/java.net=ALL-UNNAMED'] // for HostNameResolverForkedTest
  }
}
