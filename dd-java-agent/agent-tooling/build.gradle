plugins {
  id 'me.champeau.jmh'
  id 'java-test-fixtures'
}
apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/tries.gradle"

minimumBranchCoverage = 0.6
excludedClassesCoverage += ['datadog.trace.agent.tooling.*']

sourceSets {
  register("test_java11") {
    java {
      srcDirs = [file('src/test/java11')]
    }
  }
  register("test_java21") {
    java {
      srcDirs = [file('src/test/java21')]
    }
  }
  named("test") {
    compileClasspath += sourceSets.test_java11.output
    runtimeClasspath += sourceSets.test_java11.output
    compileClasspath += sourceSets.test_java21.output
    runtimeClasspath += sourceSets.test_java21.output
  }
}

configurations {
  register("instrumentPluginClasspath") {
    canBeConsumed = true
    canBeResolved = false
    extendsFrom runtimeElements
  }

  named("test_java11Implementation") {
    extendsFrom testImplementation
  }
}

dependencies {
  api(project(':dd-java-agent:agent-bootstrap')) {
    exclude group: 'com.datadoghq', module: 'agent-logging'
  }
  compileOnly project(':dd-java-agent:agent-jmxfetch')
  compileOnly project(':dd-java-agent:agent-profiling')
  compileOnly project(':dd-java-agent:agent-profiling:profiling-controller')
  api group: 'com.blogspot.mydailyjava', name: 'weak-lock-free', version: '0.17'
  api libs.bytebuddy
  api libs.bytebuddyagent
  api libs.instrumentjava
  implementation group: 'net.java.dev.jna', name: 'jna', version: '5.8.0'
  implementation group: 'net.java.dev.jna', name: 'jna-platform', version: '5.8.0'

  api project(':dd-trace-core')

  implementation project(':dd-java-agent:agent-crashtracking')

  compileOnly group: 'com.github.jnr', name: 'jnr-posix', version: libs.versions.jnr.posix.get()

  testImplementation project(':dd-java-agent:testing')
  testImplementation libs.bytebuddy
  testImplementation group: 'com.google.guava', name: 'guava-testlib', version: '20.0'

  jmhImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.3.5.RELEASE'
}

jmh {
  jmhVersion = libs.versions.jmh.get()
  includeTests = true
}

tasks.named("compileJava") { dependsOn 'generateClassNameTries' }
tasks.named("sourcesJar") { dependsOn 'generateClassNameTries' }

tasks.named("compileJmhJava") { dependsOn tasks.named("compileTestJava") }

tasks.named("forbiddenApisJmh") {
  ignoreFailures = true
}

tasks.named("forbiddenApisTest_java11") {
  // it will fail due to missing JDK >= 9 classes
  // java.lang.ClassNotFoundException: java.lang.invoke.StringConcatFactory
  failOnMissingClasses = false
}

tasks.named("compileTestJava") {
  dependsOn('generateTestClassNameTries')
}
tasks.named("compileTestGroovy") {
  configureCompiler(it,
    8,
    JavaVersion.VERSION_1_8,
    "Groovy generates synthetic accessors methods from superclass, we don't want that for `URLClassLoader`," +
    " otherwise anonymous class has one `loadClass` accessor's signature has `java.lang.Module`"
    )
}
tasks.named("compileTest_java11Java") {
  configureCompiler(it, 11, JavaVersion.VERSION_11)
}
tasks.named("compileTest_java21Java") {
  configureCompiler(
    it,
    21,
    JavaVersion.VERSION_1_8,
    "This source set is specifically designed to make `javac` from a JDK post 18/19, generates " +
    "bytecode that emit `invokeinterface` for `java.lang.Object` methods on an interface type. " +
    "See https://bugs.openjdk.org/browse/JDK-8272715."
    )
}

tasks.named("jmh") {
  dependsOn(tasks.named("compileTestJava"))
  outputs.upToDateWhen { false }
}

tasks.withType(Test).configureEach {
  // same setting as AgentInstaller to avoid spurious agent-tooling test failures
  // caused by ConfigTransformSpockExtension installing byte-buddy during testing
  jvmArgs += ["-Dnet.bytebuddy.raw=true"]
}
