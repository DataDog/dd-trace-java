import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

muzzle {
  pass {
    group = "biz.paluch.redis"
    module = "lettuce"
    versions = "[4.0.Final,)"
    assertInverse = true
  }
}

apply from: "$rootDir/gradle/java.gradle"

addTestSuiteForDir('latestDepTest', 'test')

dependencies {
  compileOnly group: 'biz.paluch.redis', name: 'lettuce', version: '4.0.Final'

  testImplementation group: 'com.github.codemonstur', name: 'embedded-redis', version: '1.4.3'
  testImplementation group: 'biz.paluch.redis', name: 'lettuce', version: '4.0.Final'

  latestDepTestImplementation group: 'biz.paluch.redis', name: 'lettuce', version: '4.+'
}

tasks.withType(Test).configureEach {
  doFirst {
    String buildDir = layout.buildDirectory.asFile.get().absolutePath.replace("dd-trace-java/dd-java-agent",
      "dd-trace-java/workspace/dd-java-agent")

    def dupmsDir = new File(buildDir, "dumps")
    dupmsDir.mkdirs()

    // single-thread scheduler (daemon)
    def scheduler = Executors.newSingleThreadScheduledExecutor({ r ->
      Thread t = new Thread(r, "dump-scheduler")
      t.setDaemon(true)
      return t
    })

    // schedule the dump job 10s later
    def future = scheduler.schedule({
      try {
        def threadDumpFile = new File(dupmsDir, "${System.currentTimeMillis()}-thread-dump.log")

        new ProcessBuilder("jcmd", "0", "Thread.print", "-l")
          .redirectErrorStream(true)
          .redirectOutput(threadDumpFile)
          .start().waitFor()

        def listOutput = "jcmd -l".execute().text.readLines()
        listOutput.each { line ->
          println "DEBUG PID: ${line}"

          if (!line.contains("Gradle Test Executor")) {
            return
          }

          def pid = line.substring(0, line.indexOf(' '))
          def heapDumpFile = "${dupmsDir.absolutePath}/${System.currentTimeMillis()}-${pid}.hprof"
          def cmd = "jcmd ${pid} GC.heap_dump ${heapDumpFile}"
          cmd.execute().waitFor()
        }
      } catch (Throwable t) {
        logger.warn("Dumping failed: ${t.message}", t)
      } finally {
        scheduler.shutdown()
      }
    }, 60, TimeUnit.SECONDS)

    // store handles for cancellation in doLast
    ext.dumpFuture = future
    ext.dumpScheduler = scheduler
  }

  doLast {
    // cancel if task completed in <10s
    try {
      ext.dumpFuture?.cancel(false)
    } finally {
      ext.dumpScheduler?.shutdownNow()
    }
  }
}
