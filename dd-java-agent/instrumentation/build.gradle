// this project will run in isolation under the agent's classloader
buildscript {

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
  }
}
plugins {
  id "com.github.johnrengelman.shadow"
}
apply from: "$rootDir/gradle/java.gradle"

tasks.register("latestDepTest")

Project parent_project = project
subprojects { Project subProj ->
  apply plugin: 'instrument'
  apply plugin: 'muzzle'

  configurations {
    // classpath used by the instrumentation muzzle plugin
    instrumentationMuzzle {
      visible = false
      canBeConsumed = false
      canBeResolved = true
    }
  }

  instrument.plugins = [
    'datadog.trace.agent.tooling.muzzle.MuzzleGradlePlugin',
    'datadog.trace.agent.tooling.bytebuddy.NewTaskForGradlePlugin',
    'datadog.trace.agent.tooling.bytebuddy.reqctx.RewriteRequestContextAdvicePlugin',
  ]

  subProj.tasks.withType(Javadoc).configureEach { enabled = false }

  subProj.afterEvaluate {
    String jdkCompile = null
    if (project.hasProperty('minJavaVersionForTests') && project.getProperty('minJavaVersionForTests') != JavaVersion.VERSION_1_8) {
      def version = JavaVersion.toVersion(project.getProperty('minJavaVersionForTests'))
      def name = "java$version.majorVersion"
      jdkCompile = "main_${name}Implementation"
    }
    dependencies {
      // Apply common dependencies for instrumentation.
      implementation project(':dd-trace-api')
      implementation project(':dd-java-agent:agent-tooling')
      implementation deps.bytebuddy
      if (jdkCompile) {
        "$jdkCompile" project(':dd-trace-api')
        "$jdkCompile" project(':dd-java-agent:agent-tooling')
        "$jdkCompile" deps.bytebuddy
      }

      annotationProcessor deps.autoserviceProcessor
      compileOnly deps.autoserviceAnnotation

      // Include instrumentations instrumenting core JDK classes to ensure interoperability with other instrumentation
      testImplementation project(':dd-java-agent:instrumentation:java-concurrent')
      testImplementation project(':dd-java-agent:instrumentation:java-concurrent:java-completablefuture')
      // FIXME: we should enable this, but currently this fails tests for google http client
      //testImplementation project(':dd-java-agent:instrumentation:http-url-connection')
      testImplementation project(':dd-java-agent:instrumentation:classloading')

      testImplementation project(':dd-java-agent:testing')
      testAnnotationProcessor deps.autoserviceProcessor
      testCompileOnly deps.autoserviceAnnotation

      instrumentationMuzzle project(path: ':dd-java-agent:agent-tooling', configuration: 'instrumentationMuzzle')
    }

    subProj.tasks.withType(Test).configureEach { subTask ->
      onlyIf { !project.rootProject.hasProperty("skipInstTests") }

      // Make it so all instrumentation subproject tests can be run with a single command.
      if (parent_project.hasProperty(subTask.name)) {
        parent_project.tasks.named(subTask.name).configure {
          dependsOn(subTask)
        }
      }

      if (subTask.name == 'latestDepTest') {
        subTask.jvmArgs '-Dtest.dd.latestDepTest=true'
      }
    }
  }

  def path = subProj.getPath()
  // don't include the redis RequestImpl stub
  if (!path.equals(':dd-java-agent:instrumentation:vertx-redis-client-3.9:stubs')) {
    parent_project.dependencies {
      implementation project(path)
    }
  }
}

dependencies {
  implementation(project(':dd-java-agent:agent-tooling')) {
    exclude module: ':dd-java-agent:agent-bootstrap'
  }
  implementation project(':dd-java-agent:agent-builder')
}

tasks.named('shadowJar').configure {
  duplicatesStrategy = DuplicatesStrategy.FAIL
  dependencies deps.excludeShared
}

tasks.register('generateKnownTypesIndex', JavaExec) {
  // temporary config to add slf4j-simple so we get logging from instrumenters while indexing
  def slf4jSimple = project.configurations.create('slf4j-simple')
  project.dependencies.add('slf4j-simple', "org.slf4j:slf4j-simple:${versions.slf4j}")

  def resourcesDir = "${sourceSets.main.output.resourcesDir}"
  def indexFile = "${resourcesDir}/known-types.index"

  it.group = 'Build'
  it.description = "Generate known-types.index"
  it.mainClass = 'datadog.trace.agent.tooling.KnownTypesIndex$IndexGenerator'
  it.classpath = project.configurations.runtimeClasspath + slf4jSimple
  it.inputs.files(it.classpath)
  it.outputs.files(indexFile)
  it.args = [resourcesDir]

  dependsOn 'processResources'
}

shadowJar.dependsOn 'generateKnownTypesIndex'

