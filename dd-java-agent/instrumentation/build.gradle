import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

// this project will run in isolation under the agent's classloader
buildscript {

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: libs.versions.kotlin.get()
  }
}
plugins {
  id "com.github.johnrengelman.shadow"
}
apply from: "$rootDir/gradle/java.gradle"

tasks.register("latestDepTest")

Project parent_project = project
subprojects { Project subProj ->
  // don't include the redis RequestImpl stub
  if (!subProj.path.equals(':dd-java-agent:instrumentation:vertx-redis-client-3.9:stubs')) {
    parent_project.dependencies {
      implementation subProj
    }
  }
}

dependencies {
  implementation(project(':dd-java-agent:agent-tooling')) {
    exclude module: ':dd-java-agent:agent-bootstrap'
  }
  implementation project(':dd-java-agent:agent-builder')
}

if (project.gradle.startParameter.taskNames.any {it.endsWith("generateMuzzleReport")}) {
  apply plugin: 'muzzle'
  task("muzzleInstrumentationReport") {
    dependsOn(project.getAllTasks(true).values().flatten().findAll { it.name.endsWith("generateMuzzleReport") })
    finalizedBy(tasks.named('mergeMuzzleReports'))
  }
}


tasks.named('shadowJar', ShadowJar).configure {
  duplicatesStrategy = DuplicatesStrategy.FAIL
  dependencies {
    // the tracer is now in a separate shadow jar
    exclude(project(":dd-trace-core"))
    exclude(dependency('com.datadoghq:sketches-java'))
    exclude(dependency('com.google.re2j:re2j'))
  }
  dependencies deps.excludeShared
}

tasks.register('generateInstrumenterIndex', JavaExec) {
  // temporary config to add slf4j-simple so we get logging from instrumenters while indexing
  def slf4jSimple = project.configurations.maybeCreate('slf4j-simple')
  project.dependencies.add('slf4j-simple', "org.slf4j:slf4j-simple:${libs.versions.slf4j.get()}")

  def resourcesDir = "${sourceSets.main.output.resourcesDir}"
  def indexFile = "${resourcesDir}/instrumenter.index"

  it.group = 'Build'
  it.description = "Generate instrumenter.index"
  it.mainClass = 'datadog.trace.agent.tooling.InstrumenterIndex$IndexGenerator'
  it.classpath = project.configurations.runtimeClasspath + slf4jSimple
  it.inputs.files(it.classpath)
  it.outputs.files(indexFile)
  it.args = [resourcesDir]

  dependsOn 'processResources'
}

tasks.register('generateKnownTypesIndex', JavaExec) {
  // temporary config to add slf4j-simple so we get logging from instrumenters while indexing
  def slf4jSimple = project.configurations.maybeCreate('slf4j-simple')
  project.dependencies.add('slf4j-simple', "org.slf4j:slf4j-simple:${libs.versions.slf4j.get()}")

  def resourcesDir = "${sourceSets.main.output.resourcesDir}"
  def indexFile = "${resourcesDir}/known-types.index"

  it.group = 'Build'
  it.description = "Generate known-types.index"
  it.mainClass = 'datadog.trace.agent.tooling.KnownTypesIndex$IndexGenerator'
  it.classpath = project.configurations.runtimeClasspath + slf4jSimple
  it.inputs.files(it.classpath)
  it.outputs.files(indexFile)
  it.args = [resourcesDir]

  dependsOn 'processResources'
}

tasks.named("shadowJar").configure {
  dependsOn 'generateInstrumenterIndex', 'generateKnownTypesIndex'
}

