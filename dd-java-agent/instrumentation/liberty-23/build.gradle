import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'java-test-fixtures'
  id 'com.github.johnrengelman.shadow'
}
apply from: "$rootDir/gradle/java.gradle"

String relAppDir = 'openliberty-jars/wlp/usr/servers/defaultServer/dropins/war/testapp'
sourceSets {
  webapp {
    java {
      destinationDirectory.value project.layout.buildDirectory.dir("$relAppDir/WEB-INF/classes")
    }
    output.resourcesDir = project.layout.buildDirectory.dir("$relAppDir/")
  }
}

configurations {
  zipped
  testLogging
}

evaluationDependsOn ':dd-java-agent:instrumentation:servlet:request-5'

dependencies {
  zipped group: 'io.openliberty', name: 'openliberty-runtime', version: '22.0.0.1', ext: 'zip'
  testLogging libs.bundles.test.logging

  compileOnly group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '5.0.0'
  compileOnly files({
    tasks.named("installOpenLibertyDeps").map {
      it.extractedJars
    }
  })
  testImplementation files({
    tasks.named("installOpenLibertyDeps").map {
      it.extractedJars
    }
  })

  implementation project(':dd-java-agent:instrumentation:servlet:request-5')
  testImplementation files({
    tasks.named("installOpenLibertyDeps").map {
      it.wsServerJar
    }
  })
  testImplementation testFixtures(project(':dd-java-agent:appsec'))
  testRuntimeOnly project(':dd-java-agent:instrumentation:osgi-4.3')
  testRuntimeOnly files({
    tasks.named("filterLogbackClassic").map {
      it.filteredLogbackDir
    }
  })
  testRuntimeOnly project(':dd-java-agent:instrumentation:servlet:request-5')
  testRuntimeOnly files({
    tasks.named("shadowJar").map {
      it.archiveFile
    }
  })

  webappCompileOnly group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '5.0.0'
  // compileOnly to avoid bringing all the test dependencies to the test app
  // these are to be provided by the system classloader on test time
  webappCompileOnly project(':dd-java-agent:instrumentation:servlet:request-5').tasks.named("compileTestFixturesJava", JavaCompile).map { it.classpath }
  // only the testFixtures jar (not its dependencies) and groovy should be included in the webapp
  webappImplementation files(
    project(':dd-java-agent:instrumentation:servlet:request-5').tasks.named("testFixturesJar", Jar).map {
      it.archiveFile
    }
    )
  // use the above instead of:
  //  webappImplementation testFixtures(project(':dd-java-agent:instrumentation:servlet:request-5'))
  // because using testFixtures() causes some early evaluation of dependencies
  webappRuntimeOnly libs.groovy
}

tasks.named('compileWebappJava').configure {
  dependsOn ':dd-java-agent:instrumentation:servlet:request-5:testFixturesJar'
}

configurations.testRuntimeOnly {
  exclude group: 'ch.qos.logback', module: 'logback-classic'
  exclude group: 'org.codehaus.groovy', module: 'groovy-servlet'
}
configurations.webappRuntimeClasspath {
  exclude group: 'ch.qos.logback', module: 'logback-classic'
}

//unzips the dependencies from the 'zipped' configuration so 'compileOnly' can reference it
tasks.register('installOpenLibertyDeps', Copy) {
  def extractDir = "${buildDir}/openliberty-jars"
  ext.extractedJars = fileTree(extractDir) {
    include "wlp/lib/com.ibm.ws.webcontainer.jakarta*.jar"
    include "wlp/lib/com.ibm.ws.transport.http*.jar"
    include "wlp/lib/com.ibm.ws.channelfw*.jar"
    include "wlp/lib/com.ibm.ws.wsbytebuffer*.jar"
    include "wlp/lib/com.ibm.ws.logging*.jar"
    //include "wlp/lib/*.jar"
    builtBy "installOpenLibertyDeps"
  }
  ext.wsServerJar = fileTree("$extractDir") {
    include "wlp/lib/com.ibm.ws.kernel.boot*.jar"
    include "wlp/bin/tools/ws-server.jar"
    builtBy "installOpenLibertyDeps"
  }
  dependsOn configurations.zipped
  // I didn't manage to get this to work correctly using a Sync task or Sync + outputs.upToDateWhen
  // (files are updated when not needed, causing intellij to reindex or they are deemed up to date
  // when the extraction was not done at all).
  ext.serverXmlFile = file("$extractDir/wlp/usr/servers/defaultServer/server.xml")
  onlyIf {
    !ext.serverXmlFile.exists()
  }
  from {
    configurations.zipped.collect { zipTree(it) }
  }
  eachFile { fcd ->
    fcd.path = fcd.path.replaceAll(/\/templates\/(servers\/defaultServer\/.+)/, '/usr/$1')
  }
  into extractDir
  outputs.file ext.serverXmlFile
}
for (final taskName in ["test", "forkedTest"]) {
  tasks.named(taskName).configure {
    dependsOn webappClasses, installOpenLibertyDeps
    jvmArgs += ["-Dserver.xml=${installOpenLibertyDeps.serverXmlFile.absoluteFile}"]
  }
}

tasks.register('webappCopyJars', Sync) {
  from configurations.webappRuntimeClasspath.findAll { it.name.endsWith('.jar') }
  into project.layout.buildDirectory.dir("$relAppDir/WEB-INF/lib")
  dependsOn ':dd-java-agent:instrumentation:servlet:request-5:testFixturesJar'
}
for (final taskName in ["test", "forkedTest"]) {
  tasks.named(taskName).configure {
    dependsOn webappCopyJars
  }
}

tasks.register('filterLogbackClassic', Sync) {
  ext.filteredLogbackDir = project.layout.buildDirectory.dir('filteredLogback')
  from configurations.testLogging
    .findAll { it.name.contains('logback-') }
    .collect { zipTree(it) }
  exclude 'META-INF/**'
  into ext.filteredLogbackDir
}
for (final taskName in ["test", "forkedTest"]) {
  tasks.named(taskName).configure {
    dependsOn filterLogbackClassic
  }
}

tasks.named("shadowJar", ShadowJar).configure {
  configurations = [project.configurations.shadow]
  zip64 true

  archiveFileName = 'openliberty-shadow.jar'

  // Exclude DataDog and other associated packages
  exclude 'jnr/**'
  exclude 'datadog/**'
  exclude 'com/datadoghq/sketch/**'
  exclude 'com/squareup/moshi/**'
  exclude 'com/datadog/**'
  exclude 'net/bytebuddy/**'
  exclude 'okhttp3/**'
  exclude 'org/slf4j/impl/**'
  exclude 'io/micrometer/core/**'
  // Exclude META-INF and WEB-INF directories
  exclude 'META-INF/**'
  exclude 'WEB-INF/**'

  // Include JAR files from the 'wlp/lib' directory
  from("${buildDir}/openliberty-jars") {
    include "wlp/lib/*.jar"
    include "wlp/dev/*.jar"
  }
}
for (final taskName in ["test", "forkedTest"]) {
  tasks.named(taskName).configure {
    dependsOn shadowJar
  }
}
