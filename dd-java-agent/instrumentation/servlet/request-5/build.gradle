import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'java-test-fixtures'
}

apply from: "$rootDir/gradle/java.gradle"
apply plugin: 'call-site-instrumentation'


muzzle {
  pass {
    group = "jakarta.servlet"
    module = 'jakarta.servlet-api'
    versions = "[5.0.0,)"
  }
}

// jakarta.servlet-api dependencies are compiled with Java 11 and
// the gradle muzzle tasks uses the JVM gradle is running with
if (!JavaVersion.current().java11Compatible) {
  project.afterEvaluate {
    tasks.withType(MuzzleTask).configureEach {
      logger.info("Disabling task $it.path (requires Java 11)")
      it.enabled = false
    }
  }
}

configurations {
  javaxClassesToRelocate
}

tasks.register("relocatedJavaxJar", ShadowJar) {
  relocate 'javax.servlet', 'jakarta.servlet'
  relocate 'datadog.trace.instrumentation.servlet3', 'datadog.trace.instrumentation.servlet5'
  relocate 'datadog.trace.instrumentation.servlet', 'datadog.trace.instrumentation.servlet5'

  archiveClassifier.set('relocated-javax')

  configurations = [project.configurations.javaxClassesToRelocate]

  include '**/*.jar'
  include '**/Servlet31InputStreamWrapper.class'
  include '**/HttpServletGetInputStreamAdvice.class'
  include '**/HttpServletGetReaderAdvice.class'
  include '**/BufferedReaderWrapper.class'
  include '**/ServletBlockingHelper.class'
  include '**/AbstractServletInputStreamWrapper.class'

  includeEmptyDirs = false
}

dependencies {
  implementation files(tasks.named("relocatedJavaxJar", ShadowJar).map { it.outputs.files })
  compileOnly group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '5.0.0'
  testImplementation group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '5.0.0'
  testImplementation group: 'jakarta.servlet.jsp', name: 'jakarta.servlet.jsp-api', version: '3.0.0'
  testRuntimeOnly project(':dd-java-agent:instrumentation:iast-instrumenter')

  javaxClassesToRelocate project(':dd-java-agent:instrumentation:servlet-common'), {
    transitive = false
  }
  javaxClassesToRelocate project(':dd-java-agent:instrumentation:servlet:request-3'), {
    transitive = false
  }

  testFixturesImplementation(project(':dd-java-agent:testing')) {
    exclude group: 'org.eclipse.jetty', module: 'jetty-server'
  }
  testFixturesCompileOnly group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '5.0.0'

  // tested on tomcat-5.5:latestDepTest
}

tasks.named("jar", Jar).configure {
  from zipTree(relocatedJavaxJar.outputs.files.asPath)
}
