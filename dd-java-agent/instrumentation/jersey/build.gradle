if (project.hasProperty('testJvm')) {
  ext {
    minJavaVersionForTests = JavaVersion.VERSION_11
  }
}

muzzle {
  pass {
    group = 'org.glassfish.jersey.core'
    module = 'jersey-common'
    versions = '[2,4)'
    assertInverse = true
  }
}

apply from: "$rootDir/gradle/java.gradle"

// there are tests with jersey2 and grizzly on the grizzly-http-2.3.20 module
addTestSuiteForDir('jersey2JettyTest', 'jersey2JettyTest')
addTestSuiteForDir('jersey3JettyTest', 'jersey3JettyTest')

compileJersey3JettyTestGroovy {
  javaLauncher = getJavaLauncherFor(11)
}
compileTestJava.configure {
  setJavaVersion(it, 11)
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

jersey3JettyTest {
  javaLauncher = getJavaLauncherFor(11)
}
test {
  javaLauncher = getJavaLauncherFor(11)
}

def jersey2Version = '2.18'
def jersey3Version = '3.1.2'
dependencies {
  compileOnly group: 'org.glassfish.jersey.core', name: 'jersey-common', version: '2.0'

  testImplementation group: 'jakarta.ws.rs', name: 'jakarta.ws.rs-api', version: '3.0.0'
  testImplementation group: 'org.glassfish.jersey.core', name: 'jersey-common', version: jersey3Version

  jersey2JettyTestImplementation project(':dd-java-agent:testing'), {
    exclude group: 'org.eclipse.jetty', module: 'jetty-server'
  }
  jersey2JettyTestImplementation testFixtures(project(':dd-java-agent:appsec'))
  jersey2JettyTestImplementation group: 'org.glassfish.jersey.containers', name: 'jersey-container-jetty-http', version : jersey2Version
  jersey2JettyTestImplementation group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: jersey2Version
  jersey2JettyTestImplementation group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jersey2Version
  jersey2JettyTestRuntimeOnly group: 'javax.activation', name: 'javax.activation-api', version: '1.2.0'
  jersey2JettyTestRuntimeOnly group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.3'
  jersey2JettyTestRuntimeOnly project(':dd-java-agent:instrumentation:jetty-9')
  jersey2JettyTestRuntimeOnly project(':dd-java-agent:instrumentation:jersey-2-appsec')

  jersey3JettyTestImplementation project(':dd-java-agent:testing'), {
    exclude group: 'org.eclipse.jetty', module: 'jetty-server'
  }
  jersey3JettyTestImplementation testFixtures(project(':dd-java-agent:appsec'))
  jersey3JettyTestImplementation group: 'org.glassfish.jersey.containers', name: 'jersey-container-jetty-http', version : jersey3Version
  jersey3JettyTestImplementation group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: jersey3Version
  jersey3JettyTestImplementation group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jersey3Version
  jersey3JettyTestRuntimeOnly group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: jersey3Version
  jersey3JettyTestRuntimeOnly group: 'javax.activation', name: 'javax.activation-api', version: '1.2.0'
  jersey3JettyTestRuntimeOnly group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.3'
  jersey3JettyTestRuntimeOnly project(':dd-java-agent:instrumentation:jetty-9')
  jersey3JettyTestRuntimeOnly project(':dd-java-agent:instrumentation:jetty-11')
  jersey3JettyTestRuntimeOnly project(':dd-java-agent:instrumentation:jersey-2-appsec')
  jersey3JettyTestRuntimeOnly project(':dd-java-agent:instrumentation:jersey-3-appsec')
}

configurations.getByName('jersey3JettyTestRuntimeClasspath').resolutionStrategy {
  force "org.slf4j:slf4j-api:${versions.slf4j}"
}
configurations.getByName('jersey2JettyTestRuntimeClasspath').resolutionStrategy {
  // override version in testImplementation
  force "org.glassfish.jersey.core:jersey-common:${jersey2Version}"
}
