ext {
  minJavaVersionForTests = JavaVersion.VERSION_11
  latestDepTestMinJavaVersionForTests = JavaVersion.VERSION_17
  latestDepForkedTestMinJavaVersionForTests = JavaVersion.VERSION_17
}

repositories {
  maven {
    url 'https://maven.repository.redhat.com/ga/'
  }
  ivy {
    url 'https://download.jboss.org/'
    patternLayout {
      artifact '/[organisation]/[revision]/[module]/[organisation]-[module]-[revision].[ext]'
      metadataSources {
        artifact()
      }
    }
  }
  ivy {
    url 'https://github.com/wildfly'
    patternLayout {
      artifact '/[organisation]/releases/download/[revision]/[organisation]-[revision].[ext]'
      metadataSources {
        artifact()
      }
    }
  }
}

muzzle {
  extraRepository('redhat-ga', 'https://maven.repository.redhat.com/ga/')
  pass {
    group = 'org.wildfly'
    module = 'wildfly-ee'
    versions = '[9.0.0.Final,)'
    excludeDependency 'org.jboss.xnio:*' // not related and causes issues with missing jar in maven repo
  }
}

apply from: "$rootDir/gradle/java.gradle"

addTestSuiteForDir("latestDepTest", "test")
addTestSuiteExtendingForDir("latestDepForkedTest", "latestDepTest", "test")

configurations {
  wildflyTest
  wildflyLatestDepTest
  wildflyLatestPoll {
    canBeResolved = true
  }
}

dependencies {
  compileOnly group: 'org.wildfly', name: 'wildfly-ee', version: '9.0.0.Final'

  testImplementation group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
  testImplementation group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '6.0.0'

  testImplementation group: 'org.wildfly.core', name: 'wildfly-embedded', version: '21.1.0.Final'
  testImplementation group: 'org.wildfly.core', name: 'wildfly-server', version: '21.1.0.Final'
  testImplementation group: 'org.jboss.shrinkwrap', name: 'shrinkwrap-api', version: '1.2.6'

  testRuntimeOnly project(':dd-java-agent:instrumentation:servlet:request-3')
  testRuntimeOnly project(':dd-java-agent:instrumentation:jboss-modules')
  testRuntimeOnly project(':dd-java-agent:instrumentation:undertow:undertow-2.0')
  testRuntimeOnly project(':dd-java-agent:instrumentation:undertow:undertow-2.2')
  testRuntimeOnly group: 'org.jboss.shrinkwrap', name: 'shrinkwrap-spi', version: '1.2.6'
  testRuntimeOnly group: 'org.jboss.shrinkwrap', name: 'shrinkwrap-impl-base', version: '1.2.6'

  wildflyTest "wildfly:servlet:21.0.0.Final@zip"

  latestDepTestImplementation group: 'org.wildfly.core', name: 'wildfly-embedded', version: '+'
  latestDepTestImplementation group: 'org.wildfly.core', name: 'wildfly-server', version: '+'
  wildflyLatestPoll group: 'org.wildfly', name: 'wildfly-dist', version: '+'

  configurations.wildflyLatestPoll.resolve()
  def latestWildflyVersion = configurations.wildflyLatestPoll.resolvedConfiguration.getResolvedArtifacts().find {
    it.name == "wildfly-dist"
  }.moduleVersion.id.version
  wildflyLatestDepTest "wildfly:wildfly:$latestWildflyVersion@zip"
  latestDepForkedTest {
    configure {
      jvmArgs += ["-Dtest.jboss.home=$buildDir/wildfly-${latestWildflyVersion}"]
    }
  }

  latestDepTestRuntimeOnly project(':dd-java-agent:instrumentation:servlet:request-5')
}


def extractWildfly(config, zipFileNamePrefix, sync) {
  delete(fileTree(buildDir).include("wildfly-*/standalone/deployments/**"))

  def zipPath = config.find {
    it.name.startsWith(zipFileNamePrefix)
  }
  if (zipPath != null) {
    def zipFile = file(zipPath)
    def outputDir = file("${buildDir}")

    sync.from zipTree(zipFile)
    sync.into outputDir
  } else {
    throw new GradleException("Can't find server zip file that starts with: " + zipFileNamePrefix)
  }
}


tasks.register("extractWildfly", Copy) {
  dependsOn configurations.wildflyTest
  mustRunAfter tasks.compileTestGroovy
  extractWildfly(configurations.wildflyTest, "servlet", it)

  // When tests are disabled this would still be run, so disable this manually
  onlyIf { !project.rootProject.hasProperty("skipTests") }
}

tasks.register("extractLatestWildfly", Copy) {
  dependsOn configurations.wildflyLatestDepTest
  mustRunAfter tasks.compileLatestDepTestGroovy
  mustRunAfter tasks.compileLatestDepForkedTestGroovy
  mustRunAfter tasks.compileLatestDepTestJava
  mustRunAfter tasks.compileLatestDepForkedTestJava
  mustRunAfter tasks.compileJava
  extractWildfly(configurations.wildflyLatestDepTest, "wildfly", it)

  // When tests are disabled this would still be run, so disable this manually
  onlyIf { !project.rootProject.hasProperty("skipTests") }
}


tasks.named("test").configure {
  dependsOn 'extractWildfly'
}

tasks.named("forkedTest").configure {
  dependsOn 'extractWildfly'
}
tasks.named("latestDepForkedTest").configure {
  dependsOn 'extractLatestWildfly'
}

tasks.named("latestDepTest").configure {
  dependsOn 'extractLatestWildfly'
}
compileTestGroovy.configure {
  javaLauncher = getJavaLauncherFor(11)
}

[compileLatestDepTestGroovy, compileLatestDepForkedTestGroovy].each {
  it.configure {
    javaLauncher = getJavaLauncherFor(17)
  }
}
compileTestJava.configure {
  it.configure {
    setJavaVersion(it, 11)
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }
}

[compileLatestDepTestJava, compileLatestDepForkedTestJava].each {
  it.configure {
    setJavaVersion(it, 17)
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }
}

processTestResources {
  filesMatching('**/WEB-INF/web.xml') {
    expand(
      'servletClass': 'test.TestServlet',
      )
  }
}
[processLatestDepTestResources, processLatestDepForkedTestResources].each {
  it.filesMatching('**/WEB-INF/web.xml') {
    expand(
      'servletClass': 'test.JakartaTestServlet',
      )
  }
}

forkedTest {
  configure {
    jvmArgs += ["-Dtest.jboss.home=$buildDir/wildfly-servlet-21.0.0.Final"]
  }
}


