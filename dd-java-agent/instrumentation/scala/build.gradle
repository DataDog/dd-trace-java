muzzle {
  pass {
    group = 'org.scala-lang'
    module = 'scala-library'
    versions = '[2.3,4.0)'
    assertInverse = true
  }
}

apply from: "$rootDir/gradle/java.gradle"
apply plugin: 'scala'
apply plugin: 'call-site-instrumentation'

dependencies {
  // First 2.10 version that accepts target 1.8
  compileOnly group: 'org.scala-lang', name: 'scala-library', version: '2.10.7'
  testImplementation group: 'org.scala-lang', name: 'scala-library', version: '2.10.7'
  testImplementation project(':dd-java-agent:agent-iast:iast-test-fixtures')
  testRuntimeOnly project(':dd-java-agent:instrumentation:iast-instrumenter')
}

final scalaVersions = [libs.scala211, libs.scala212, libs.scala213, libs.scala33]

final testTasks = scalaVersions.collect { scalaLibrary ->

  final version = scalaLibrary.get().version.replaceAll('\\.', '_')
  def (major, minor) = version.split('_').collect(Integer.&valueOf)
  final javaConcatenation = major > 2 || minor > 11 // after 2.11 scala uses java.lang.StringBuilder to perform concatenation

  final customSourceSet = sourceSets.create("${version}") {
    scala {
      srcDirs = ['src/test/scala']
    }
  }

  final implementationConfiguration = configurations.named(customSourceSet.implementationConfigurationName) {
    canBeConsumed = false
    canBeResolved = false
    canBeDeclared = true
  }

  final classPathConfiguration = configurations.named(customSourceSet.compileClasspathConfigurationName) {
    canBeConsumed = false
    canBeResolved = true
    canBeDeclared = false
    extendsFrom(implementationConfiguration.get())
    customSourceSet.compileClasspath += it
  }

  tasks.named(customSourceSet.getCompileTaskName("scala"), ScalaCompile) {
    // Despite the compatibility matrix, scala compiler doesn't properly
    // get the right compiler flags with JDK11 toolchain. Using 8 works.
    // * https://docs.scala-lang.org/overviews/jdk-compatibility/overview.html
    // * https://github.com/gradle/gradle/issues/19456
    configureCompiler(it, 8)
  }

  dependencies { handler ->
    handler.add(implementationConfiguration.name, scalaLibrary)
    handler.add(implementationConfiguration.name, libs.slf4j)
    if (javaConcatenation) {
      handler.add(implementationConfiguration.name, project(':dd-java-agent:instrumentation:java:java-lang:java-lang-1.8'))
    }
  }

  return tasks.register("test$version", Test) {
    classpath = classpath
      .filter { !it.toString().contains('scala-library') }   // exclude default scala-library
      .minus(files(sourceSets.test.scala.classesDirectory))  // exclude default /build/classes/scala/test folder
      .plus(customSourceSet.output.classesDirs)              // add /build/classes/scala/${version} folder
      .plus(classPathConfiguration.get())                    // add new scala-library configuration
    systemProperty('uses.java.concat', javaConcatenation)
    dependsOn(tasks.named("compile${version.capitalize()}Scala"))
    group = 'verification'
  }
}

tasks.named('test', Test) {
  systemProperty('uses.java.concat', false) // version 2.10.7 does not use java concatenation
  finalizedBy(testTasks)
}

