package test

import java.sql.Connection
import java.sql.ResultSet
import java.sql.SQLException
import java.sql.SQLWarning
import java.sql.Statement

class WrappedStatement implements Statement {

  private final Statement delegate
  private final WrappedConnection connection

  WrappedStatement(Statement delegate, WrappedConnection connection) {
    this.delegate = delegate
    this.connection = connection
  }

  @Override
  ResultSet executeQuery(String sql) throws SQLException {
    return delegate.executeQuery(sql)
  }

  @Override
  int executeUpdate(String sql) throws SQLException {
    return delegate.executeUpdate(sql)
  }

  @Override
  void close() throws SQLException {
    delegate.close()
  }

  @Override
  int getMaxFieldSize() throws SQLException {
    return delegate.getMaxFieldSize()
  }

  @Override
  void setMaxFieldSize(int max) throws SQLException {
    delegate.setMaxFieldSize(max)
  }

  @Override
  int getMaxRows() throws SQLException {
    return delegate.getMaxRows()
  }

  @Override
  void setMaxRows(int max) throws SQLException {
    delegate.setMaxRows(max)
  }

  @Override
  void setEscapeProcessing(boolean enable) throws SQLException {
    delegate.setEscapeProcessing(enable)
  }

  @Override
  int getQueryTimeout() throws SQLException {
    return delegate.getQueryTimeout()
  }

  @Override
  void setQueryTimeout(int seconds) throws SQLException {
    delegate.setQueryTimeout(seconds)
  }

  @Override
  void cancel() throws SQLException {
    delegate.cancel()
  }

  @Override
  SQLWarning getWarnings() throws SQLException {
    return delegate.getWarnings()
  }

  @Override
  void clearWarnings() throws SQLException {
    delegate.clearWarnings()
  }

  @Override
  void setCursorName(String name) throws SQLException {
    delegate.setCursorName(name)
  }

  @Override
  boolean execute(String sql) throws SQLException {
    return delegate.execute(sql)
  }

  @Override
  ResultSet getResultSet() throws SQLException {
    return delegate.getResultSet()
  }

  @Override
  int getUpdateCount() throws SQLException {
    return delegate.getUpdateCount()
  }

  @Override
  boolean getMoreResults() throws SQLException {
    return delegate.getMoreResults()
  }

  @Override
  void setFetchDirection(int direction) throws SQLException {
    delegate.setFetchDirection(direction)
  }

  @Override
  int getFetchDirection() throws SQLException {
    return delegate.getFetchDirection()
  }

  @Override
  void setFetchSize(int rows) throws SQLException {
    delegate.setFetchSize(rows)
  }

  @Override
  int getFetchSize() throws SQLException {
    return delegate.getFetchSize()
  }

  @Override
  int getResultSetConcurrency() throws SQLException {
    return delegate.getResultSetConcurrency()
  }

  @Override
  int getResultSetType() throws SQLException {
    return delegate.getResultSetType()
  }

  @Override
  void addBatch(String sql) throws SQLException {
    delegate.addBatch(sql)
  }

  @Override
  void clearBatch() throws SQLException {
    delegate.clearBatch()
  }

  @Override
  int[] executeBatch() throws SQLException {
    return delegate.executeBatch()
  }

  @Override
  Connection getConnection() throws SQLException {
    return connection
  }

  @Override
  boolean getMoreResults(int current) throws SQLException {
    return delegate.getMoreResults(current)
  }

  @Override
  ResultSet getGeneratedKeys() throws SQLException {
    return delegate.getGeneratedKeys()
  }

  @Override
  int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    return delegate.executeUpdate(sql, autoGeneratedKeys)
  }

  @Override
  int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    return delegate.executeUpdate(sql, columnIndexes)
  }

  @Override
  int executeUpdate(String sql, String[] columnNames) throws SQLException {
    return delegate.executeUpdate(sql, columnNames)
  }

  @Override
  boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    return delegate.execute(sql, autoGeneratedKeys)
  }

  @Override
  boolean execute(String sql, int[] columnIndexes) throws SQLException {
    return delegate.execute(sql, columnIndexes)
  }

  @Override
  boolean execute(String sql, String[] columnNames) throws SQLException {
    return delegate.execute(sql, columnNames)
  }

  @Override
  int getResultSetHoldability() throws SQLException {
    return delegate.getResultSetHoldability()
  }

  @Override
  boolean isClosed() throws SQLException {
    return delegate.isClosed()
  }

  @Override
  void setPoolable(boolean poolable) throws SQLException {
    delegate.setPoolable(poolable)
  }

  @Override
  boolean isPoolable() throws SQLException {
    return delegate.isPoolable()
  }

  @Override
  void closeOnCompletion() throws SQLException {
    delegate.closeOnCompletion()
  }

  @Override
  boolean isCloseOnCompletion() throws SQLException {
    return delegate.isCloseOnCompletion()
  }

  @Override
  def <T> T unwrap(Class<T> iface) throws SQLException {
    if (iface == Statement) {
      return (T) delegate
    }
    throw new SQLException("Not a wrapper for " + iface)
  }

  @Override
  boolean isWrapperFor(Class<?> iface) throws SQLException {
    return iface == Statement
  }
}
