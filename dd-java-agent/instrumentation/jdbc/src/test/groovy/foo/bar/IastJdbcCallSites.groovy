package foo.bar

import groovy.transform.CompileStatic

import java.sql.CallableStatement
import java.sql.Connection
import java.sql.PreparedStatement
import java.sql.ResultSet
import java.sql.Statement

@CompileStatic
class IastJdbcCallSites {
  static PreparedStatement prepareStatement(Connection conn, String sql) {
    conn.prepareStatement(sql)
  }

  static PreparedStatement prepareStatement(Connection conn, String sql, int autoGeneratedKeys) {
    conn.prepareStatement(sql, autoGeneratedKeys)
  }

  static PreparedStatement prepareStatement(Connection conn, String sql, int resultSetType, int resultSetConcurrency) {
    conn.prepareStatement(sql, resultSetType, resultSetConcurrency)
  }

  static PreparedStatement prepareStatement(Connection conn, String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
    conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability)
  }

  static PreparedStatement prepareStatement(Connection conn, String sql, int[] columnIndexes) {
    conn.prepareStatement(sql, columnIndexes)
  }

  static PreparedStatement prepareStatement(Connection conn, String sql, String[] columnNames) {
    conn.prepareStatement(sql, columnNames)
  }

  static CallableStatement prepareCall(Connection conn, String sql) {
    conn.prepareCall(sql)
  }

  static CallableStatement prepareCall(Connection conn, String sql, int resultSetType, int resultSetConcurrency) {
    conn.prepareCall(sql, resultSetType, resultSetConcurrency)
  }

  static CallableStatement prepareCall(Connection conn, String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
    conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability)
  }

  static ResultSet executeQuery(Statement stmt, String sql) {
    stmt.executeQuery(sql)
  }

  static int executeUpdate(Statement stmt, String sql) {
    stmt.executeUpdate(sql)
  }

  static int executeUpdate(Statement stmt, String sql, int autoGeneratedKeys) {
    stmt.executeUpdate(sql, autoGeneratedKeys)
  }

  static int executeUpdate(Statement stmt, String sql, int[] columnIndexes) {
    stmt.executeUpdate(sql, columnIndexes)
  }

  static int executeUpdate(Statement stmt, String sql, String[] columnNames) {
    stmt.executeUpdate(sql, columnNames)
  }

  static boolean execute(Statement stmt, String sql) {
    stmt.execute(sql)
  }

  static boolean execute(Statement stmt, String sql, int autoGeneratedKeys) {
    stmt.execute(sql, autoGeneratedKeys)
  }

  static boolean execute(Statement stmt, String sql, int[] columnIndexes) {
    stmt.execute(sql, columnIndexes)
  }

  static boolean execute(Statement stmt, String sql, String[] columnNames) {
    stmt.execute(sql, columnNames)
  }

  static long executeLargeUpdate(Statement stmt, String sql) {
    stmt.executeLargeUpdate(sql)
  }

  static long executeLargeUpdate(Statement stmt, String sql, int autoGeneratedKeys) {
    stmt.executeLargeUpdate(sql, autoGeneratedKeys)
  }

  static long executeLargeUpdate(Statement stmt, String sql, int[] columnIndexes) {
    stmt.executeLargeUpdate(sql, columnIndexes)
  }

  static long executeLargeUpdate(Statement stmt, String sql, String[] columnNames) {
    stmt.executeLargeUpdate(sql, columnNames)
  }
}
