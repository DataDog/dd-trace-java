// this project will run in isolation under the agent's classloader
buildscript {

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "net.bytebuddy:byte-buddy-gradle-plugin:${versions.bytebuddy}"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
  }
}
plugins {
  id "com.github.johnrengelman.shadow"
}
apply from: "$rootDir/gradle/java.gradle"

Project instr_project = project
subprojects { Project subProj ->
  apply plugin: "net.bytebuddy.byte-buddy"
  apply plugin: 'muzzle'

  subProj.byteBuddy {
    transformation {
      // Applying NoOp optimizes build by applying bytebuddy plugin to only compileJava task
      tasks = ['compileJava', 'compileScala', 'compileKotlin']
      plugin = 'datadog.trace.agent.tooling.muzzle.MuzzleGradlePlugin$NoOp'
    }
  }

  subProj.afterEvaluate {
    subProj.byteBuddy {
      transformation {
        tasks = ['compileJava', 'compileScala', 'compileKotlin']
        plugin = 'datadog.trace.agent.tooling.muzzle.MuzzleGradlePlugin'
        classPath = project(':dd-java-agent:agent-tooling').configurations.instrumentationMuzzle + subProj.configurations.compile + subProj.sourceSets.main.output
      }
    }

    String jdkCompile = null
    if (project.hasProperty('minJavaVersionForTests') && project.getProperty('minJavaVersionForTests') != JavaVersion.VERSION_1_7) {
      def version = JavaVersion.toVersion(project.getProperty('minJavaVersionForTests'))
      def name = "java$version.majorVersion"
      jdkCompile = "main_${name}Compile"
    }
    dependencies {
      // Apply common dependencies for instrumentation.
      compile project(':dd-trace-api')
      compile project(':dd-java-agent:agent-tooling')
      compile deps.bytebuddy
      if (jdkCompile) {
        "$jdkCompile" project(':dd-trace-api')
        "$jdkCompile" project(':dd-java-agent:agent-tooling')
        "$jdkCompile" deps.bytebuddy
      }

      annotationProcessor deps.autoserviceProcessor
      compileOnly deps.autoserviceAnnotation

      // Include instrumentations instrumenting core JDK classes to ensure interoperability with other instrumentation
      testCompile project(':dd-java-agent:instrumentation:java-concurrent')
      testCompile project(':dd-java-agent:instrumentation:java-concurrent:java-completablefuture')
      // FIXME: we should enable this, but currently this fails tests for google http client
      //testCompile project(':dd-java-agent:instrumentation:http-url-connection')
      testCompile project(':dd-java-agent:instrumentation:classloading')

      testCompile project(':dd-java-agent:testing')
      testAnnotationProcessor deps.autoserviceProcessor
      testCompileOnly deps.autoserviceAnnotation
    }

    // Make it so all instrumentation subproject tests can be run with a single command.
    instr_project.tasks.test.dependsOn(subProj.tasks.test)
  }

  instr_project.dependencies {
    compile(project(subProj.getPath()))
  }
}

dependencies {
  compile(project(':dd-java-agent:agent-tooling')) {
    exclude module: ':dd-java-agent:agent-bootstrap'
  }
}

shadowJar {
  duplicatesStrategy = DuplicatesStrategy.FAIL
  dependencies deps.sharedInverse
  dependencies {
    exclude(project(':dd-java-agent:agent-bootstrap'))
    exclude(project(':dd-java-agent:agent-logging'))
    exclude(project(':dd-trace-api'))
    exclude(project(':internal-api'))
    exclude(dependency('org.slf4j::'))
  }
}

