plugins {
  id "com.github.johnrengelman.shadow"
}
apply from: "$rootDir/gradle/java.gradle"

dependencies {
  api('com.datadoghq:jmxfetch:0.45.3') {
    exclude group: 'org.slf4j', module: 'slf4j-api'
    exclude group: 'org.slf4j', module: 'slf4j-jdk14'
  }
  api deps.slf4j
  api project(':internal-api')
}

shadowJar {
  dependencies deps.excludeShared
}

tasks.register("submodulesUpdate", Exec) {
  group 'Build Setup'
  description 'Initializes and updates integrations-core git submodule'
  commandLine 'git', 'submodule', 'update', '--init', 'integrations-core'
  def submoduleHead = file("${project.rootDir}/.git/modules/dd-java-agent/agent-jmxfetch/integrations-core/HEAD")
  if (submoduleHead.exists()) {
    inputs.file "${project.rootDir}/.git/modules/dd-java-agent/agent-jmxfetch/integrations-core/HEAD"
  }
  def integrationsCore = file("$projectDir/integrations-core")
  outputs.dir integrationsCore
  if (integrationsCore.list().length == 0) {
    outputs.upToDateWhen { false }
  }
}

tasks.register("copyMetricConfigs", Exec) {
  group 'Build Setup'
  description 'Copy metrics.yaml files from integrations-core into resources'
  def outDir = file("$buildDir/integrations-core-resources")
  commandLine './copy-metric-configs.sh', 'integrations-core', outDir
  inputs.dir file("$projectDir/integrations-core")
  outputs.dir outDir
  doFirst {
    // Ensure the resources directory is available.
    outDir.mkdirs()
  }
  dependsOn "submodulesUpdate"
}

processResources {
  dependsOn 'copyMetricConfigs'
  from("$buildDir/integrations-core-resources")
}
