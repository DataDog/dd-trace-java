plugins {
  id "com.github.johnrengelman.shadow"
}

def openTelemetryApiVersion = '1.39.0'
def openTelemetryInstrumentationApiVersion = '2.4.0'
def openTelemetryInstrumentationVersion = '2.4.0-alpha'

apply from: "$rootDir/gradle/java.gradle"
apply plugin: 'instrument'

configurations {
  embeddedClasspath {
    visible = false
    canBeConsumed = false
    canBeResolved = true
  }
  compileClasspath.extendsFrom(embeddedClasspath)
  instrumentPluginClasspath {
    visible = false
    canBeConsumed = false
    canBeResolved = true
  }
}

instrument.plugins = ['datadog.opentelemetry.tooling.shim.OtelShimGradlePlugin']

minimumInstructionCoverage = 0.0
minimumBranchCoverage = 0.0

forbiddenApis {
  ignoreFailures = true
}
spotbugs {
  onlyAnalyze = ['none']
}

dependencies {
  // latest OpenTelemetry API for drop-in support; instrumented at build-time with our shim
  embeddedClasspath group: 'io.opentelemetry', name: 'opentelemetry-api', version: openTelemetryApiVersion
  embeddedClasspath group: 'io.opentelemetry.instrumentation', name: 'opentelemetry-instrumentation-api', version: openTelemetryInstrumentationApiVersion
  embeddedClasspath group: 'io.opentelemetry.instrumentation', name: 'opentelemetry-instrumentation-api-incubator', version: openTelemetryInstrumentationVersion

  // selected bootstrap types shared across multiple OpenTelemetry instrumentations
  embeddedClasspath group: 'io.opentelemetry.javaagent.instrumentation', name: 'opentelemetry-javaagent-executors-bootstrap', version: openTelemetryInstrumentationVersion
  embeddedClasspath group: 'io.opentelemetry.javaagent.instrumentation', name: 'opentelemetry-javaagent-jaxrs-common-bootstrap', version: openTelemetryInstrumentationVersion
  embeddedClasspath group: 'io.opentelemetry.javaagent.instrumentation', name: 'opentelemetry-javaagent-jdbc-bootstrap', version: openTelemetryInstrumentationVersion
  embeddedClasspath group: 'io.opentelemetry.javaagent.instrumentation', name: 'opentelemetry-javaagent-jms-common-bootstrap', version: openTelemetryInstrumentationVersion
  embeddedClasspath group: 'io.opentelemetry.javaagent.instrumentation', name: 'opentelemetry-javaagent-servlet-common-bootstrap', version: openTelemetryInstrumentationVersion

  compileOnly project(':dd-java-agent:agent-bootstrap')
  implementation project(':dd-java-agent:agent-otel:otel-shim')

  instrumentPluginClasspath project(path: ':dd-java-agent:agent-otel:otel-tooling', configuration: 'instrumentPluginClasspath')
}

// unpack embeddedClasspath to same path as compiled classes so it can get instrumented
tasks.register('unpackJars', Copy) {
  dependsOn configurations.embeddedClasspath
  exclude 'META-INF/'
  from {
    configurations.embeddedClasspath.collect { zipTree(it) }
  }
  into compileJava.destinationDirectory
}
tasks.named('compileJava') {
  dependsOn 'unpackJars'
}

shadowJar {
  dependencies deps.excludeShared

  exclude 'io/opentelemetry/api/incubator/**'
  exclude 'io/opentelemetry/context/internal/shaded/**'
  exclude 'io/opentelemetry/instrumentation/api/internal/cache/**'
  exclude 'io/opentelemetry/instrumentation/api/internal/RuntimeVirtualFieldSupplier*'
  exclude 'io/opentelemetry/instrumentation/api/util/VirtualField*'
  exclude 'io/opentelemetry/javaagent/bootstrap/jaxrs/ClassHierarchyIterable*'
  exclude 'io/opentelemetry/**/package-info.class'

  relocate 'datadog.opentelemetry.shim', 'datadog.trace.bootstrap.otel.shim'
  relocate 'io.opentelemetry.javaagent.bootstrap', 'datadog.trace.bootstrap.otel.instrumentation'
  relocate 'io.opentelemetry', 'datadog.trace.bootstrap.otel'
}

jar {
  archiveClassifier = 'unbundled'
}
