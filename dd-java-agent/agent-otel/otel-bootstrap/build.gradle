plugins {
  id "com.github.johnrengelman.shadow"
}

def otelApiVersion = '1.38.0'
def otelInstrumentationApiVersion = '2.4.0'

apply from: "$rootDir/gradle/java.gradle"
apply plugin: 'instrument'

configurations {
  embeddedClasspath {
    visible = false
    canBeConsumed = false
    canBeResolved = true
  }
  compileClasspath.extendsFrom(embeddedClasspath)
  instrumentPluginClasspath {
    visible = false
    canBeConsumed = false
    canBeResolved = true
  }
}

instrument.plugins = ['datadog.opentelemetry.tooling.shim.OtelShimGradlePlugin']

minimumInstructionCoverage = 0.0
minimumBranchCoverage = 0.0

forbiddenApis {
  failOnMissingClasses = false
  ignoreFailures = true
}
spotbugs {
  onlyAnalyze = ['none']
}

dependencies {
  // latest OpenTelemetry API for drop-in support; instrumented at build-time with our shim
  embeddedClasspath group: 'io.opentelemetry', name: 'opentelemetry-api', version: otelApiVersion
  embeddedClasspath group: 'io.opentelemetry.instrumentation', name: 'opentelemetry-instrumentation-api', version: otelInstrumentationApiVersion
  embeddedClasspath group: 'io.opentelemetry.javaagent', name: 'opentelemetry-javaagent-extension-api', version: "$otelInstrumentationApiVersion-alpha"

  // selected bootstrap types shared across multiple OpenTelemetry instrumentations
  embeddedClasspath group: 'io.opentelemetry.javaagent.instrumentation', name: 'opentelemetry-javaagent-servlet-common-bootstrap', version: "$otelInstrumentationApiVersion-alpha"

  compileOnly project(':dd-java-agent:agent-bootstrap')
  implementation project(':dd-java-agent:agent-otel:otel-shim')

  instrumentPluginClasspath project(path: ':dd-java-agent:agent-otel:otel-tooling', configuration: 'instrumentPluginClasspath')
}

// unpack embeddedClasspath to same path as compiled classes so it can get instrumented
tasks.register('unpackJars', Copy) {
  dependsOn configurations.embeddedClasspath
  exclude 'META-INF/'
  exclude '**/module-info.class'
  exclude '**/package-info.class'
  from {
    configurations.embeddedClasspath.collect { zipTree(it) }
  }
  into compileJava.destinationDirectory
}
tasks.named('compileJava') {
  dependsOn 'unpackJars'
}

shadowJar {
  dependencies deps.excludeShared

  include '*.jar'
  include 'io/opentelemetry/api/**'
  exclude 'io/opentelemetry/api/incubator/events/**'
  exclude 'io/opentelemetry/api/incubator/logs/**'
  exclude 'io/opentelemetry/api/incubator/propagation/**'
  exclude 'io/opentelemetry/api/incubator/trace/**'
  exclude 'io/opentelemetry/api/incubator/version.properties'
  include 'io/opentelemetry/context/**'
  exclude 'io/opentelemetry/context/StrictContextStorage*'
  exclude 'io/opentelemetry/context/internal/shaded/**'
  include 'io/opentelemetry/semconv/**'
  include 'io/opentelemetry/instrumentation/api/**'
  exclude 'io/opentelemetry/instrumentation/api/incubator/log/**'
  exclude 'io/opentelemetry/instrumentation/api/incubator/semconv/db/*Sanitizer*'
  exclude 'io/opentelemetry/instrumentation/api/internal/cache/**'
  exclude 'io/opentelemetry/instrumentation/api/internal/RuntimeVirtualFieldSupplier*'
  exclude 'io/opentelemetry/instrumentation/api/util/VirtualField*'
  include 'io/opentelemetry/javaagent/bootstrap/**'
  exclude 'io/opentelemetry/javaagent/bootstrap/CallDepth*'
  exclude 'io/opentelemetry/javaagent/bootstrap/internal/ClassLoaderMatcherCacheHolder*'
  exclude 'io/opentelemetry/javaagent/bootstrap/internal/ConfiguredResourceAttributesHolder*'
  exclude 'io/opentelemetry/javaagent/bootstrap/internal/DeprecatedConfigProperties*'
  exclude 'io/opentelemetry/javaagent/bootstrap/internal/EmptyInstrumentationConfig*'
  exclude 'io/opentelemetry/javaagent/bootstrap/internal/InClassLoaderMatcher*'
  exclude 'io/opentelemetry/javaagent/bootstrap/internal/InstrumentationConfig*'
  include 'datadog/opentelemetry/shim/**'
  include 'datadog/trace/bootstrap/otel/**'

  relocate 'io.opentelemetry.api', 'datadog.trace.bootstrap.otel.api'
  relocate 'io.opentelemetry.context', 'datadog.trace.bootstrap.otel.context'
  relocate 'io.opentelemetry.semconv', 'datadog.trace.bootstrap.otel.semconv'
  relocate 'io.opentelemetry.instrumentation.api', 'datadog.trace.bootstrap.otel.instrumentation.api'
  relocate 'io.opentelemetry.javaagent.bootstrap', 'datadog.trace.bootstrap.otel.instrumentation'
  relocate 'datadog.opentelemetry.shim', 'datadog.trace.bootstrap.otel.shim'
}

jar {
  archiveClassifier = 'unbundled'
}
