version: 2.1

defaults: &defaults
  working_directory: ~/dd-trace-java
  docker:
    - image: &default_container datadog/dd-trace-java-docker-build:latest

# The caching setup of the build dependencies is somewhat involved because of how CircleCI works.
# 1) Caches are immutable, so you can not reuse a cache key (the save will simply be ignored)
# 2) Cache keys are prefix matched, and the most recently updated cache that matches will be picked
#
# There is a weekly job that runs on Monday mornings that builds a new cache from scratch.
#
# The cache is also saved using the unique git revision to enable the dependent build steps to get a fully populated
# cache to work from.
cache_keys: &cache_keys
  keys:
    # Dependent steps will find this cache
    - dd-trace-java-v4-{{ .Branch }}-{{ checksum "_circle_ci_cache_id" }}-{{ .Revision }}
    # New branch commits will find this cache
    - dd-trace-java-v4-{{ .Branch }}-{{ checksum "_circle_ci_cache_id" }}-
    # New branches fall back on main build caches
    - dd-trace-java-v4-master-{{ checksum "_circle_ci_cache_base_id" }}-
    # Fall back on the previous cache scheme to not start from scratch when switching
    - dd-trace-java-v3-master-

save_cache_paths: &save_cache_paths
  paths:
    # Cached dependencies and wrappers for gradle
    - ~/.gradle
    # Cached dependencies for maven
    - ~/.m2
    # Cached launchers and compilers for sbt
    - ~/.sbt
    # Cached dependencies for sbt handled by ivy
    - ~/.ivy2
    # Cached dependencies for sbt handled by coursier
    - ~/.cache/coursier

test_matrix: &test_matrix
  parameters:
    testTask: [ "7", "IBM8", "ZULU8","ORACLE8", "11", "ZULU11", "ZULU13", "15" ]

parameters:
  gradle_flags:
    # Using no-daemon is important for the caches to be in a consistent state
    type: string
    default: "--stacktrace --no-daemon"

commands:
  setup_code:
    steps:
      - checkout
      - run:
          name: Checkout merge commit
          command: |
            CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"

            if [[ -n "${CIRCLE_PR_NUMBER}" ]]
            then
              FETCH_REFS="${FETCH_REFS} +refs/pull/${CIRCLE_PR_NUMBER}/merge:pr/${CIRCLE_PR_NUMBER}/merge"
              git fetch -u origin ${FETCH_REFS}
              git checkout "pr/${CIRCLE_PR_NUMBER}/merge"
            fi

            # Everything falls back to the main cache
            BASE_CACHE_ID="main"
            if [ "$CIRCLE_BRANCH" == "master" ];
            then
              # If we're on a the main branch, then they are the same
              echo "${BASE_CACHE_ID}" >| _circle_ci_cache_id
            else
              # If we're on a PR branch, then we use the name of the branch and the
              # PR number as a stable identifier for the branch cache
              echo "${CIRCLE_BRANCH}-${CIRCLE_PULL_REQUEST##*/}" >| _circle_ci_cache_id
            fi
            # Have new branches start from the main cache
            echo "${BASE_CACHE_ID}" >| _circle_ci_cache_base_id

      - attach_workspace:
          at: .

  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  display_memory_usage:
    steps:
      - run:
          name: Max Memory Used
          command: cat /sys/fs/cgroup/memory/memory.max_usage_in_bytes
          when: always

jobs:
  build:
    <<: *defaults
    resource_class: xlarge

    steps:
      - setup_code

      - restore_cache:
          <<: *cache_keys

      - run:
          name: Build Project
          command: >-
            MAVEN_OPTS="-Xms64M -Xmx256M"
            GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx1900M -Xms64M -XX:ErrorFile=/tmp/hs_err_pid%p.log'"
            ./gradlew clean compile shadowJar
            << pipeline.parameters.gradle_flags >>
            --max-workers=4

      - run:
          name: Collect Libs
          when: always
          command: .circleci/collect_libs.sh

      - store_artifacts:
          path: ./libs

      - persist_to_workspace:
          root: .
          paths:
            - .gradle
            - workspace

      - save_cache:
          key: dd-trace-java-v4-{{ .Branch }}-{{ checksum "_circle_ci_cache_id" }}-{{ .Revision }}
          <<: *save_cache_paths

      - display_memory_usage

  build_clean_cache:
    <<: *defaults
    resource_class: xlarge

    steps:
      - setup_code

      - run:
          name: Build Project
          command: >-
            MAVEN_OPTS="-Xms64M -Xmx256M"
            GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx1900M -Xms64M -XX:ErrorFile=/tmp/hs_err_pid%p.log'"
            ./gradlew clean compile shadowJar
            << pipeline.parameters.gradle_flags >>
            --max-workers=4

      - save_cache:
          key: dd-trace-java-v4-{{ .Branch }}-{{ checksum "_circle_ci_cache_id" }}-{{ epoch }}
          <<: *save_cache_paths

      - display_memory_usage

  base_tests: &base_tests
    <<: *defaults
    resource_class: xlarge

    docker:
      - image: *default_container

    parameters:
      testTask:
        type: string
      prefixTestTask:
        default: false
        type: boolean

    steps:
      - setup_code

      - restore_cache:
          <<: *cache_keys

      - run:
          name: Run tests
          command: >-
            MAVEN_OPTS="-Xms64M -Xmx512M"
            GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx1940M -Xms512M -XX:ErrorFile=/tmp/hs_err_pid%p.log' -Ddatadog.forkedMaxHeapSize=512M -Ddatadog.forkedMinHeapSize=128M"
            ./gradlew <<# parameters.prefixTestTask>>testJava<</ parameters.prefixTestTask>><< parameters.testTask >> -PskipInstTests -PskipSmokeTests
            << pipeline.parameters.gradle_flags >>
            --max-workers=8
            --continue

      - run:
          name: Collect reports
          when: on_fail
          command: .circleci/collect_reports.sh

      - store_artifacts:
          path: ./reports

      - run:
          name: Collect test results
          when: always
          command: .circleci/collect_results.sh

      - store_test_results:
          path: ./results

      - display_memory_usage

      - early_return_for_forked_pull_requests

      - run:
          name: Upload test results to Datadog
          when: always
          command: .circleci/upload_ciapp.sh base << parameters.testTask >> || true

  instrumentation_tests:
    <<: *base_tests
    resource_class: xlarge

    docker:
      - image: *default_container
        # This is used by spymemcached instrumentation tests
      - image: memcached
        # This is used by rabbitmq instrumentation tests
      - image: rabbitmq
        # This is used by aerospike instrumentation tests
      - image: aerospike:5.5.0.9
        # This is used by mongodb instrumentation tests
      - image: mongo
        # This is used by jdbc and vert.x tests
      - image: mysql
        environment:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_USER: sa
          MYSQL_PASSWORD: sa
          MYSQL_DATABASE: jdbcUnitTest
        # This is used by jdbc tests
      - image: postgres
        environment:
          POSTGRES_USER: sa
          POSTGRES_PASSWORD: sa
          POSTGRES_DB: jdbcUnitTest

    parameters:
      testTask:
        type: string
      prefixTestTask:
        default: false
        type: boolean

    steps:
      - setup_code

      - restore_cache:
          <<: *cache_keys

      - run:
          name: Run tests
          command: >-
            MAVEN_OPTS="-Xms64M -Xmx512M"
            GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx1940M -Xms512M -XX:ErrorFile=/tmp/hs_err_pid%p.log' -Ddatadog.forkedMaxHeapSize=512M -Ddatadog.forkedMinHeapSize=128M"
            ./gradlew :dd-java-agent:instrumentation:<<# parameters.prefixTestTask>>testJava<</ parameters.prefixTestTask>><< parameters.testTask >>
            << pipeline.parameters.gradle_flags >>
            --max-workers=6
            --continue

      - run:
          name: Collect reports
          when: on_fail
          command: .circleci/collect_reports.sh

      - store_artifacts:
          path: ./reports

      - run:
          name: Collect test results
          when: always
          command: .circleci/collect_results.sh

      - store_test_results:
          path: ./results

      - display_memory_usage

      - early_return_for_forked_pull_requests

      - run:
          name: Upload test results to Datadog
          when: always
          command: .circleci/upload_ciapp.sh instrumentation << parameters.testTask >> || true

  smoke_tests:
    <<: *base_tests
    resource_class: medium

    docker:
      - image: *default_container
        # This is used by mongodb smoke tests
      - image: mongo

    parameters:
      testTask:
        type: string
      prefixTestTask:
        default: false
        type: boolean

    steps:
      - setup_code

      - restore_cache:
          <<: *cache_keys

      - run:
          name: Run Tests
          command: >-
            MAVEN_OPTS="-Xms64M -Xmx512M"
            GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx1750M -Xms512M -XX:ErrorFile=/tmp/hs_err_pid%p.log' -Ddatadog.forkedMaxHeapSize=512M -Ddatadog.forkedMinHeapSize=128M"
            ./gradlew stagePlayBinaryDist :dd-smoke-test:<<# parameters.prefixTestTask>>testJava<</ parameters.prefixTestTask>><< parameters.testTask >>
            << pipeline.parameters.gradle_flags >>
            --max-workers=2
            --continue

      - run:
          name: Collect Reports
          when: on_fail
          command: .circleci/collect_reports.sh

      - store_artifacts:
          path: ./reports

      - run:
          name: Collect test results
          when: always
          command: .circleci/collect_results.sh

      - store_test_results:
          path: ./results

      - display_memory_usage

      - early_return_for_forked_pull_requests

      - run:
          name: Upload test results to Datadog
          when: always
          command: .circleci/upload_ciapp.sh smoke << parameters.testTask >> || true

  # The only way to do fan-in in CircleCI seems to have a proper job, so let's have one that
  # doesn't consume so many resources. The execution time for this including spin up seems to
  # be around 6 seconds.
  fan_in:
    resource_class: small

    docker:
      - image: alpine

    parameters:
      testTask:
        type: string

    steps:
      - run:
          name: All tests for << parameters.testTask >> passed!
          command: echo 'All tests passed!'

  agent_integration_tests:
    <<: *base_tests
    resource_class: medium

    docker:
      - image: *default_container
      - image: datadog/agent:7.29.0
        environment:
          - DD_APM_ENABLED=true
          - DD_BIND_HOST=0.0.0.0
          - DD_API_KEY=invalid_key_but_this_is_fine

  check:
    <<: *defaults
    resource_class: large

    steps:
      - setup_code

      - restore_cache:
          <<: *cache_keys

      - run:
          name: Build Project
          command: >-
            MAVEN_OPTS="-Xms64M -Xmx256M"
            GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx1550M -Xms512M -XX:ErrorFile=/tmp/hs_err_pid%p.log'"
            ./gradlew build -PskipTests
            << pipeline.parameters.gradle_flags >>
            --max-workers=3

      - run:
          name: Test Published Dependencies
          command: |
            mvn_local_repo=$(mvn help:evaluate -Dexpression=settings.localRepository -q -DforceStdout)
            rm -rf "${mvn_local_repo}/com/datadoghq"
            export GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx1750M -Xms256M -XX:ErrorFile=/tmp/hs_err_pid%p.log'"
            ./gradlew publishToMavenLocal << pipeline.parameters.gradle_flags >> --max-workers=3
            cd test-published-dependencies
            ../gradlew check --max-workers=3

      - run:
          name: Collect Reports
          when: always
          command: .circleci/collect_reports.sh

      - store_artifacts:
          path: ./reports

      - display_memory_usage

  muzzle:
    <<: *defaults
    resource_class: medium
    parallelism: 3
    steps:
      - setup_code

      # We are not running with a separate cache of all muzzle artifacts here because it gets very big and
      # ends up taking more time restoring/saving than the actual increase in time it takes just
      # downloading the artifacts each time.
      #
      # Let's at least restore the build cache to have something to start from.
      - restore_cache:
          <<: *cache_keys

      - run:
          name: Gather muzzle tasks
          command: >-
            SKIP_BUILDSCAN="true"
            ./gradlew writeMuzzleTasksToFile
            << pipeline.parameters.gradle_flags >>
            --max-workers=3

      - run:
          name: Verify Muzzle
          command: >-
            SKIP_BUILDSCAN="true"
            GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx950M -Xms64M -XX:ErrorFile=/tmp/hs_err_pid%p.log'"
            ./gradlew `circleci tests split --split-by=timings workspace/build/muzzleTasks | xargs`
            << pipeline.parameters.gradle_flags >>
            --max-workers=4

      - run:
          name: Collect Reports
          when: on_fail
          command: .circleci/collect_reports.sh

      - store_artifacts:
          path: ./reports

      - store_test_results:
          path: workspace/build/muzzle-test-results

      - display_memory_usage

build_test_jobs: &build_test_jobs
  - build

  - base_tests:
      requires:
        - build
      prefixTestTask: true
      name: z_test_<< matrix.testTask >>_base
      matrix:
        <<: *test_matrix

  - base_tests:
      requires:
        - build
      name: z_test_8_base
      testTask: test jacocoTestReport jacocoTestCoverageVerification

  - instrumentation_tests:
      requires:
        - build
      prefixTestTask: true
      name: z_test_<< matrix.testTask >>_inst
      matrix:
        <<: *test_matrix

  - instrumentation_tests:
      requires:
        - build
      name: z_test_8_inst
      testTask: test

  - instrumentation_tests:
      requires:
        - build
      name: test_8_inst_latest
      testTask: latestDepTest

  - smoke_tests:
      requires:
        - build
      prefixTestTask: true
      name: z_test_<< matrix.testTask >>_smoke
      matrix:
        <<: *test_matrix

  - smoke_tests:
      requires:
        - build
      name: z_test_8_smoke
      testTask: test

  - fan_in:
      requires:
        - z_test_<< matrix.testTask >>_base
        - z_test_<< matrix.testTask >>_inst
        - z_test_<< matrix.testTask >>_smoke
      name: test_<< matrix.testTask >>
      matrix:
        <<: *test_matrix

  - fan_in:
      requires:
        - z_test_8_base
        - z_test_8_inst
        - z_test_8_smoke
      name: test_8
      testTask: "8"

  - agent_integration_tests:
      requires:
        - build
      testTask: traceAgentTest

  - check:
      requires:
        - build

  - muzzle:
      requires:
        - build
      filters:
        branches:
          ignore:
            - master
            - project/*
            - release/*

workflows:
  build_test:
    jobs:
      *build_test_jobs

  nightly:
    triggers:
      - schedule:
          # Run this job at 00:05 UTC every day
          cron: "5 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      *build_test_jobs

  weekly:
    triggers:
      - schedule:
          # Run this job at 00:05 UTC on Monday
          cron: "5 0 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      # This will rebuild a main cache with a new timestamp from a clean slate
      - build_clean_cache
