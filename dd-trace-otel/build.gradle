plugins {
  id "com.github.johnrengelman.shadow"
}

description = 'dd-trace-otel'

apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/publish.gradle"

minimumBranchCoverage = 0.5
minimumInstructionCoverage = 0.5

excludedClassesCoverage += []

def openTelemetryVersion = '1.20.1'

dependencies {
  api project(':dd-trace-api')
  implementation (project(':dd-trace-core')) {
    // why all communication pulls in remote config is beyond me...
    exclude(group: 'com.datadoghq', module: 'remote-config')
  }

  // OpenTelemetry
  api group: 'io.opentelemetry', name: 'opentelemetry-api', version: openTelemetryVersion
  api group: 'io.opentelemetry', name: 'opentelemetry-semconv', version: openTelemetryVersion+'-alpha'

  api deps.slf4j  // TODO Should we use JUL too? Ref. https://opentelemetry.io/docs/instrumentation/java/manual/#logging-and-error-handling
  implementation project(':dd-trace-ot:correlation-id-injection')

  testImplementation project(":dd-java-agent:testing")
}

jar {
  archiveClassifier = 'unbundled'
}

shadowJar {
  archiveClassifier = ''

  dependencies {
    // direct dependencies
    exclude(dependency('io.opentelemetry.api:'))
    exclude(dependency('io.opentelemetry.semconv:'))
    exclude(dependency('org.slf4j:'))
  }

  relocate('com.', 'ddtrot.com.')
  relocate('dogstatsd/', 'ddtrot/dogstatsd/')
  relocate('jni/', 'ddtrot/jni/')
  relocate('jnr/', 'ddtrot/jnr/')
  relocate('okhttp3.', 'ddtrot.okhttp3.')
  relocate('okio.', 'ddtrot.okio.')
  relocate('org.', 'ddtrot.org.') {
    exclude('org.slf4j.*')
  }
  relocate('datadog.', 'ddtrot.dd.') {
    exclude('datadog.opentracing.*')
    exclude('datadog.opentracing.resolver.*')
    exclude('datadog.trace.api.*')
    exclude('datadog.trace.api.config.*')
    exclude('datadog.trace.api.interceptor.*')
    exclude('datadog.trace.api.internal.*')
    exclude('datadog.trace.api.sampling.*')
    exclude('datadog.trace.context.*')
  }
  exclude('META-INF/maven/')
  exclude('META-INF/proguard/')
  exclude('/META-INF/*.kotlin_module')
}
