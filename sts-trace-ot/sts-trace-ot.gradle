plugins {
  id "me.champeau.gradle.jmh" version "0.4.4"
}

description = 'sts-trace-ot'

apply from: "${rootDir}/gradle/java.gradle"
apply from: "${rootDir}/gradle/publish.gradle"

minimumBranchCoverage = 0.5
minimumInstructionCoverage = 0.6
excludedClassesConverage += [
  'stackstate.trace.common.writer.ListWriter',
  'stackstate.trace.common.sampling.PrioritySampling'
]

// These classes use Ratpack which requires Java 8. (Currently also incompatible with Java 9.)
testJava8Only += 'stackstate/trace/api/writer/STSApiTest.class'

apply plugin: 'org.unbroken-dome.test-sets'

testSets {
  traceAgentTest
}

dependencies {
  annotationProcessor deps.autoservice
  implementation deps.autoservice

  compile project(':sts-trace-api')
  compile deps.opentracing
  compile group: 'io.opentracing.contrib', name: 'opentracing-tracerresolver', version: '0.1.0'

  compile deps.jackson
  compile deps.slf4j
  compile group: 'org.msgpack', name: 'jackson-dataformat-msgpack', version: '0.8.2'

  testCompile deps.autoservice
  testCompile group: 'org.objenesis', name: 'objenesis', version: '2.6'
  testCompile group: 'cglib', name: 'cglib-nodep', version: '3.2.5'
  testCompile 'com.github.stefanbirkner:system-rules:1.17.1'
}

jmh {
  timeUnit = 'us' // Output time unit. Available time units are: [m, s, ms, us, ns].
  benchmarkMode = ['thrpt', 'avgt']
  timeOnIteration = '1s'
  iterations = 1 // Number of measurement iterations to do.
//  fork = 2 // How many times to forks a single benchmark. Use 0 to disable forking altogether
  jvmArgs = []
  failOnError = true // Should JMH fail immediately if any benchmark had experienced the unrecoverable error?
  warmup = '2s' // Time to spend at each warmup iteration.
  warmupIterations = 1 // Number of warmup iterations to do.
//  warmupForks = 0 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.

//  profilers = ['stack']
  // Use profilers to collect additional data. Supported profilers: [cl, comp, gc, stack, perf, perfnorm, perfasm, xperf, xperfasm, hs_cl, hs_comp, hs_gc, hs_rt, hs_thr]

//  humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
//  operationsPerInvocation = 10 // Operations per invocation.
//  synchronizeIterations = false // Synchronize iterations?
//  timeout = '1s' // Timeout for benchmark iteration.
//  includeTests = true
  // Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.

  duplicateClassesStrategy = 'fail'
  jmhVersion = '1.19' // Specifies JMH version
}
