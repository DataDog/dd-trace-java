
// generates Java source code from .trie resource files
def configureClassNameTrieTask(exec, sourceSetName) {
  def trieFiles = fileTree(dir: "src/${sourceSetName}/resources", include: '**/*.trie')
  def trieDir = trieFiles.dir.toPath()

  def javaDir = buildDir.toPath().resolve("generated/sources/tries/java/${sourceSetName}")
  sourceSets."$sourceSetName".java.srcDirs += [javaDir]

  // declare expected output path(s) so we can support incremental builds
  def javaFiles = trieFiles.collect {
    file(javaDir.resolve(trieDir.relativize(it.toPath())).resolveSibling(
      it.name.capitalize().replaceAll('_([a-z])') {
        it[1].toUpperCase() }
      .replace('.trie', 'Trie.java') as String))
  }

  exec.group = 'Build'
  exec.description = "Generate $sourceSetName ClassNameTries from .trie files"
  exec.inputs.files(trieFiles)
  exec.outputs.files(javaFiles)
  exec.mainClass = 'datadog.trace.util.ClassNameTrie$JavaGenerator'
  exec.classpath = sourceSets."$sourceSetName".compileClasspath
  exec.args = [trieDir, javaDir] + trieFiles
}

tasks.register('generateClassNameTries', JavaExec) {
  configureClassNameTrieTask(it, 'main')
}

tasks.register('generateTestClassNameTries', JavaExec) {
  configureClassNameTrieTask(it, 'test')
}
