apply plugin: 'com.diffplug.spotless'

// This definition is needed since the spotless file is used from stand alone projects
def configPath = rootProject.hasProperty('sharedConfigDirectory') ? sharedConfigDirectory : project.rootProject.rootDir.path + '/gradle'
// This is necessary for some projects that set a special groovy target which can't coexist with excludeJava
boolean groovySkipJavaExclude = project.hasProperty('groovySkipJavaExclude') ? groovySkipJavaExclude : false

spotless {
  if (project.plugins.hasPlugin('java')) {
    java {
      toggleOffOn()
      googleJavaFormat()
    }
  }

  groovyGradle {
    toggleOffOn()
    // same as groovy, but for .gradle (defaults to '*.gradle')
    target '*.gradle', 'gradle/**/*.gradle'
    greclipse().configFile(configPath + '/enforcement/spotless-groovy.properties')
  }

  kotlinGradle {
    toggleOffOn()
    // same as kotlin, but for .gradle.kts files (defaults to '*.gradle.kts')
    target '*.gradle.kts'
    ktfmt()
    ktlint().userData(['indent_size': '2', 'continuation_indent_size': '2'])
  }

  if (project.plugins.hasPlugin('groovy')) {
    groovy {
      toggleOffOn()
      if (!groovySkipJavaExclude) {
        excludeJava() // excludes all Java sources within the Groovy source dirs from formatting
        // the Groovy Eclipse formatter extends the Java Eclipse formatter,
        // so it formats Java files by default (unless `excludeJava` is used).
      }
      greclipse().configFile(configPath + '/enforcement/spotless-groovy.properties')
    }
  }

  if (project.plugins.hasPlugin('scala')) {
    scala {
      toggleOffOn()
      scalafmt("2.0.1").configFile(configPath + '/enforcement/spotless-scalafmt.conf')
    }
  }

  if (project.plugins.hasPlugin('kotlin')) {
    kotlin {
      toggleOffOn()
      //    ktfmt() // Requires newer version of java
      ktlint().userData(['indent_size': '2', 'continuation_indent_size': '2'])
    }
  }

  format 'misc', {
    toggleOffOn()
    target '.gitignore', '*.md', '.github/**/*.md', 'src/**/*.md', 'application/**/*.md', '*.sh', 'tooling/*.sh', '.circleci/*.sh'
    indentWithSpaces()
    trimTrailingWhitespace()
    endWithNewline()
  }
}

tasks.register('formatCode') {
  dependsOn 'spotlessApply'
}
check.configure {
  dependsOn 'spotlessCheck'
}
