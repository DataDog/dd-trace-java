apply plugin: 'com.diffplug.spotless'

// This definition is needed since the spotless file is used from stand alone projects
def configPath = rootProject.hasProperty('sharedConfigDirectory') ? sharedConfigDirectory : project.rootProject.rootDir.path + '/gradle'
// This is necessary for some projects that set a special groovy target which can't coexist with excludeJava
boolean groovySkipJavaExclude = project.hasProperty('groovySkipJavaExclude') ? groovySkipJavaExclude : false

def buildDirectoryFiles = project.layout.buildDirectory.asFileTree

spotless {
  if (rootProject.hasProperty('skipSpotless')) {
    // Spotless in JDK 8 uses an older eclipse formatter, and it has a (flaky) bug crashing check_profiling.
    // We disable it in CI, since we have a job dedicated to spotless anyway.
    enforceCheck false
  }

  project.pluginManager.withPlugin('java') {
    java {
      toggleOffOn()
      // set explicit target to workaround https://github.com/diffplug/spotless/issues/1163
      target 'src/**/*.java'
      // ignore embedded test projects and everything in build dir, e.g. generated sources
      targetExclude('src/test/resources/**', buildDirectoryFiles)
      // This is the last Google Java Format version that supports Java 8
      googleJavaFormat('1.29.0')
    }
  }

  def isRootProject = project == project.rootProject
  groovyGradle {
    toggleOffOn()
    // same as groovy, but for .gradle (defaults to '*.gradle')
    if (isRootProject) {
      // only do this for the root project since the instrumentation project has a subproject and directory named gradle
      // that will confuse task dependencies
      target '*.gradle', 'gradle/**/*.gradle'
    } else {
      target '*.gradle'
    }
    greclipse().configFile(configPath + '/enforcement/spotless-groovy.properties')
  }

  kotlinGradle {
    toggleOffOn()
    // same as kotlin, but for .gradle.kts files (defaults to '*.gradle.kts')
    target '*.gradle.kts'
    ktlint('1.7.1').editorConfigOverride([
      // Disable trailing comma rules to minimize diff.
      'ktlint_standard_trailing-comma-on-call-site': 'disabled',
      'ktlint_standard_trailing-comma-on-declaration-site': 'disabled'
    ])
  }

  project.pluginManager.withPlugin('groovy') {
    groovy {
      toggleOffOn()
      if (!groovySkipJavaExclude) {
        excludeJava() // excludes all Java sources within the Groovy source dirs from formatting
        // the Groovy Eclipse formatter extends the Java Eclipse formatter,
        // so it formats Java files by default (unless `excludeJava` is used).
      }
      targetExclude(buildDirectoryFiles)
      greclipse().configFile(configPath + '/enforcement/spotless-groovy.properties')
    }
  }

  project.pluginManager.withPlugin('scala') {
    scala {
      toggleOffOn()
      targetExclude(buildDirectoryFiles)
      // TODO: For some reason Scala format is not working for latest versions.
      scalafmt('3.8.6').configFile(configPath + '/enforcement/spotless-scalafmt.conf')
    }
  }

  format 'markdown', {
    toggleOffOn()
    target '*.md', '.github/**/*.md', 'src/**/*.md', 'application/**/*.md'
    leadingTabsToSpaces()
    endWithNewline()
  }

  format 'misc', {
    toggleOffOn()
    target '.gitignore', '*.sh', 'tooling/*.sh', '.gitlab/*.sh'
    leadingTabsToSpaces()
    trimTrailingWhitespace()
    endWithNewline()
  }

  project.pluginManager.withPlugin('kotlin') {
    kotlin {
      toggleOffOn()
      targetExclude(buildDirectoryFiles)
      ktlint('1.7.1').editorConfigOverride([
        // Disable trailing comma rules to minimize diff.
        'ktlint_standard_trailing-comma-on-call-site': 'disabled',
        'ktlint_standard_trailing-comma-on-declaration-site': 'disabled'
      ])
    }
  }
}


tasks.register('formatCode') {
  dependsOn 'spotlessApply'
}
tasks.named("check") {
  dependsOn 'spotlessCheck'
}
