def groovyVer = "2.5.13"
def spockGroovyVer = groovyVer.replaceAll(/\.\d+$/, '')

ext {
  versions = [
    slf4j         : "1.7.30",
    guava         : "20.0", // Last version to support Java 7
    okhttp        : "3.12.12", // 3.12.x is last version to support Java7)
    okio          : "1.16.0",

    spock         : "1.3-groovy-$spockGroovyVer",
    groovy        : groovyVer,
    junit5        : "5.6.2",
    logback       : "1.2.3",
    bytebuddy     : "1.10.22",
    scala         : "2.11.12",  // Last version to support Java 7 (2.12+ require Java 8+)
    scala210      : "2.10.7",
    scala211      : "2.11.12",
    scala212      : "2.12.12",
    scala213      : "2.13.4",
    kotlin        : "1.3.72",
    coroutines    : "1.3.0",
    dogstatsd     : "2.9.0",
    jnr_unixsocket: "0.28",
    commons       : "3.2",
    mockito       : '3.5.10',
    testcontainers: '1.15.0-rc2',
    jmc           : "8.0.0-SNAPSHOT",
    autoservice   : "1.0-rc7"
  ]

  deps = [
    // General
    slf4j                : "org.slf4j:slf4j-api:${versions.slf4j}",
    guava                : "com.google.guava:guava:$versions.guava",
    okhttp               : dependencies.create(group: 'com.squareup.okhttp3', name: 'okhttp', version: versions.okhttp),
    okio                 : dependencies.create(group: 'com.squareup.okio', name: 'okio', version: versions.okio),
    bytebuddy            : dependencies.create(group: 'net.bytebuddy', name: 'byte-buddy', version: versions.bytebuddy),
    bytebuddyagent       : dependencies.create(group: 'net.bytebuddy', name: 'byte-buddy-agent', version: versions.bytebuddy),
    autoserviceProcessor : dependencies.create(group: 'com.google.auto.service', name: 'auto-service', version: versions.autoservice),
    autoserviceAnnotation: dependencies.create(group: 'com.google.auto.service', name: 'auto-service-annotations', version: versions.autoservice),
    commonsMath          : dependencies.create(group: 'org.apache.commons', name: 'commons-math3', version: versions.commons),

    // Testing

    spock         : [
      dependencies.create("org.spockframework:spock-core:${versions.spock}", {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
      }),
      // Used by Spock for mocking:
      dependencies.create(group: 'org.objenesis', name: 'objenesis', version: '2.6') // Last version to support Java7
    ],
    groovy        : "org.codehaus.groovy:groovy-all:${versions.groovy}",
    junit5        : [
      dependencies.create(group: 'org.junit.jupiter', name: 'junit-jupiter', version: versions.junit5),
      dependencies.create(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit5)
    ],
    mockito       : [
      dependencies.create(group: 'org.mockito', name: 'mockito-core', version: versions.mockito),
      dependencies.create(group: 'org.mockito', name: 'mockito-junit-jupiter', version: versions.mockito)
    ],
    testcontainers: "org.testcontainers:testcontainers:${versions.testcontainers}",
    testLogging   : [
      dependencies.create(group: 'ch.qos.logback', name: 'logback-classic', version: versions.logback),
      dependencies.create(group: 'org.slf4j', name: 'log4j-over-slf4j', version: versions.slf4j),
      dependencies.create(group: 'org.slf4j', name: 'jcl-over-slf4j', version: versions.slf4j),
      dependencies.create(group: 'org.slf4j', name: 'jul-to-slf4j', version: versions.slf4j),
    ],
    scala         : dependencies.create(group: 'org.scala-lang', name: 'scala-library', version: "${versions.scala}"),
    scala210      : dependencies.create(group: 'org.scala-lang', name: 'scala-library', version: "${versions.scala210}"),
    scala211      : dependencies.create(group: 'org.scala-lang', name: 'scala-library', version: "${versions.scala211}"),
    scala212      : dependencies.create(group: 'org.scala-lang', name: 'scala-library', version: "${versions.scala212}"),
    scala213      : dependencies.create(group: 'org.scala-lang', name: 'scala-library', version: "${versions.scala213}"),
    kotlin        : dependencies.create(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: "${versions.kotlin}"),
    coroutines    : dependencies.create(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: "${versions.coroutines}"),

    jmc           : [
      dependencies.create(group: 'org.openjdk.jmc', name: 'common', version: versions.jmc),
      dependencies.create(group: 'org.openjdk.jmc', name: 'flightrecorder', version: versions.jmc),
      dependencies.create(group: 'org.openjdk.jmc', name: 'flightrecorder', version: versions.jmc),
      dependencies.create(group: 'org.openjdk.jmc', name: 'flightrecorder', version: versions.jmc)
    ],

    // Shared between agent tooling, instrumentation, JMXFetch, and profiling
    shared        : [
      dependencies.create(group: 'com.squareup.okhttp3', name: 'okhttp', version: versions.okhttp),
      // Force specific version of okio required by com.squareup.moshi:moshi
      // When all of the dependencies are declared in dd-trace-core, moshi overrides the okhttp's
      // transitive dependency.  Since okhttp is declared here and moshi is not, this lead to an incompatible version
      dependencies.create(group: 'com.squareup.okio', name: 'okio', version: versions.okio),
      dependencies.create(group: 'com.datadoghq', name: 'java-dogstatsd-client', version: versions.dogstatsd),
      dependencies.create(group: 'com.github.jnr', name: 'jnr-unixsocket', version: versions.jnr_unixsocket)
    ],

    // Inverse of "shared".  These exclude directives are part of shadowJar's DSL
    // which is similar but not exactly the same as the regular gradle dependency{} block
    // Also, transitive dependencies have to be explicitly listed
    sharedInverse : (Closure) {
      // dogstatsd and its transitives
      exclude(dependency('com.datadoghq:java-dogstatsd-client'))
      exclude(dependency('com.github.jnr::'))
      exclude(dependency('org.ow2.asm::'))

      // okhttp and its transitives
      exclude(dependency('com.squareup.okhttp3:okhttp'))
      exclude(dependency('com.squareup.okio:okio'))
    }
  ]
}
