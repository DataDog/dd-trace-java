/**
 * This script defines a set of tasks to be used in CI. These aggregate tasks support partitioning (to parallelize
 * jobs) with -PtaskPartitionCount and -PtaskPartition, and limiting tasks to those affected by git changes
 * with -PgitBaseRef.
 */
import java.nio.file.Paths

allprojects { project ->
  project.ext {
    activePartition = true
  }
  final boolean shouldUseTaskPartitions = project.rootProject.hasProperty("taskPartitionCount") && project.rootProject.hasProperty("taskPartition")
  if (shouldUseTaskPartitions) {
    final int taskPartitionCount = project.rootProject.property("taskPartitionCount") as int
    final int taskPartition = project.rootProject.property("taskPartition") as int
    final currentTaskPartition = Math.abs(project.path.hashCode() % taskPartitionCount)
    project.setProperty("activePartition", currentTaskPartition == taskPartition)
  }
}

File relativeToGitRoot(File f) {
  return rootProject.projectDir.toPath().relativize(f.absoluteFile.toPath()).toFile()
}

String isAffectedBy(Task baseTask, Map<Project, Set<String>> affectedProjects) {
  HashSet<Task> visited = []
  LinkedList<Task> queue = [baseTask]
  while (!queue.isEmpty()) {
    Task t = queue.poll()
    if (visited.contains(t)) {
      continue
    }
    visited.add(t)

    final Set<String> affectedTasks = affectedProjects.get(t.project)
    if (affectedTasks != null) {
      if (affectedTasks.contains("all")) {
        return "${t.project.path}:${t.name}"
      }
      if (affectedTasks.contains(t.name)) {
        return "${t.project.path}:${t.name}"
      }
    }

    t.taskDependencies.each { queue.addAll(it.getDependencies(t)) }
  }
  return null
}

List<File> getChangedFiles(String baseRef, String newRef) {
  final stdout = new StringBuilder()
  final stderr = new StringBuilder()
  final proc = "git diff --name-only ${baseRef}..${newRef}".execute()
  proc.consumeProcessOutput(stdout, stderr)
  proc.waitForOrKill(1000)
  assert proc.exitValue() == 0, "git diff command failed, stderr: ${stderr}"
  def out = stdout.toString().trim()
  if (out.isEmpty()) {
    return []
  }
  logger.debug("git diff output: ${out}")
  return out.split("\n").collect {
    new File(rootProject.projectDir, it.trim())
  }
}

rootProject.ext {
  useGitChanges = false
}

if (rootProject.hasProperty("gitBaseRef")) {
  final String baseRef = rootProject.property("gitBaseRef")
  final String newRef = rootProject.hasProperty("gitNewRef") ? rootProject.property("gitNewRef") : "HEAD"

  rootProject.ext {
    it.changedFiles = getChangedFiles(baseRef, newRef)
    useGitChanges = true
  }

  final ignoredFiles = fileTree(rootProject.projectDir) {
    include '.gitignore', '.editorconfig'
    include '*.md', '**/*.md'
    include 'gradlew', 'gradlew.bat', 'mvnw', 'mvnw.cmd'
    include 'NOTICE'
    include 'static-analysis.datadog.yml'
  }
  rootProject.changedFiles.each { File f ->
    if (ignoredFiles.contains(f)) {
      logger.warn("Ignoring changed file: ${relativeToGitRoot(f)}")
    }
  }
  rootProject.changedFiles = rootProject.changedFiles.findAll { !ignoredFiles.contains(it) }

  final globalEffectFiles = fileTree(rootProject.projectDir) {
    include '.circleci/**'
    include 'build.gradle'
    include 'gradle/**'
  }

  for (File f in rootProject.changedFiles) {
    if (globalEffectFiles.contains(f)) {
      logger.warn("Global effect change: ${relativeToGitRoot(f)} (no tasks will be skipped)")
      rootProject.useGitChanges = false
      break
    }
  }

  if (rootProject.useGitChanges) {
    logger.warn("Git change tracking is enabled: ${baseRef}..${newRef}")

    final projects = subprojects.sort { a, b -> b.projectDir.path.length() <=> a.projectDir.path.length() }
    Map<Project, Set<String>> _affectedProjects = [:]
    // Path prefixes mapped to affected task names. A file not matching any of these prefixes will affect all tasks in
    // the project ("all" can be used a task name to explicitly state the same). Only the first matching prefix is used.
    final List<Map<String, String>> matchers = [
      [prefix: 'src/testFixtures/', task: 'testFixturesClasses'],
      [prefix: 'src/test/', task: 'testClasses'],
      [prefix: 'src/jmh/', task: 'jmhCompileGeneratedClasses']
    ]
    for (File f in rootProject.changedFiles) {
      Project p = projects.find { f.toString().startsWith(it.projectDir.path + "/") }
      if (p == null) {
        logger.warn("Changed file: ${relativeToGitRoot(f)} at root project (no task will be skipped)")
        rootProject.useGitChanges = false
        break
      }
      // Make sure path separator is /
      final relPath = Paths.get(p.projectDir.path).relativize(f.toPath()).collect { it.toString() }.join('/')
      final String task = matchers.find { relPath.startsWith(it.prefix) }?.task ?: "all"
      logger.warn("Changed file: ${relativeToGitRoot(f)} in project ${p.path} (${task})")
      _affectedProjects.computeIfAbsent(p, { new HashSet<String>() }).add(task)
    }
    rootProject.ext {
      it.affectedProjects = _affectedProjects
    }
  }
}

def testAggregate(String baseTaskName, includePrefixes, excludePrefixes, boolean forceCoverage = false) {
  def createRootTask = { String rootTaskName, String subProjTaskName ->
    def coverage = forceCoverage || rootProject.hasProperty("checkCoverage")
    tasks.register(rootTaskName) { aggTest ->
      subprojects { subproject ->
        if (subproject.property("activePartition") && includePrefixes.any { subproject.path.startsWith(it) } && !excludePrefixes.any { subproject.path.startsWith(it) }) {
          Task testTask = subproject.tasks.findByName(subProjTaskName)
          boolean isAffected = true
          if (testTask != null) {
            if (rootProject.useGitChanges) {
              final fileTrigger = isAffectedBy(testTask, rootProject.property("affectedProjects"))
              if (fileTrigger != null) {
                logger.warn("Selecting ${subproject.path}:${subProjTaskName} (triggered by ${fileTrigger})")
              } else {
                logger.warn("Skipping ${subproject.path}:${subProjTaskName} (not affected by changed files)")
                isAffected = false
              }
            }
            if (isAffected) {
              aggTest.dependsOn(testTask)
            }
          }
          if (isAffected && coverage) {
            def coverageTask = subproject.tasks.findByName("jacocoTestReport")
            if (coverageTask != null) {
              aggTest.dependsOn(coverageTask)
            }
            coverageTask = subproject.tasks.findByName("jacocoTestCoverageVerification")
            if (coverageTask != null) {
              aggTest.dependsOn(coverageTask)
            }
          }
        }
      }
    }
  }

  createRootTask "${baseTaskName}Test", 'allTests'
  createRootTask "${baseTaskName}LatestDepTest", 'allLatestDepTests'
  createRootTask "${baseTaskName}Check", 'check'
}

testAggregate("smoke", [":dd-smoke-tests"], [])
testAggregate("instrumentation", [":dd-java-agent:instrumentation"], [])
testAggregate("profiling", [":dd-java-agent:agent-profiling"], [])
testAggregate("debugger", [":dd-java-agent:agent-debugger"], [], true)
testAggregate("base", [":"], [
  ":dd-java-agent:instrumentation",
  ":dd-smoke-tests",
  ":dd-java-agent:agent-profiling",
  ":dd-java-agent:agent-debugger"
])
