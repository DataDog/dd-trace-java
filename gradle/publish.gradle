apply plugin: 'maven-publish'
apply plugin: 'signing'

/**
 * Proper publishing requires the following environment variables:
 * SONATYPE_USERNAME
 * SONATYPE_PASSWORD
 * GPG_PRIVATE_KEY
 * GPG_PASSWORD
 */

apply from: "$rootDir/gradle/version.gradle"
apply from: "$rootDir/gradle/maven-pom.gradle"

def isGitlabCI = System.getenv("GITLAB_CI") != null

// define in ~/.gradle/gradle.properties to override for testing
def forceLocal = project.hasProperty('forceLocal') && forceLocal
assert !forceLocal || forceLocal != isGitlabCI

publishing {
  publications {
    maven(MavenPublication) { MavenPublication publication ->
      if (project.plugins.hasPlugin('com.github.johnrengelman.shadow')) {
        publication.artifact(project.tasks.shadowJar)

        // Required by Maven Central:
        publication.artifact sourcesJar
        publication.artifact javadocJar

        afterEvaluate {
          /**
           * Add all the project dependencies, but set as compile instead of runtime
           * (which is what project.shadow.component(publication) would use).
           */
          publication.pom { org.gradle.api.publish.maven.MavenPom pom ->
            pom.withXml { xml ->
              def dependenciesNode = xml.asNode().appendNode('dependencies')

              project.configurations.api.allDependencies.each {
                if ((it instanceof ProjectDependency) || !(it instanceof SelfResolvingDependency)) {
                  def dependencyNode = dependenciesNode.appendNode('dependency')
                  dependencyNode.appendNode('groupId', it.group)
                  dependencyNode.appendNode('artifactId', it.name)
                  dependencyNode.appendNode('version', it.version)
                  dependencyNode.appendNode("scope", "compile")
                }
              }
            }
          }
        }
      } else {
        publication.from components.java
      }
    }
  }
}

if (project.plugins.hasPlugin('com.github.johnrengelman.shadow')) {
  // Disable gradle module metadata to avoid publishing contradictory info.
  tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
  }
}

signing {
  useInMemoryPgpKeys(System.getenv("GPG_PRIVATE_KEY"), System.getenv("GPG_PASSWORD"))
  sign publishing.publications.maven
}

tasks.withType(Sign).configureEach {
  // Only sign in Gitlab CI
  onlyIf { isGitlabCI || (System.getenv("GPG_PRIVATE_KEY") != null && System.getenv("GPG_PASSWORD") != null) }
}

/**
 * State assertions below...
 */

gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
  if (taskGraph.hasTask(publish) || taskGraph.hasTask("publishToSonatype")) {
    assert project.findProperty("removeJarVersionNumbers") != true
    if (taskGraph.hasTask("publishToSonatype")) {
      assert System.getenv("SONATYPE_USERNAME") != null
      assert System.getenv("SONATYPE_PASSWORD") != null
      if (isCI) {
        assert System.getenv("GPG_PRIVATE_KEY") != null
        assert System.getenv("GPG_PASSWORD") != null
      }
    }
  }
}

afterEvaluate {
  assert description: "Project $project.path is published, must have a description"
}

configurations {
  configurations {
    all {
      incoming.afterResolve {
        dependencies.withType(ModuleDependency) { dep ->
          excludeRules.each {
            if ([it.group, it.module].any { it == null }) {
              throw new InvalidUserDataException("Partial exclude for dependency '$dep.group:$dep.name:$dep.version' of $project: [group: $it.group, module: $it.module]\n\nExcludes must specify both group and module and neither can be '*'.")
            }
          }
        }
      }
    }
  }
}

tasks.withType(AbstractPublishToMaven).configureEach {
  rootProject.subprojects {
    mustRunAfter tasks.matching { it instanceof VerificationTask }
  }
}
