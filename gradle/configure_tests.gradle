import java.time.Duration
import java.time.temporal.ChronoUnit

def isTestingInstrumentation(Project project) {
  return [
    "junit-4.10",
    "cucumber-junit-4",
    "munit-junit-4",
    "junit-5.3",
    "cucumber-junit-5",
    "spock-junit-5",
    "testng-6",
    "testng-7",
    "karate",
    "scalatest"
  ].contains(project.name)
}

def forkedTestLimit = gradle.sharedServices.registerIfAbsent("forkedTestLimit", BuildService) {
  maxParallelUsages = 2
}

// Force timeout after 9 minutes (CircleCI defaults will fail after 10 minutes without output)
def testTimeoutDuration = Duration.of(9, ChronoUnit.MINUTES)

testing {
  suites.configureEach {
    // Use JUnit 5 to run tests
    useJUnitJupiter()
  }
}

// Go through the Test tasks and configure them
tasks.withType(Test).configureEach {
  // All tests must complete within 15 minutes.
  // This value is quite big because with lower values (3 mins) we were experiencing large number of false positives
  timeout = Duration.ofMinutes(15)

  // Disable all tests if skipTests property was specified
  onlyIf { !project.rootProject.hasProperty("skipTests") }

  // Enable force rerun of tests with -Prerun.tests.${project.name}
  outputs.upToDateWhen {
    !project.rootProject.hasProperty("rerun.tests.${project.name}")
  }

  // Avoid executing classes used to test testing frameworks instrumentation
  if (isTestingInstrumentation(project)) {
    exclude "**/TestSucceed*"
    exclude "**/TestFailed*"
    exclude "**/TestFailedWithSuccessPercentage*"
    exclude "**/TestError*"
    exclude "**/TestSkipped*"
    exclude "**/TestSkippedClass*"
    exclude "**/TestInheritance*", "**/BaseTestInheritance*"
    exclude "**/TestFactory*"
    exclude "**/TestParameterized*"
    exclude "**/TestRepeated*"
    exclude "**/TestTemplate*"
    exclude "**/TestDisableTestTrace*"
    exclude "**/TestAssumption*"
    exclude "**/TestParameterized*"
  }

  // Split up tests that want to run forked in their own separate JVM for generated tasks
  if (name.startsWith("forkedTest") || name.endsWith("ForkedTest")) {
    setExcludes([])
    setIncludes(["**/*ForkedTest*"])
    jvmArgs += ["-Xms256M", "-Xmx256M"]
    forkEvery 1
    // Limit the number of concurrent forked tests
    usesService(forkedTestLimit)
    onlyIf { !project.rootProject.hasProperty("skipForkedTests") }
  } else {
    exclude("**/*ForkedTest*")
  }

  timeout = testTimeoutDuration
}

tasks.named('check').configure { it.dependsOn tasks.withType(Test) }

// XXX: Some projects apply configure_tests.gradle twice, so we need to avoid registering the same tasks twice.
//      But also avoid using maybeCreate, which will realize the task and ruin configuration avoidance.
void maybeRegister(String name, Action<? extends Task> configurationAction) {
  try {
    tasks.register(name)
  } catch (InvalidUserDataException ignored) { }
  tasks.named(name).configure(configurationAction)
}
maybeRegister('allTests') {
  it.dependsOn tasks.withType(Test).matching { !it.name.containsIgnoreCase('latest') && it.name != 'traceAgentTest' }
}
maybeRegister('allLatestDepTests') {
  it.dependsOn tasks.withType(Test).matching { it.name.containsIgnoreCase('latest') }
}

// Setup flaky tests jobs. Done in afterEvaluate so that it applies to latestDepTest.
project.afterEvaluate {
  tasks.withType(Test).configureEach {
    // Flaky tests management for JUnit 5
    testFramework {
      if (it instanceof JUnitPlatformOptions) {
        if (project.rootProject.hasProperty("skipFlakyTests")) {
          excludeTags "flaky"
        } else if (project.rootProject.hasProperty("runFlakyTests")) {
          includeTags "flaky"
        }
      }
    }

    // Flaky tests management for Spock
    if (project.rootProject.hasProperty("skipFlakyTests")) {
      jvmArgs += ["-Drun.flaky.tests=false"]
    } else if (project.rootProject.hasProperty("runFlakyTests")) {
      jvmArgs += ["-Drun.flaky.tests=true"]
    }
  }
}

if (!project.property("activePartition")) {
  project.afterEvaluate {
    tasks.withType(Test).configureEach {
      enabled = false
    }
  }
}

logger.debug("Will apply configure_tests.gradle for ${project.path} (done)")
