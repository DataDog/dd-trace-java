import java.time.Duration
import java.time.temporal.ChronoUnit

def isTestingInstrumentation(Project project) {
  return ["junit-4.10", "testng-6.4", "junit-5.3"].contains(project.name)
}

def forkedTestLimit = gradle.sharedServices.registerIfAbsent("forkedTestLimit", BuildService) {
  maxParallelUsages = 2
}

// Force timeout after 9 minutes (CircleCI defaults will fail after 10 minutes without output)
def testTimeoutDuration = Duration.of(9, ChronoUnit.MINUTES)

// Go through the Test tasks and configure them
tasks.withType(Test).configureEach {
  if (project.findProperty("enableJunitPlatform") == true) {
    useJUnitPlatform()
  }

  // All tests must complete within 15 minutes.
  // This value is quite big because with lower values (3 mins) we were experiencing large number of false positives
  timeout = Duration.ofMinutes(15)

  // Disable all tests if skipTests property was specified
  onlyIf { !project.rootProject.hasProperty("skipTests") }

  // Enable force rerun of tests with -Prerun.tests.${project.name}
  outputs.upToDateWhen {
    !project.rootProject.hasProperty("rerun.tests.${project.name}")
  }

  // Avoid executing classes used to test testing frameworks instrumentation
  if (isTestingInstrumentation(project)) {
    exclude "**/TestSucceed*"
    exclude "**/TestFailed*"
    exclude "**/TestFailedWithSuccessPercentage*"
    exclude "**/TestError*"
    exclude "**/TestSkipped*"
    exclude "**/TestSkippedClass*"
    exclude "**/TestInheritance*", "**/BaseTestInheritance*"
    exclude "**/TestFactory*"
    exclude "**/TestParameterized*"
    exclude "**/TestRepeated*"
    exclude "**/TestTemplate*"
    exclude "**/TestDisableTestTrace*"
    exclude "**/TestAssumption*"
    exclude "**/TestParameterized*"
  }

  // Split up tests that want to run forked in their own separate JVM for generated tasks
  if (name.startsWith("forkedTest") || name.endsWith("ForkedTest")) {
    setExcludes([])
    setIncludes(["**/*ForkedTest*"])
    jvmArgs += ["-Xms256M", "-Xmx256M"]
    forkEvery 1
    // Limit the number of concurrent forked tests
    usesService(forkedTestLimit)
    onlyIf { !project.rootProject.hasProperty("skipForkedTests") }
  } else {
    exclude("**/*ForkedTest*")
  }

  timeout = testTimeoutDuration
}

// Setup flaky tests jobs. Done in afterEvaluate so that it applies to latestDepTest.
project.afterEvaluate {
  tasks.withType(Test).configureEach {
    // JUnit 5 support
    if (project.findProperty("enableJunitPlatform") == true) {
      useJUnitPlatform {
        if (project.rootProject.hasProperty("skipFlakyTests")) {
          excludeTags "flaky"
        } else if (project.rootProject.hasProperty("runFlakyTests")) {
          includeTags "flaky"
        }
      }
    }

    // Spock support
    if (project.rootProject.hasProperty("skipFlakyTests")) {
      jvmArgs += ["-Drun.flaky.tests=false"]
    } else if (project.rootProject.hasProperty("runFlakyTests")) {
      jvmArgs += ["-Drun.flaky.tests=true"]
    }
  }
}

final shouldUseTaskPartitions = project.rootProject.hasProperty("taskPartitionCount") && project.rootProject.hasProperty("taskPartition")
if (shouldUseTaskPartitions) {
  final taskPartitionCount = project.rootProject.property("taskPartitionCount") as int
  final taskPartition = project.rootProject.property("taskPartition") as int
  project.afterEvaluate {
    tasks.withType(Test).configureEach {
      final currentTaskPartition = it.project.path.hashCode() % taskPartitionCount
      if (currentTaskPartition != taskPartition) {
        enabled = false
      }
    }
  }
}
