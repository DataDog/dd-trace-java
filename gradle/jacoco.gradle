apply plugin: "jacoco"

jacoco {
  toolVersion = "0.8.5"
}

tasks.register('forkedTestJacocoData') {
  dependsOn "forkedTest"

  doLast {
    if (file("$buildDir/jacoco/forkedTest.exec").exists()) {
      jacocoTestReport {
        executionData(forkedTest)
      }
      jacocoTestCoverageVerification {
        executionData(forkedTest)
      }
    }
  }
}

tasks.named('jacocoTestReport').configure {
  dependsOn('test', 'forkedTestJacocoData')
  reports {
    xml.required = true
    csv.required = false
    html.destination file("${buildDir}/reports/jacoco/")
  }
}

if (!project.ext.hasProperty("excludedClassesCoverage")) {
  project.ext.excludedClassesCoverage = []
}

if (!project.ext.hasProperty("excludedClassesBranchCoverage")) {
  project.ext.excludedClassesBranchCoverage = []
}

if (!project.ext.hasProperty("excludedClassesInstructionCoverage")) {
  project.ext.excludedClassesInstructionCoverage = []
}

// defaults can be overridden per project:
project.ext.minimumBranchCoverage = 0.9
project.ext.minimumInstructionCoverage = 0.9

afterEvaluate {
  tasks.withType(Test).configureEach {
    jacoco {
      // Make sure that excluded classes do not get jacoco instrumentation applied since it may confuse apm agent in some cases
      excludes = project.excludedClassesCoverage
    }
  }

  jacocoTestCoverageVerification {
    violationRules {
      rule {
        element = 'CLASS'
        excludes = project.excludedClassesBranchCoverage + project.excludedClassesCoverage
        limit {
          counter = 'BRANCH'
          minimum = project.minimumBranchCoverage
        }
      }

      rule {
        element = 'CLASS'
        excludes = project.excludedClassesInstructionCoverage + project.excludedClassesCoverage
        limit {
          counter = 'INSTRUCTION'
          minimum = project.minimumInstructionCoverage
        }
      }
    }

    // Disable verification if skipTests property was specified
    onlyIf { !project.rootProject.hasProperty("skipTests") }
  }

  tasks.named('jacocoTestCoverageVerification').configure {
    dependsOn('jacocoTestReport')
  }
  tasks.named('check').configure {
    dependsOn('jacocoTestCoverageVerification')
  }
}
