tasks.register("artifacts") {
  group = "Help"
  description = "Displays the artifacts associated with each configuration of " + project
  doFirst {
    configurations.findAll().each { config ->
      println "${config}:"
      config.allArtifacts.getFiles().each { file ->
        println " " + file
      }
      println ' '
    }
  }
}

tasks.register('generateTries', JavaExec) {
  group = ""
  description = ""
  def trieFiles = fileTree(dir: 'src/main/java', include: '**/*.trie')
  def javaFiles = trieFiles.collect { new File(it.parent, it.name.capitalize().replace('.trie', 'Trie.java')) }
  inputs.files(trieFiles)
  outputs.files(javaFiles)
  mainClass = 'datadog.trace.util.StringTrie$Generator'
  classpath = sourceSets.main.compileClasspath
  args = [trieFiles.dir, trieFiles.dir] + trieFiles
}

/** Find a random, reusable port. */
ext.randomOpenPort = {
  ->
  final ServerSocket socket
  try {
    socket = new ServerSocket(0)
    socket.setReuseAddress(true)
    socket.close()
    return socket.getLocalPort()
  } catch (final IOException ioe) {
    ioe.printStackTrace()
    return -1
  }
}
