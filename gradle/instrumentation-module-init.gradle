
apply plugin: 'instrument'
apply plugin: 'muzzle'

configurations {
  instrumentPluginClasspath {
    visible = false
    canBeConsumed = false
    canBeResolved = true
  }
}

instrument {
  plugins = [
    'datadog.trace.agent.tooling.muzzle.MuzzleGradlePlugin',
    'datadog.trace.agent.tooling.bytebuddy.NewTaskForGradlePlugin',
    'datadog.trace.agent.tooling.bytebuddy.reqctx.RewriteRequestContextAdvicePlugin',
  ]
}

tasks.withType(Javadoc).configureEach { enabled = false }

afterEvaluate {
  String jdkCompile = null
  if (project.hasProperty('minJavaVersionForTests') && project.getProperty('minJavaVersionForTests') != JavaVersion.VERSION_1_8) {
    def version = JavaVersion.toVersion(project.getProperty('minJavaVersionForTests'))
    def name = "java$version.majorVersion"
    jdkCompile = "main_${name}Implementation"
  }
  dependencies {
    // Apply common dependencies for instrumentation.
    implementation project(':dd-trace-api')
    implementation project(':dd-java-agent:agent-tooling')
    implementation libs.bytebuddy
    if (jdkCompile) {
      "$jdkCompile" project(':dd-trace-api')
      "$jdkCompile" project(':dd-java-agent:agent-tooling')
      "$jdkCompile" libs.bytebuddy
    }

    annotationProcessor libs.autoservice.processor
    compileOnly libs.autoservice.annotation

    // Include instrumentations instrumenting core JDK classes to ensure interoperability with other instrumentation
    testImplementation project(':dd-java-agent:instrumentation:java-concurrent')
    testImplementation project(':dd-java-agent:instrumentation:java-concurrent:java-completablefuture')
    // FIXME: we should enable this, but currently this fails tests for google http client
    //testImplementation project(':dd-java-agent:instrumentation:http-url-connection')
    testImplementation project(':dd-java-agent:instrumentation:classloading')

    testImplementation project(':dd-java-agent:testing')
    testAnnotationProcessor libs.autoservice.processor
    testCompileOnly libs.autoservice.annotation

    instrumentPluginClasspath project(path: ':dd-java-agent:agent-tooling', configuration: 'instrumentPluginClasspath')
  }


  project.testing {
    suites.configureEach {
      // SpockRunner that we use to run agent tests cannot be properly ported to JUnit 5,
      // since the framework does not provide the hooks / extension points
      // that can be used to shadow the tested class.

      // In order to mitigate this, SpockRunner extends JUnitPlatform,
      // which is a JUnit 4 runner that allows executing JUnit 5 tests in a JUnit 4 environment
      // (i.e. running them as JUnit 4 tests).

      // So even though Spock 2 tests run on top of JUnit 5,
      // we execute them in "compatibility mode" so that SpockRunner could shadow the test class
      // See https://junit.org/junit5/docs/current/user-guide/#running-tests-junit-platform-runner for more details.
      useJUnit()
    }
  }

  project.tasks.withType(Test).configureEach { subTask ->
    // The `forkedTest` task is not a proper test suite, so it has to be configured directly
    if (subTask.name == 'forkedTest') {
      // See SpockRunner comment above
      useJUnit()
    }

    if (subTask.name in ['latestDepTest', 'latestDepForkedTest']) {
      subTask.jvmArgs '-Dtest.dd.latestDepTest=true'
    }
  }
}
