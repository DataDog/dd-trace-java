.base_job_onboarding_tests:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/test-infra-definitions/runner:a58cc31c
  tags: ["arch:amd64"]
  before_script:
    # Setup AWS Credentials for dd-trace-rb.
    - mkdir -p ~/.aws
    - aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.agent-qa-profile --with-decryption --query "Parameter.Value" --out text >> ~/.aws/config
    - export DD_API_KEY_ONBOARDING=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.dd-api-key-onboarding --with-decryption --query "Parameter.Value" --out text)
    - export DD_APP_KEY_ONBOARDING=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.dd-app-key-onboarding --with-decryption --query "Parameter.Value" --out text)
    - export ONBOARDING_AWS_INFRA_SUBNET_ID=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.aws-infra-subnet-id --with-decryption --query "Parameter.Value" --out text)
    - export ONBOARDING_AWS_INFRA_SECURITY_GROUPS_ID=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.aws-infra-securiy-groups-id --with-decryption --query "Parameter.Value" --out text)
    - export PULUMI_CONFIG_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.pulumi-config-passphrase --with-decryption --query "Parameter.Value" --out text) 
    #Install plugins for PULUMI you need connect to gh. Sometimes this problem arises: GitHub rate limit exceeded
    - export GITHUB_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.gh-token --with-decryption --query "Parameter.Value" --out text) 
    #Avoid dockerhub rate limits
    - export DOCKER_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.docker-login --with-decryption --query "Parameter.Value" --out text) 
    - export DOCKER_LOGIN_PASS=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.docker-login-pass --with-decryption --query "Parameter.Value" --out text) 

    - export AWS_PROFILE=agent-qa-ci
    - pulumi login --local #"s3://dd-pulumi-state?region=us-east-1&awssdk=v2&profile=$AWS_PROFILE"
    - pulumi plugin install resource command 0.7.2
    - pulumi plugin install resource aws 5.41.0

  after_script:
    - echo "After onboarding script"
    - cd system-tests
    - mkdir -p reports
    - cp -R logs_*/ reports/
  
  artifacts:
      when: always
      paths:
        - system-tests/reports/

onboarding_tests:
  extends: .base_job_onboarding_tests
  stage: single-step-instrumentation-tests
  needs: [package, package-arm, package_onboarding_tests_oci]
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "master"
      when: on_success
    - when: on_success # TODO: remove
  allow_failure: false
  variables:
    TEST_LIBRARY: java
    ONBOARDING_FILTER_ENV: prod
  parallel:
      matrix:
        - ONBOARDING_FILTER_WEBLOG: [test-app-java]
          SCENARIO: [SIMPLE_HOST_AUTO_INJECTION]
        - ONBOARDING_FILTER_WEBLOG: [test-app-java-container,test-app-java-buildpack,test-app-java-alpine]
          SCENARIO: [SIMPLE_CONTAINER_AUTO_INJECTION]
        - ONBOARDING_FILTER_WEBLOG: [test-app-java,test-app-java-container,test-app-java-buildpack,test-app-java-alpine]
          SCENARIO: [INSTALLER_AUTO_INJECTION]
  script:
    - git clone https://git@github.com/DataDog/system-tests.git system-tests
    - cp packaging/*.rpm system-tests/binaries
    - cp packaging/*.deb system-tests/binaries
    - cp -r packaging/oci_package system-tests/binaries/library
    - ls system-tests/binaries
    - ls system-tests/binaries/library #Â TODO: remove
    - cd system-tests
    - ./build.sh -i runner
    - timeout 2700s ./run.sh $SCENARIO --vm-weblog ${ONBOARDING_FILTER_WEBLOG} --vm-env prod --vm-library ${TEST_LIBRARY} --vm-provider aws --vm-skip-branches ubuntu18_amd64

package_onboarding_tests_oci:
  image: registry.ddbuild.io/ci/auto_inject/gitlab:current
  stage: single-step-instrumentation-tests
  needs: [package-oci]
  tags: ["runner:main"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "master"
      when: on_success
    - when: on_success # TODO: remove
  artifacts:
    paths: 
      - packaging/oci_package
  before_script:
    # Install datadog-packages CLI tool
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/".insteadOf "https://github.com/DataDog/"
    - go env -w GOPRIVATE=github.com/DataDog/*
    - go install github.com/DataDog/datadog-packages/cmd/datadog-package@latest
  script:
    - cd packaging
    - >
      if compgen -G "*${PACKAGE_FILTER}*.tar" > /dev/null; then
        export RAW_FLAVOR=$(ls *${PACKAGE_FILTER}*.tar | head -n1)
        export FLAVOR=${RAW_FLAVOR%%-$VERSION*}
        datadog-package merge *${PACKAGE_FILTER}*.tar
        mkdir oci_package
        tar -xf merged.tar -C oci_package
      fi
    - ls oci_package
