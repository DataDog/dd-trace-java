.macrobenchmarks:
  stage: macrobenchmarks
  rules:
    - if: $POPULATE_CACHE
      when: never
    - if: ($NIGHTLY_BENCHMARKS || $CI_PIPELINE_SOURCE != "schedule") && $CI_COMMIT_REF_NAME == "master"
      when: always
    - when: manual
      allow_failure: true
  tags: ["runner:apm-k8s-same-cpu"]
  needs: ["build"]
  interruptible: true
  timeout: 1h
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/benchmarking-platform:dd-trace-java-petclinic
  script:
    - git clone --branch java/petclinic https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform platform && cd platform
    - ./steps/run-benchmarks.sh
  artifacts:
    name: "artifacts"
    when: always
    paths:
      - platform/artifacts/
    expire_in: 3 months
  variables:
    FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY: "true"

    K6_OPTIONS_WARMUP_RATE: 2000
    K6_OPTIONS_WARMUP_DURATION: 5m
    K6_OPTIONS_WARMUP_GRACEFUL_STOP: 10s
    K6_OPTIONS_WARMUP_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_WARMUP_MAX_VUS: 4

    K6_OPTIONS_NORMAL_OPERATION_RATE: 1500
    K6_OPTIONS_NORMAL_OPERATION_DURATION: 10m
    K6_OPTIONS_NORMAL_OPERATION_GRACEFUL_STOP: 10s
    K6_OPTIONS_NORMAL_OPERATION_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_NORMAL_OPERATION_MAX_VUS: 4

    K6_OPTIONS_HIGH_LOAD_RATE: 4000
    K6_OPTIONS_HIGH_LOAD_DURATION: 5m
    K6_OPTIONS_HIGH_LOAD_GRACEFUL_STOP: 10s
    K6_OPTIONS_HIGH_LOAD_PRE_ALLOCATED_VUS: 4
    K6_OPTIONS_HIGH_LOAD_MAX_VUS: 4
  retry:
    max: 2
    when:
      - unknown_failure
      - data_integrity_failure
      - runner_system_failure
      - scheduler_failure
      - api_failure

baseline:
  extends: .macrobenchmarks
  variables:
    BP_BENCHMARKS_CONFIGURATION: baseline
    TRACER_OPTS: -Ddd.service=bp-java-petclinic
    JAVA_OPTS: -javaagent:/app/memcheck/stability-testing-memwatch.jar -Xmx128M

only-tracing:
  extends: .macrobenchmarks
  variables:
    BP_BENCHMARKS_CONFIGURATION: only-tracing
    TRACER_OPTS: -javaagent:/app/dd-java-agent.jar -Ddd.env=${BP_BENCHMARKS_CONFIGURATION} -Ddd.service=bp-java-petclinic
    JAVA_OPTS: -javaagent:/app/memcheck/stability-testing-memwatch.jar -Xmx128M

otel-latest:
  extends: .macrobenchmarks
  variables:
    BP_BENCHMARKS_CONFIGURATION: otel-latest
    TRACER_OPTS: -javaagent:/app/otel-java-agent.jar -Ddd.env=otel-latest -Ddd.service=bp-java-petclinic
    JAVA_OPTS: -javaagent:/app/memcheck/stability-testing-memwatch.jar -Xmx128M

.check-threshold-breaches:
  stage: gate
  when: always
  tags: ["arch:amd64"]
  image: registry.ddbuild.io/images/benchmarking-platform-tools-ubuntu:latest
  artifacts:
    name: "artifacts"
    when: always
    paths:
      - platform/artifacts/
    expire_in: 3 months

check-warning-breaches:
  extends: .check-threshold-breaches
  script:
    - cd platform && (git init && git remote add origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform && git pull origin java/petclinic)
    - bp-runner bp-runner.fail-on-breach.warning.yml

check-slo-breaches:
  extends: .check-threshold-breaches
  script:
    - cd platform && (git init && git remote add origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/DataDog/benchmarking-platform && git pull origin java/petclinic)
    - bp-runner bp-runner.fail-on-breach.slos.yml

# Taken from https://github.com/DataDog/slack-notifier/blob/master/gitlab-pipeline-templates/v3-sdm/template.yml
.slack-notifier-base:
  stage: notify
  image: registry.ddbuild.io/slack-notifier:v27936653-9a2a7db-sdm-gbi-jammy@sha256:c9d1145319d1904fa72ea97904a15200d3cb684324723f9e1700bc02cc85065c
  tags: [ "arch:amd64" ]
  before_script:
    - if [[ $GITLAB_USER_LOGIN = "codesync" || $GITLAB_USER_LOGIN = "ddci-service-account" ]]; then EMAIL=$(git show -s --format="%ae" HEAD); else EMAIL=$GITLAB_USER_EMAIL; fi
    - SLACK_AUTHOR=$(echo $EMAIL | email2slackid || echo "")
    - if [ -z "$SLACK_AUTHOR" ]; then echo "author not found or unsubscribed"; fi
    - BUILD_URL="$CI_PROJECT_URL/pipelines/$CI_PIPELINE_ID"

notify-slo-breaches:
  extends: .slack-notifier-base
  needs: ["check-slo-breaches"]
  when: on_failure
  script:
    # Ideally add the SLACK_AUTHOR once dd-trace-py can access SDS: https://datadoghq.atlassian.net/wiki/spaces/SDA/pages/3175317505/Accessing+SDS+data+externally+via+Graphql
    - 'MESSAGE_TEXT=":x: $CI_COMMIT_REF_NAME - Performance SLOs in $CI_PROJECT_NAME were breached in <$BUILD_URL|$CI_PIPELINE_ID>. Please look into it."'
    - postmessage "pre-release-gate-prototype" "$MESSAGE_TEXT"

notify-warning-breaches:
  extends: .slack-notifier-base
  needs: ["check-warning-breaches"]
  when: on_failure
  script:
    # Ideally add the SLACK_AUTHOR once dd-trace-py can access SDS: https://datadoghq.atlassian.net/wiki/spaces/SDA/pages/3175317505/Accessing+SDS+data+externally+via+Graphql
    - 'MESSAGE_TEXT=":warning: $CI_COMMIT_REF_NAME - Performance SLOs in $CI_PROJECT_NAME are about to be breached. A warning threshold in <$BUILD_URL|$CI_PIPELINE_ID> was triggered. Please look into it."'
    - postmessage "pre-release-gate-prototype" "$MESSAGE_TEXT"