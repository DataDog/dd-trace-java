check-ci-visibility-label:
  stage: publish
  image: registry.ddbuild.io/images/dd-octo-sts-ci-base:2025.06-1
  tags: [ "arch:amd64" ]
  needs: [ publish-artifacts-to-s3 ]
  id_tokens:
    DDOCTOSTS_ID_TOKEN:
      aud: dd-octo-sts
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH !~ /^(master|release\/)/'
      when: on_success
    - when: never
  before_script:
    - dd-octo-sts version
    - dd-octo-sts debug --scope DataDog/dd-trace-java --policy self.gitlab.github-access.read
    - dd-octo-sts token --scope DataDog/dd-trace-java --policy self.gitlab.github-access.read > github-token.txt
    - gh auth login --with-token < github-token.txt
  script:
    - |
      set +e
      PR_NUMBER=$(gh pr list --repo DataDog/dd-trace-java --head "${CI_COMMIT_BRANCH}" --state open --json number --jq '.[0].number')
      EXIT_CODE=$?
      set -e
      
      if [ $EXIT_CODE -ne 0 ] || [ -z "$PR_NUMBER" ]; then
        echo "No open PR found for branch ${CI_COMMIT_BRANCH}"
        exit 1
      fi
      
      echo "Found PR #${PR_NUMBER}"
      
      LABELS=$(gh pr view "${PR_NUMBER}" --repo DataDog/dd-trace-java --json labels --jq '.labels[].name')
      
      if echo "$LABELS" | grep -q "comp: ci visibility"; then
        echo "Label 'comp: ci visibility' found on PR #${PR_NUMBER}"
        exit 0
      else
        echo "Label 'comp: ci visibility' not found on PR #${PR_NUMBER}"
        exit 1
      fi
  after_script:
    - dd-octo-sts revoke -t $(cat github-token.txt) || true
  allow_failure: true
  retry:
    max: 2
    when: always

run-ci-visibility-test-environment:
  stage: ci-visibility-tests
  needs:
    - job: check-ci-visibility-label
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH !~ /^(master|release\/)/'
      when: on_success
  trigger:
    project: DataDog/apm-reliability/test-environment
    branch: main
    strategy: depend
  variables:
    UPSTREAM_PACKAGE_JOB: build
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_BRANCH: $CI_COMMIT_BRANCH
    UPSTREAM_TAG: $CI_COMMIT_TAG
    UPSTREAM_COMMIT_AUTHOR: $CI_COMMIT_AUTHOR
    UPSTREAM_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA
    TRACER_LANG: java
    JAVA_TRACER_REF_TO_TEST: $CI_COMMIT_BRANCH

notify-ci-visibility-tests-triggered:
  stage: ci-visibility-tests
  image: registry.ddbuild.io/images/dd-octo-sts-ci-base:2025.06-1
  tags: [ "arch:amd64" ]
  needs:
    - job: check-ci-visibility-label
  id_tokens:
    DDOCTOSTS_ID_TOKEN:
      aud: dd-octo-sts
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH !~ /^(master|release\/)/'
      when: on_success
  before_script:
    - dd-octo-sts version
    - dd-octo-sts token --scope DataDog/dd-trace-java --policy self.gitlab.github-access.read > github-token.txt
    - gh auth login --with-token < github-token.txt
  script:
    - |
      # Install authanywhere - but suppress output
      wget binaries.ddbuild.io/dd-source/authanywhere/LATEST/authanywhere-linux-amd64 > /dev/null 2>&1
      chmod +x authanywhere-linux-amd64

      # Obtain PR number
      PR_NUMBER=$(gh pr list --repo DataDog/dd-trace-java --head "${CI_COMMIT_BRANCH}" --state open --json number --jq '.[0].number')
      
      if [ -z "$PR_NUMBER" ]; then
        echo "No PR found, skipping comment"
        exit 0
      fi
      
      # Prepare comment message
      COMMENT_MESSAGE="test message"
      
      # Create JSON payload (pr_num as integer, not string)
      JSON_PAYLOAD=$(jq -n \
        --argjson pr_num "$PR_NUMBER" \
        --arg message "$COMMENT_MESSAGE" \
        --arg header "Test Header" \
        --arg org "DataDog" \
        --arg repo "dd-trace-java" \
        '{pr_num: $pr_num, message: $message, header: $header, org: $org, repo: $repo}')
      
      # Debug: Print the JSON payload
      echo "JSON Payload:"
      echo "$JSON_PAYLOAD" | jq .
      
      # Post comment to PR
      echo "Posting comment to PR #${PR_NUMBER}"
      curl -v 'https://pr-commenter.us1.ddbuild.io/internal/cit/pr-comment' \
        -H "$(./authanywhere-linux-amd64)" \
        -H "Content-Type: application/json" \
        -X PATCH \
        -d "$JSON_PAYLOAD" || echo "Curl failed with exit code: $?"
  after_script:
    - dd-octo-sts revoke -t $(cat github-token.txt) || true
