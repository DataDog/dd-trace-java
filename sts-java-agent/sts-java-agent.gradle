plugins {
  id "com.github.johnrengelman.shadow" version "2.0.4"
}

description = 'sts-java-agent'

apply from: "${rootDir}/gradle/java.gradle"
apply from: "${rootDir}/gradle/publish.gradle"

jacocoTestReport.dependsOn ':sts-java-agent-ittests:test'

/*
 * Include subproject's shadowJar in the sts-java-agent jar.
 * Note jarname must end in .zip, or its classes will be on the classpath of
 * the sts-java-agent jar.
 */
def includeShadowJar(subproject, jarname) {
  def agent_project = project
  subproject.afterEvaluate {
    agent_project.processResources {
      from(subproject.tasks.shadowJar)
      rename {
        it.equals(subproject.shadowJar.archivePath.getName()) ?
          jarname :
          it
      }
    }
    agent_project.processResources.dependsOn subproject.tasks.shadowJar
    subproject.shadowJar {
      classifier null

      mergeServiceFiles()

      dependencies {
        exclude(dependency("org.projectlombok:lombok:$versions.lombok"))
      }

      // Prevents conflict with other SLF4J instances. Important for premain.
      relocate 'org.slf4j', 'stackstate.slf4j'
      // rewrite dependencies calling Logger.getLogger
      relocate 'java.util.logging.Logger', 'stackstate.trace.bootstrap.PatchLogger'

      if (!project.hasProperty("disableShadowRelocate") || !disableShadowRelocate) {
        // shadow OT impl to prevent casts to implementation
        relocate 'stackstate.trace.common', 'stackstate.trace.agent.common'
        relocate 'stackstate.opentracing', 'stackstate.trace.agent.ot'
      }
    }
  }
}

includeShadowJar(project(':sts-java-agent:agent-bootstrap'), 'agent-bootstrap.jar.zip')
includeShadowJar(project(':sts-java-agent:instrumentation'), 'agent-tooling-and-instrumentation.jar.zip')


jar {
  classifier = 'unbundled'

  manifest {
    attributes(
      "Main-Class": "stackstate.trace.agent.TracingAgent",
      "Agent-Class": "stackstate.trace.agent.TracingAgent",
      "Premain-Class": "stackstate.trace.agent.TracingAgent",
      "Can-Redefine-Classes": true,
      "Can-Retransform-Classes": true,
    )
  }
}

shadowJar {
  classifier null

  mergeServiceFiles()

  dependencies {
    exclude(dependency("org.projectlombok:lombok:$versions.lombok"))
  }
}

// We don't want bundled dependencies to show up in the pom.
modifyPom {
  dependencies.removeAll { true }
}
