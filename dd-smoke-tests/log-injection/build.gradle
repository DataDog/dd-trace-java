import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'com.gradleup.shadow'
}

apply from: "$rootDir/gradle/java.gradle"
description = 'Log injection Smoke Tests.'

configurations {
  register('jcl')

  def log4j1 = register('log4j1')
  register('log4j1Latest') {
    extendsFrom(log4j1.get())
  }

  def log4j2 = register('log4j2')
  register('log4j2Latest') {
    extendsFrom(log4j2.get())
  }

  def julLog4j2Bridge = register('julLog4j2Bridge')
  register('julLog4j2BridgeLatest') {
    extendsFrom(julLog4j2Bridge.get())
  }

  def jclLog4j2Bridge = register('jclLog4j2Bridge')
  register('jclLog4j2BridgeLatest') {
    extendsFrom(jclLog4j2Bridge.get())
  }

  def log4j1Log4j2Bridge = register('log4j1Log4j2Bridge')
  register('log4j1Log4j2BridgeLatest') {
    extendsFrom(log4j1Log4j2Bridge.get())
  }

  def log4j2Slf4jBridge = register('log4j2Slf4jBridge')
  register('log4j2Slf4jBridgeLatest') {
    extendsFrom(log4j2Slf4jBridge.get())
  }

  register('slf4jInterface')

  def logbackBackend = register('logbackBackend')
  register('logbackBackendLatest') {
    extendsFrom(logbackBackend.get())
  }

  register('slf4jJULBridge')
  register('slf4jJCLBridge')
  register('slf4jLog4j1Bridge')

  def slf4jLog4j2Bridge = register('slf4jLog4j2Bridge')
  register('slf4jLog4j2BridgeLatest') {
    extendsFrom(slf4jLog4j2Bridge.get())
  }

  register('julSlf4jBridge')
  register('jclSlf4jBridge')
  register('log4j1Slf4jBridge')

  register('slf4jSimpleBackend')

  register('jbossInterface')

  def jbossBackend = register('jbossBackend')
  register('jbossBackendLatest') {
    extendsFrom(jbossBackend.get())
  }

  register('floggerInterface')
  register('floggerJULBackend')
  register('floggerSlf4jBackend')
}

sourceSets {
  logging {
    resources {
      srcDir 'src/logging/resources'
    }
  }
}


tasks.named('processLoggingResources') {
  // Don't know why this tries to copy the logback.xml file twice, but only accept it once
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


dependencies {
  implementation project(path: ':dd-trace-ot', configuration: 'shadow')
  implementation project(':dd-trace-api')

  compileOnly libs.slf4j
  compileOnly 'log4j:log4j:1.2.17'
  compileOnly 'commons-logging:commons-logging:1.2'
  compileOnly 'org.apache.logging.log4j:log4j-core:2.14.0'
  compileOnly 'org.jboss.logging:jboss-logging:3.4.1.Final'
  compileOnly 'com.google.flogger:flogger:0.5.1'

  jcl 'commons-logging:commons-logging:1.2'

  log4j1 'log4j:log4j:1.2.7'
  log4j1Latest 'log4j:log4j:+'

  log4j2 'org.apache.logging.log4j:log4j-core:2.7'
  log4j2 'org.jctools:jctools-core:1.2.1'
  log4j2 'com.fasterxml.jackson.core:jackson-core:2.8.3'
  log4j2 'com.fasterxml.jackson.core:jackson-databind:2.8.3'
  log4j2 'com.fasterxml.jackson.core:jackson-annotations:2.8.3'
  julLog4j2Bridge 'org.apache.logging.log4j:log4j-jul:2.7'
  jclLog4j2Bridge 'org.apache.logging.log4j:log4j-jcl:2.7'
  log4j1Log4j2Bridge 'org.apache.logging.log4j:log4j-1.2-api:2.7'
  slf4jLog4j2Bridge 'org.apache.logging.log4j:log4j-slf4j-impl:2.7'
  log4j2Slf4jBridge 'org.apache.logging.log4j:log4j-to-slf4j:2.7'

  log4j2Latest 'org.apache.logging.log4j:log4j-core:2.+'
  julLog4j2BridgeLatest 'org.apache.logging.log4j:log4j-jul:2.+'
  jclLog4j2BridgeLatest 'org.apache.logging.log4j:log4j-jcl:2.+'
  log4j1Log4j2BridgeLatest 'org.apache.logging.log4j:log4j-1.2-api:2.+'
  slf4jLog4j2BridgeLatest 'org.apache.logging.log4j:log4j-slf4j-impl:2.+'
  log4j2Slf4jBridgeLatest 'org.apache.logging.log4j:log4j-to-slf4j:2.+'

  slf4jInterface libs.slf4j

  slf4jJULBridge "org.slf4j:slf4j-jdk14:${libs.versions.slf4j.get()}"
  slf4jJCLBridge "org.slf4j:slf4j-jcl:${libs.versions.slf4j.get()}"
  slf4jLog4j1Bridge "org.slf4j:slf4j-log4j12:${libs.versions.slf4j.get()}"
  julSlf4jBridge "org.slf4j:jul-to-slf4j:${libs.versions.slf4j.get()}"
  jclSlf4jBridge "org.slf4j:jcl-over-slf4j:${libs.versions.slf4j.get()}"
  log4j1Slf4jBridge "org.slf4j:log4j-over-slf4j:${libs.versions.slf4j.get()}"

  slf4jSimpleBackend "org.slf4j:slf4j-simple:${libs.versions.slf4j.get()}"

  logbackBackend 'ch.qos.logback:logback-classic:1.0.0'
  logbackBackend 'net.logstash.logback:logstash-logback-encoder:3.0'

  // Logback has a bunch of alpha versions after this
  logbackBackendLatest 'ch.qos.logback:logback-classic:1.2.3'
  logbackBackendLatest 'net.logstash.logback:logstash-logback-encoder:6.6'

  jbossInterface 'org.jboss.logging:jboss-logging:3.4.1.Final'
  jbossBackend 'org.jboss.logmanager:jboss-logmanager:1.2.0.GA'
  jbossBackendLatest 'org.jboss.logmanager:jboss-logmanager:2.+'

  floggerInterface 'com.google.flogger:flogger:0.5.1'
  floggerJULBackend 'com.google.flogger:flogger-system-backend:0.5.1'
  floggerSlf4jBackend 'com.google.flogger:flogger-slf4j-backend:0.5.1'

  testImplementation project(':dd-smoke-tests')
  testImplementation project(':dd-smoke-tests:backend-mock')
}

def generateTestingJar(String interfaceName, String backend, List<NamedDomainObjectProvider<Configuration>> configurationProviders) {
  def name = interfaceName + "Interface" + backend + "Backend"
  tasks.register(name, ShadowJar) {
    from sourceSets.main.output
    from sourceSets.logging.output

    // Jar signing prevents proper loading
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    // This file causes issues when merging jars
    // https://stackoverflow.com/questions/48033792/log4j2-error-statuslogger-unrecognized-conversion-specifier
    // https://issues.apache.org/jira/browse/LOG4J2-673
    exclude '**/Log4j2Plugins.dat'

    archiveClassifier.set('')
    archiveVersion.set('')

    manifest {
      attributes('Main-Class': 'datadog.smoketest.loginjection.' + interfaceName + "Interface")
    }

    archiveBaseName.set(name)

    configurations = [project.configurations.named('runtimeClasspath').get()] + configurationProviders.collect { it.get() }
  }
}

generateTestingJar('JUL', 'JUL', [])

generateTestingJar('JUL', 'Log4j2',
  [configurations.named('julLog4j2Bridge'), configurations.named('log4j2')])

generateTestingJar('JUL', 'Log4j2Latest',
  [configurations.named('julLog4j2BridgeLatest'), configurations.named('log4j2Latest')])

generateTestingJar('JUL', 'JBoss', [configurations.named('jbossBackend')])

generateTestingJar('JUL', 'JBossLatest', [configurations.named('jbossBackendLatest')])

generateTestingJar('JCL', 'JUL', [configurations.named('jcl')])

generateTestingJar('JCL', 'Log4j1',
  [configurations.named('jcl'), configurations.named('log4j1')])

generateTestingJar('JCL', 'Log4j1Latest',
  [configurations.named('jcl'), configurations.named('log4j1Latest')])

generateTestingJar('JCL', 'Log4j2',
  [
    configurations.named('jcl'),
    configurations.named('jclLog4j2Bridge'),
    configurations.named('log4j2')
  ])

generateTestingJar('JCL', 'Log4j2Latest',
  [
    configurations.named('jcl'),
    configurations.named('jclLog4j2BridgeLatest'),
    configurations.named('log4j2Latest')
  ])

generateTestingJar('Log4j1', 'Log4j1', [configurations.named('log4j1')])

generateTestingJar('Log4j1', 'Log4j1Latest', [configurations.named('log4j1Latest')])

generateTestingJar('Log4j1', 'Log4j2',
  [configurations.named('log4j1Log4j2Bridge'), configurations.named('log4j2')])

generateTestingJar('Log4j1', 'Log4j2Latest',
  [configurations.named('log4j1Log4j2BridgeLatest'), configurations.named('log4j2Latest')])

generateTestingJar('Log4j2', 'Log4j2',
  [configurations.named('log4j2')])

generateTestingJar('Log4j2', 'Log4j2Latest',
  [configurations.named('log4j2Latest')])

generateTestingJar('Slf4j', 'Logback',
  [configurations.named('slf4jInterface'), configurations.named('logbackBackend')])

generateTestingJar('Slf4j', 'LogbackLatest',
  [configurations.named('slf4jInterface'), configurations.named('logbackBackendLatest')])

generateTestingJar('Slf4j', 'Log4j1',
  [
    configurations.named('slf4jInterface'),
    configurations.named('slf4jLog4j1Bridge'),
    configurations.named('log4j1')
  ])

generateTestingJar('Slf4j', 'Log4j1Latest',
  [
    configurations.named('slf4jInterface'),
    configurations.named('slf4jLog4j1Bridge'),
    configurations.named('log4j1Latest')
  ])

generateTestingJar('Slf4j', 'Log4j2',
  [
    configurations.named('slf4jInterface'),
    configurations.named('slf4jLog4j2Bridge'),
    configurations.named('log4j2')
  ])

generateTestingJar('Slf4j', 'Log4j2Latest',
  [
    configurations.named('slf4jInterface'),
    configurations.named('slf4jLog4j2BridgeLatest'),
    configurations.named('log4j2Latest')
  ])

generateTestingJar('Slf4j', 'Slf4jSimple',
  [configurations.named('slf4jInterface'), configurations.named('slf4jSimpleBackend')])

generateTestingJar('Slf4j', 'JUL',
  [configurations.named('slf4jInterface'), configurations.named('slf4jJULBridge')])

generateTestingJar('Slf4j', 'JCLToLog4j1',
  [
    configurations.named('slf4jInterface'),
    configurations.named('slf4jJCLBridge'),
    configurations.named('jcl'),
    configurations.named('log4j1')
  ])

generateTestingJar('Slf4j', 'JCLToLog4j1Latest',
  [
    configurations.named('slf4jInterface'),
    configurations.named('slf4jJCLBridge'),
    configurations.named('jcl'),
    configurations.named('log4j1Latest')
  ])

generateTestingJar('Slf4j', 'JCLToLog4j2',
  [
    configurations.named('slf4jInterface'),
    configurations.named('slf4jJCLBridge'),
    configurations.named('jcl'),
    configurations.named('jclLog4j2Bridge'),
    configurations.named('log4j2')
  ])

generateTestingJar('Slf4j', 'JCLToLog4j2Latest',
  [
    configurations.named('slf4jInterface'),
    configurations.named('slf4jJCLBridge'),
    configurations.named('jcl'),
    configurations.named('jclLog4j2BridgeLatest'),
    configurations.named('log4j2Latest')
  ])

generateTestingJar('JUL', 'Slf4jToLogback',
  [configurations.named('julSlf4jBridge'), configurations.named('logbackBackend')])

generateTestingJar('JUL', 'Slf4jToLogbackLatest',
  [configurations.named('julSlf4jBridge'), configurations.named('logbackBackendLatest')])

generateTestingJar('JCL', 'Slf4jToLogback',
  [configurations.named('jclSlf4jBridge'), configurations.named('logbackBackend')])

generateTestingJar('JCL', 'Slf4jToLogbackLatest',
  [configurations.named('jclSlf4jBridge'), configurations.named('logbackBackendLatest')])

generateTestingJar('Log4j1', 'Slf4jToLogback',
  [configurations.named('log4j1Slf4jBridge'), configurations.named('logbackBackend')])

generateTestingJar('Log4j1', 'Slf4jToLogbackLatest',
  [configurations.named('log4j1Slf4jBridge'), configurations.named('logbackBackendLatest')])

generateTestingJar('Log4j2', 'Slf4jToLogback',
  [configurations.named('log4j2Slf4jBridge'), configurations.named('logbackBackend')])

generateTestingJar('Log4j2', 'Slf4jToLogbackLatest',
  [configurations.named('log4j2Slf4jBridge'), configurations.named('logbackBackendLatest')])

generateTestingJar('JBoss', 'JBoss',
  [configurations.named('jbossInterface'), configurations.named('jbossBackend')])

generateTestingJar('JBoss', 'JBossLatest',
  [configurations.named('jbossInterface'), configurations.named('jbossBackendLatest')])

generateTestingJar('JBoss', 'Log4j1',
  [configurations.named('jbossInterface'), configurations.named('log4j1')])

generateTestingJar('JBoss', 'Log4j1Latest',
  [configurations.named('jbossInterface'), configurations.named('log4j1Latest')])

generateTestingJar('JBoss', 'Log4j2',
  [configurations.named('jbossInterface'), configurations.named('log4j2')])

generateTestingJar('JBoss', 'Log4j2Latest',
  [configurations.named('jbossInterface'), configurations.named('log4j2Latest')])

generateTestingJar('JBoss', 'Slf4jToLogback',
  [
    configurations.named('jbossInterface'),
    configurations.named('slf4jInterface'),
    configurations.named('logbackBackend')
  ])

generateTestingJar('JBoss', 'Slf4jToLogbackLatest',
  [
    configurations.named('jbossInterface'),
    configurations.named('slf4jInterface'),
    configurations.named('logbackBackendLatest')
  ])

generateTestingJar('JBoss', 'JUL', [configurations.named('jbossInterface')])

generateTestingJar('Flogger', 'JUL',
  [configurations.named('floggerInterface'), configurations.named('floggerJULBackend')])

generateTestingJar('Flogger', 'Slf4jToLogback',
  [
    configurations.named('floggerInterface'),
    configurations.named('floggerSlf4jBackend'),
    configurations.named('logbackBackend')
  ])

generateTestingJar('Flogger', 'Slf4jToLogbackLatest',
  [
    configurations.named('floggerInterface'),
    configurations.named('floggerSlf4jBackend'),
    configurations.named('logbackBackendLatest')
  ])

tasks.withType(Test).configureEach {
  dependsOn tasks.withType(ShadowJar)

  // Runtime.getRuntime().availableProcessors() is used to scale the parallelism by default,
  // but it returns weird values in Gitlab/kubernetes, so fix to a specific value when available
  maxParallelForks = providers.environmentVariable("RUNTIME_AVAILABLE_PROCESSORS_OVERRIDE")
    .map { it.toInteger() }
    .orElse(Math.max(1, (Runtime.runtime.availableProcessors() / 2).toInteger()))
    .get()
}


