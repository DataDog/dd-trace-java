ext {
  minJavaVersionForTests = JavaVersion.VERSION_1_8
}

apply from: "$rootDir/gradle/java.gradle"

dependencies {
  testImplementation project(':dd-smoke-tests')
}

// Check 'testJvm' gradle command parameter from GraalVM JVM
def testJvm = gradle.startParameter.projectProperties['testJvm']
if (testJvm != null && testJvm.startsWith('GRAALVM')) {
  // Retrieve GRAALVM_HOME from JVM environment variables
  def testJvmEnv = "JAVA_${testJvm}_HOME"
  def testJvmHome = System.getenv(testJvmEnv)
  if (!testJvmHome) {
    throw new GradleException("Unable to find launcher for Java '$testJvm'. Have you set '$testJvmEnv'?")
  }
  // Configure build directory for application
  def appDir = "$projectDir/application"
  def appBuildDir = "$buildDir/application"
  // Define the task that builds the Spring Native project
  tasks.register('springNativeBuild', Exec) {
    workingDir "$appDir"
    environment += [
      "GRADLE_OPTS" : "-Dorg.gradle.jvmargs='-Xmx512M'",
      "JAVA_HOME": testJvmHome,
      "GRAALVM_HOME": testJvmHome
    ]
    commandLine "$rootDir/gradlew", "nativeCompile", "--no-daemon", "--max-workers=4", "-PappBuildDir=$appBuildDir", "-PagentPath=${project(':dd-java-agent').tasks.shadowJar.archivePath}"

    outputs.cacheIf { true }
    outputs.dir(appBuildDir)
      .withPropertyName("nativeApplication")

    inputs.files(fileTree(appDir) {
      include '**/*'
      exclude '.gradle/**', 'build/**'
    }).withPropertyName("application")
    .withPathSensitivity(PathSensitivity.RELATIVE)
  }

  springNativeBuild {
    dependsOn project(':dd-java-agent').tasks.named("shadowJar")
  }

  tasks.named("compileTestGroovy").configure {
    dependsOn 'springNativeBuild'
    outputs.upToDateWhen {
      !springNativeBuild.didWork
    }
  }

  tasks.withType(Test).configureEach {
    jvmArgs "-Ddatadog.smoketest.spring.native.executable=$appBuildDir/native/nativeCompile/spring-native-smoketest"
  }
} else {
  tasks.withType(Test).configureEach {
    enabled = false
  }
}


spotless {
  java {
    target "**/*.java"
  }

  groovyGradle {
    target '*.gradle', "**/*.gradle"
  }
}
