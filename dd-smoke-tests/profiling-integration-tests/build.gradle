import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'com.gradleup.shadow'
}

ext {
  excludeJdk = ['IBM8']
}

apply from: "$rootDir/gradle/java.gradle"

description = 'Profiling Integration Tests.'

tasks.named("jar", Jar) {
  manifest {
    attributes('Main-Class': 'datadog.smoketest.profiling.ProfilingTestApplication')
  }
}

dependencies {
  implementation project(':dd-trace-api')
  api project(':dd-trace-ot')
  implementation 'org.apache.commons:commons-math3:3.6.1'
  implementation libs.lz4
  implementation libs.aircompressor
  implementation 'org.xerial.snappy:snappy-java:1.1.8.4'

  testImplementation project(':dd-smoke-tests')
  testImplementation project(':dd-java-agent:agent-profiling:profiling-testing')
  testImplementation libs.bundles.junit5
  testImplementation libs.bundles.mockito
  testImplementation libs.bundles.jmc
  testImplementation libs.aircompressor
  testImplementation libs.jackson.databind
}

tasks.withType(Test).configureEach {
  dependsOn "shadowJar"
  def shadowJarTask = tasks.named('shadowJar', ShadowJar)
  jvmArgumentProviders.add(new CommandLineArgumentProvider() {
      @Override
      Iterable<String> asArguments() {
        return shadowJarTask.map { ["-Ddatadog.smoketest.profiling.shadowJar.path=${it.archiveFile.get()}"] }.get()
      }
    })

  testLogging {
    events "started", "passed", "skipped", "failed"
    showStandardStreams = true
  }
}

tasks.named("shadowJar", ShadowJar) {
  include {
    return it.directory || it.path.endsWith('.jar') ||
      it.path.startsWith('io/opentracing') ||
      it.path.startsWith('datadog/smoketest') ||
      it.path.startsWith('org/apache/commons') ||
      it.path.startsWith('net/jpountz') ||
      it.path.startsWith('org/xerial/snappy')
  }
}
