import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'com.gradleup.shadow'
}

apply from: "$rootDir/gradle/java.gradle"
description = 'SpringBoot Smoke Tests.'

// The standard spring-boot plugin doesn't play nice with our project
// so we'll build a fat jar instead
tasks.named("jar", Jar) {
  manifest {
    attributes('Main-Class': 'datadog.smoketest.appsec.springboot.SpringbootApplication')
  }
}

dependencies {
  implementation project(':dd-trace-api')
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.6.0'
  implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.6.0')
  implementation group: 'com.h2database', name: 'h2', version: '2.1.212'

  // ssrf
  implementation group: 'commons-httpclient', name: 'commons-httpclient', version: '2.0'
  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.0'
  implementation group: 'com.squareup.okhttp', name: 'okhttp', version: '2.2.0'
  implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.0.0'

  testImplementation project(':dd-smoke-tests:appsec')
}

tasks.withType(Test).configureEach {
  def shadowJarTask = tasks.named('shadowJar', ShadowJar)
  dependsOn shadowJarTask

  jvmArgumentProviders.add(new CommandLineArgumentProvider() {
      @Override
      Iterable<String> asArguments() {
        return shadowJarTask.map { ["-Ddatadog.smoketest.appsec.springboot.shadowJar.path=${it.archiveFile.get()}"] }.get()
      }
    })
}

tasks.register('testRuntimeActivation', Test) {
  def shadowJarTask = tasks.named('shadowJar', ShadowJar)
  jvmArgs '-Dsmoke_test.appsec.enabled=inactive'
  jvmArgumentProviders.add(new CommandLineArgumentProvider() {
      @Override
      Iterable<String> asArguments() {
        return shadowJarTask.map { ["-Ddatadog.smoketest.appsec.springboot.shadowJar.path=${it.archiveFile.get()}"] }.get()
      }
    })
}

tasks.named('check') {
  dependsOn(testRuntimeActivation)
}
