plugins {
  id 'org.gradle.playframework'
}

apply from: "$rootDir/gradle/java.gradle"

def playVer = "2.8.15"
def scalaVer = System.getProperty("scala.version", /* default = */ "2.13")

play {
  platform {
    playVersion = playVer
    scalaVersion = scalaVer
    javaVersion = JavaVersion.VERSION_1_8
  }
  injectedRoutesGenerator = true
}

distributions {
  main {
    contents {
      from("conf") {
        into "conf"
      }
    }
  }
}

repositories {
  mavenLocal()
  if (project.rootProject.hasProperty("mavenRepositoryProxy")) {
    maven {
      url project.rootProject.property("mavenRepositoryProxy")
      allowInsecureProtocol true
    }
  }
  mavenCentral()
  maven {
    name "lightbend-maven-releases"
    url "https://repo.lightbend.com/lightbend/maven-release"
  }
  ivy {
    name "lightbend-ivy-release"
    url "https://repo.lightbend.com/lightbend/ivy-releases"
    layout "ivy"
  }
}

description = 'Play Integration 2.8 Tests.'

dependencies {
  implementation "com.typesafe.play:play-guice_$scalaVer:$playVer"
  implementation "com.typesafe.play:play-logback_$scalaVer:$playVer"
  implementation "com.typesafe.play:filters-helpers_$scalaVer:$playVer"
  implementation "com.typesafe.play:play-netty-server_$scalaVer:$playVer"
  implementation "com.typesafe.play:play-ahc-ws_$scalaVer:$playVer"

  // Needed for Java17
  implementation "com.google.inject:guice:5.1.0"
  implementation "com.google.inject.extensions:guice-assistedinject:5.1.0"

  implementation project(':dd-trace-api')
  implementation group: 'io.opentracing', name: 'opentracing-api', version: '0.32.0'
  implementation group: 'io.opentracing', name: 'opentracing-util', version: '0.32.0'

  testImplementation project(':dd-smoke-tests')
  testImplementation project(':dd-smoke-tests:appsec')
  testImplementation(testFixtures(project(":dd-smoke-tests:iast-util")))
}

configurations.testImplementation {
  exclude group: 'com.typesafe.play', module: "play-test_$scalaVer"
}

// Fix for flaky error: Source directory '/dd-smoke-tests/play-2.8/build/src/play/routes' is not a directory.
// Probably, GitLab somehow creates (or restores from cache) file instead of folder.
tasks.register('fixPlayRoutesDirectory') {
  group = 'build cleanup'
  description = 'Deletes routes path if it is a file instead of directory'

  def routesPath = layout.buildDirectory.dir('src/play/routes')
  destroyables.register(routesPath)

  doFirst {
    def routesPathFile = routesPath.get().asFile

    if (routesPathFile.exists() && !routesPathFile.isDirectory()) {
      logger.lifecycle("Removing file that blocks routes directory: ${routesPathFile}")
      project.delete(routesPathFile)
    }
  }
}

tasks.named('compilePlayRoutes') {
  dependsOn tasks.named('fixPlayRoutesDirectory')
}

tasks.named('compileTestGroovy').configure {
  dependsOn 'stageMainDist'
  outputs.upToDateWhen {
    !stageMainDist.didWork
  }
}

tasks.withType(AbstractCopyTask).each {
  // Don't know why the play plugin tries to copy the logback.xml file twice, but only accept it once
  it.configure {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  }
}

spotless {
  java {
    target "**/*.java"
  }
  scala {
    target "**/*.scala"
  }
}
