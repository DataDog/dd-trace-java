package datadog.smoketest


import datadog.trace.api.Platform
import datadog.trace.test.agent.decoder.DecodedSpan
import okhttp3.Request
import spock.lang.Requires
import spock.lang.Shared
import spock.util.concurrent.PollingConditions

import java.util.function.Function
import java.util.stream.Collectors

// This test currently fails on IBM JVMs
@Requires({ !Platform.isJ9() })
class SpringBootOpenLibertySmokeVulnerabilityTest extends AbstractServerSmokeTest {

  @Shared
  int totalInvocations = 100

  @Shared
  String openLibertyShadowJar = System.getProperty("datadog.smoketest.openliberty.jar.path")

  @Override
  ProcessBuilder createProcessBuilder() {
    List<String> command = new ArrayList<>()
    command.add(javaPath())

    command.addAll((String[]) ["-jar", openLibertyShadowJar, "--server.port=${httpPort}"])

    List<String> envParams = new ArrayList<>()
    envParams.addAll(defaultJavaProperties)
    envParams.addAll(
      "-Ddd.writer.type=MultiWriter:TraceStructureWriter:${output.getAbsolutePath()},DDAgentWriter",
      "-Ddd.jmxfetch.enabled=false",
      "-Ddd.appsec.enabled=true",
      "-Ddatadog.slf4j.simpleLogger.defaultLogLevel=debug",
      "-Dorg.slf4j.simpleLogger.defaultLogLevel=debug",
      "-Ddd.iast.enabled=true", "-Ddd.iast.request-sampling=100"
      )


    String javaToolOptions = envParams.stream().collect(Collectors.joining(" "))


    ProcessBuilder processBuilder = new ProcessBuilder(command)
    processBuilder.environment().put("JAVA_TOOL_OPTIONS", javaToolOptions)
    processBuilder.directory(new File(buildDirectory))
    return processBuilder
  }

  @Override
  File createTemporaryFile() {
    return new File("${buildDirectory}/tmp/springboot-openliberty.out")
  }

  @Override
  Closure decodedTracesCallback() {
    return {} // force traces decoding
  }

  private static boolean contains(String s) {
    System.out.println("Checking span:" + s)
    return s.contains("MD5")
  }

  private static Function<DecodedSpan, Boolean> hasVulnerability() {
    return { span -> contains(span.toString()) }
  }

  def "Test vulnerability"() {
    setup:
    def url = "http://localhost:${httpPort}/vulnerability"
    def request = new Request.Builder().url(url).get().build()

    when:
    client.newCall(request).execute()

    then:
    waitForSpan(new PollingConditions(timeout: 5), hasVulnerability())
  }

}
