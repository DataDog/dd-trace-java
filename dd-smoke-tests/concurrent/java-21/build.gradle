import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'application'
  id 'com.gradleup.shadow'
}

apply from: "$rootDir/gradle/java.gradle"

testJvmConstraint {
  minJavaVersion = JavaVersion.VERSION_21
  maxJavaVersion = JavaVersion.VERSION_25
}

description = 'JDK 21 Concurrent Integration Tests'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

tasks.withType(JavaCompile).configureEach {
  configureCompiler(it, 21, JavaVersion.VERSION_21)
}

// Disable plugin tasks that do not support Java 21:
// * forbiddenApis is missing classes
// * spotless as the google-java-format version does not support Java 21 and can't be changed once applied
// * spotbugs failed to read class using newer bytecode versions
tasks.named("forbiddenApisMain") {
  failOnMissingClasses = false
}

['spotlessApply', 'spotlessCheck', 'spotlessJava', 'spotbugsMain'].each {
  tasks.named(it) { enabled = false }
}

application {
  mainClass = 'datadog.smoketest.concurrent.ConcurrentApp'
}

dependencies {
  implementation group: 'io.opentelemetry.instrumentation', name: 'opentelemetry-instrumentation-annotations', version: '2.13.3'
  testImplementation project(':dd-smoke-tests')
}

tasks.withType(Test).configureEach {
  def shadowJarTask = tasks.named('shadowJar', ShadowJar)
  dependsOn shadowJarTask
  jvmArgumentProviders.add(new CommandLineArgumentProvider() {
      @Override
      Iterable<String> asArguments() {
        return shadowJarTask.map { ["-Ddatadog.smoketest.shadowJar.path=${it.archiveFile.get()}"] }.get()
      }
    })
}
