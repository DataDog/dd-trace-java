import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import java.time.Duration
import java.time.temporal.ChronoUnit

plugins {
  id 'com.gradleup.shadow'
}

apply from: "$rootDir/gradle/java.gradle"
description = 'Maven Instrumentation Smoke Tests.'

dependencies {
  implementation group: 'org.apache.maven.wrapper', name: 'maven-wrapper', version: '3.2.0'

  testImplementation project(':dd-smoke-tests:backend-mock')
  testImplementation project(':internal-api')
  testImplementation project(':dd-java-agent:agent-ci-visibility:civisibility-test-fixtures')
}

tasks.named("jar", Jar) {
  manifest {
    attributes('Main-Class': 'datadog.smoketest.maven.MavenRunner')
  }
}

tasks.withType(Test).configureEach {
  dependsOn "shadowJar"
  def shadowJarTask = tasks.named('shadowJar', ShadowJar)
  jvmArgumentProviders.add(new CommandLineArgumentProvider() {
      @Override
      Iterable<String> asArguments() {
        return shadowJarTask.map { ["-Ddatadog.smoketest.maven.jar.path=${it.archiveFile.get()}"] }.get()
      }
    })

  // Overriding the default timeout as Maven smoke tests might run for a longer duration.
  timeout = Duration.of(25, ChronoUnit.MINUTES)

  if (project.hasProperty("mavenRepositoryProxy")) {
    // propagate proxy URL to tests, to then propagate it to nested Gradle builds
    environment "MAVEN_REPOSITORY_PROXY", project.property("mavenRepositoryProxy")
  }
}
