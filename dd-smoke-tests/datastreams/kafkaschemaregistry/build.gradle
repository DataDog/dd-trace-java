import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'com.gradleup.shadow'
  id 'java'
  id 'org.springframework.boot' version '2.6.3'
}

apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/spring-boot-plugin.gradle"
description = 'Kafka Smoke Tests.'

tasks.named("jar", Jar) {
  manifest {
    attributes('Main-Class': 'datadog.smoketest.datastreams.kafkaschemaregistry.KafkaProducerWithSchemaRegistry')
  }
}

dependencies {
  implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.6.0')
  implementation 'io.confluent:kafka-schema-registry-client:7.5.2'
  implementation 'io.confluent:kafka-avro-serializer:7.5.2'
  implementation('org.apache.avro:avro:1.11.0')
  // Add SLF4J binding (Logback in this case)
  implementation 'ch.qos.logback:logback-classic:1.2.6'
  implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.25.3'
  implementation group: 'io.confluent', name: 'kafka-protobuf-serializer', version: '7.5.1'
}

tasks.withType(Test).configureEach {
  dependsOn "shadowJar"

  def shadowJarTask = tasks.named('shadowJar', ShadowJar)
  jvmArgumentProviders.add(new CommandLineArgumentProvider() {
      @Override
      Iterable<String> asArguments() {
        return shadowJarTask.map { ["-Ddatadog.smoketest.datastreams.kafkaschemaregistry.shadowJar.path=${it.archiveFile.get()}"] }.get()
      }
    })
}

tasks.register('testRuntimeActivation', Test) {
  def shadowJarTask = tasks.named('shadowJar', ShadowJar)
  jvmArgumentProviders.add(new CommandLineArgumentProvider() {
      @Override
      Iterable<String> asArguments() {
        return shadowJarTask.map { ["-Ddatadog.smoketest.datastreams.kafkaschemaregistry.shadowJar.path=${it.archiveFile.get()}"] }.get()
      }
    })
}

tasks.named('check') {
  dependsOn(testRuntimeActivation)
}
