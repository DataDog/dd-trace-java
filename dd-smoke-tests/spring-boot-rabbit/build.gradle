import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
  id 'com.gradleup.shadow'
}

apply from: "$rootDir/gradle/java.gradle"
description = 'SpringBoot RabbitMQ Smoke Tests.'

// The standard spring-boot plugin doesn't play nice with our project
// so we'll build a fat jar instead
tasks.named("jar", Jar) {
  manifest {
    attributes('Main-Class': 'datadog.smoketest.springboot.SpringbootApplication')
  }
}

tasks.named("shadowJar", ShadowJar) {
  configurations = [project.configurations.runtimeClasspath]
}

dependencies {
  implementation project(':dd-trace-api')
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.5.4'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-amqp', version: '2.5.4'

  testImplementation project(':dd-smoke-tests')
  testImplementation group: 'org.testcontainers', name: 'rabbitmq', version: libs.versions.testcontainers.get()
}

tasks.withType(Test).configureEach {
  def shadowJarTask = tasks.named('shadowJar', ShadowJar)
  dependsOn shadowJarTask

  jvmArgumentProviders.add(new CommandLineArgumentProvider() {
      @Override
      Iterable<String> asArguments() {
        return shadowJarTask.map { ["-Ddatadog.smoketest.springboot.shadowJar.path=${it.archiveFile.get()}"] }.get()
      }
    })

  usesService(testcontainersLimit)
}
