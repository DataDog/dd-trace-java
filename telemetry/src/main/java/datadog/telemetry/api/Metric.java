/**
 * Datadog Telemetry API Generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator
 *
 * <p>The version of the OpenAPI document: 1.0.0
 *
 * <p>NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */
package datadog.telemetry.api;

import java.util.ArrayList;
import java.util.List;

public class Metric {

  /** Non-serializable field with the namespace of the current metric */
  private transient String namespace = "appsec";

  @com.squareup.moshi.Json(name = "common")
  private Boolean common;

  @com.squareup.moshi.Json(name = "metric")
  private String metric;

  @com.squareup.moshi.Json(name = "points")
  private List<List<Number>> points = new ArrayList<List<Number>>();

  @com.squareup.moshi.Json(name = "tags")
  private List<String> tags = new ArrayList<String>();

  public enum TypeEnum {
    @com.squareup.moshi.Json(name = "gauge")
    GAUGE(String.valueOf("gauge")),

    @com.squareup.moshi.Json(name = "rate")
    RATE(String.valueOf("rate")),

    @com.squareup.moshi.Json(name = "count")
    COUNT(String.valueOf("count"));

    final String value;

    TypeEnum(String v) {
      value = v;
    }

    public String value() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  /** Metric type variant */
  @com.squareup.moshi.Json(name = "type")
  private TypeEnum type;

  /**
   * Get common
   *
   * @return common
   */
  public Boolean getCommon() {
    return common;
  }

  /** Set common */
  public void setCommon(Boolean common) {
    this.common = common;
  }

  public Metric common(Boolean common) {
    this.common = common;
    return this;
  }

  /**
   * Get metric
   *
   * @return metric
   */
  public String getMetric() {
    return metric;
  }

  /** Set metric */
  public void setMetric(String metric) {
    this.metric = metric;
  }

  public Metric metric(String metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Get points
   *
   * @return points
   */
  public List<List<Number>> getPoints() {
    return points;
  }

  /** Set points */
  public void setPoints(List<List<Number>> points) {
    this.points = points;
  }

  public Metric points(List<List<Number>> points) {
    this.points = points;
    return this;
  }

  public Metric addPointsItem(List<Number> pointsItem) {
    this.points.add(pointsItem);
    return this;
  }

  /**
   * Get tags
   *
   * @return tags
   */
  public List<String> getTags() {
    return tags;
  }

  /** Set tags */
  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public Metric tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Metric addTagsItem(String tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Metric type variant
   *
   * @return type
   */
  public TypeEnum getType() {
    return type;
  }

  /** Set type */
  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Metric type(TypeEnum type) {
    this.type = type;
    return this;
  }

  public Metric namespace(final String namespace) {
    setNamespace(namespace);
    return this;
  }

  public void setNamespace(final String namespace) {
    this.namespace = namespace;
  }

  public String getNamespace() {
    return namespace;
  }

  /** Create a string representation of this pojo. */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metric {\n");

    sb.append(" namespace: ").append(namespace).append("\n");
    sb.append("    common: ").append(common).append("\n");
    sb.append("    metric: ").append(metric).append("\n");
    sb.append("    points: ").append(points).append("\n");
    sb.append("    tags: ").append(tags).append("\n");
    sb.append("    type: ").append(type).append("\n");
    sb.append("}");
    return sb.toString();
  }
}
