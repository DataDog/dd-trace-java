// Set properties before any plugins get loaded
ext {
  minJavaVersionForTests = JavaVersion.VERSION_11
  // need access to jdk.jfr package
  skipSettingCompilerRelease = true
}

apply from: "$rootDir/gradle/java.gradle"
apply plugin: 'idea'

dependencies {
  api deps.slf4j
  api project(':dd-trace-core')
  api project(':internal-api:internal-api-8')

  testImplementation project(':dd-java-agent:agent-profiling:profiling-controller')
  testImplementation project(':dd-java-agent:agent-profiling:profiling-controller-openjdk')
  testImplementation project(':dd-java-agent:testing')
}

/*
 Setup here is as following:
 * We compile with Java11 compiler to get JFR definitions.
 * We specify source/target as Java8 to get code that is loadable on Java8 - JFR defs are Java8 compatible.
 * We force IDEA to treat this as Java11 project with 'idea' plugin below.
 * We run tests only on Java11+.
 */
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

[JavaCompile, GroovyCompile].each {
  tasks.withType(it).configureEach {
    doFirst {
      if (!System.env.JAVA_11_HOME) {
        throw new GradleException('JAVA_11_HOME must be set to build profiling helpers')
      }
      // Disable '-processing' because some annotations are not claimed.
      // Disable '-options' because we are compiling for java8 without specifying bootstrap - intentionally.
      // Disable '-path' because we do not have some of the paths seem to be missing.
      options.compilerArgs.addAll(['-Xlint:all,-processing,-options,-path', '-Werror'])
      options.fork = true
      options.forkOptions.javaHome = file(System.env.JAVA_11_HOME)
    }
  }
}

idea {
  module {
    jdkName = '11'
  }
}
