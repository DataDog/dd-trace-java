package stackstate.examples.resources;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import stackstate.examples.entities.User;
import stackstate.examples.entities.UserRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class DBResource {

  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  private ValueOperations<String, String> ops;

  public DBResource(@Autowired StringRedisTemplate template) {
    this.ops = template.opsForValue();
  }

  @GetMapping(path = "/add") // Map ONLY GET Requests
  public @ResponseBody String addNewUser(
      @RequestParam final String name, @RequestParam final String email) {

    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    final User n = new User();
    n.setName(name);
    n.setEmail(email);
    userRepository.save(n);

    // Also save to redis as key/value
    ops.set(name, email);

    return "Saved";
  }

  @GetMapping(path = "/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

  @GetMapping(path = "/get")
  public @ResponseBody User getUser(@RequestParam final int id) {
    // This returns a JSON or XML with the user
    return userRepository.findOne(id);
  }

  @GetMapping(path = "/getredis")
  public @ResponseBody String getUserRedis(@RequestParam final String name) {
    return ops.get(name);
  }

  @GetMapping(path = "/random")
  public @ResponseBody String flushRedis() {
    return ops.getOperations().randomKey();
  }
}
