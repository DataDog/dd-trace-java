package datadog.trace.api.iast;

public abstract class VulnerabilityTypes {

  private VulnerabilityTypes() {}

  public static final byte WEAK_CIPHER = 0;
  public static final String WEAK_CIPHER_STRING = "WEAK_CIPHER";
  public static final byte WEAK_HASH = 1;
  public static final String WEAK_HASH_STRING = "WEAK_HASH";
  public static final byte SQL_INJECTION = 2;
  public static final String SQL_INJECTION_STRING = "SQL_INJECTION";
  public static final byte COMMAND_INJECTION = 3;
  public static final String COMMAND_INJECTION_STRING = "COMMAND_INJECTION";
  public static final byte PATH_TRAVERSAL = 4;
  public static final String PATH_TRAVERSAL_STRING = "PATH_TRAVERSAL";
  public static final byte LDAP_INJECTION = 5;
  public static final String LDAP_INJECTION_STRING = "LDAP_INJECTION";
  public static final byte SSRF = 6;
  public static final String SSRF_STRING = "SSRF";
  public static final byte INSECURE_COOKIE = 7;
  public static final String INSECURE_COOKIE_STRING = "INSECURE_COOKIE";
  public static final byte NO_HTTPONLY_COOKIE = 8;
  public static final String NO_HTTPONLY_COOKIE_STRING = "NO_HTTPONLY_COOKIE";
  public static final byte HSTS_HEADER_MISSING = 9;
  public static final String HSTS_HEADER_MISSING_STRING = "HSTS_HEADER_MISSING";
  public static final byte XCONTENTTYPE_HEADER_MISSING = 10;
  public static final String XCONTENTTYPE_HEADER_MISSING_STRING = "XCONTENTTYPE_HEADER_MISSING";
  public static final byte NO_SAMESITE_COOKIE = 11;
  public static final String NO_SAMESITE_COOKIE_STRING = "NO_SAMESITE_COOKIE";
  public static final byte UNVALIDATED_REDIRECT = 12;
  public static final String UNVALIDATED_REDIRECT_STRING = "UNVALIDATED_REDIRECT";
  public static final byte WEAK_RANDOMNESS = 13;
  public static final String WEAK_RANDOMNESS_STRING = "WEAK_RANDOMNESS";
  public static final byte XPATH_INJECTION = 14;
  public static final String XPATH_INJECTION_STRING = "XPATH_INJECTION";
  public static final byte TRUST_BOUNDARY_VIOLATION = 15;
  public static final String TRUST_BOUNDARY_VIOLATION_STRING = "TRUST_BOUNDARY_VIOLATION";
  public static final byte XSS = 16;
  public static final String XSS_STRING = "XSS";

  /**
   * Use for telemetry only, this is a special vulnerability type that is not reported, reported
   * values will be {@link #RESPONSE_HEADER_TYPES}
   */
  public static final byte RESPONSE_HEADER = -128;

  public static final byte[] RESPONSE_HEADER_TYPES = {
    UNVALIDATED_REDIRECT,
    INSECURE_COOKIE,
    NO_SAMESITE_COOKIE,
    XCONTENTTYPE_HEADER_MISSING,
    HSTS_HEADER_MISSING
  };

  /**
   * Use for telemetry only, this is a special vulnerability type that is not reported, reported
   * values will be {@link #SPRING_RESPONSE_TYPES}
   */
  public static final byte SPRING_RESPONSE = -127;
  /** Use for spring unvalidated redirect and xss */
  public static final byte[] SPRING_RESPONSE_TYPES = {UNVALIDATED_REDIRECT, XSS};

  private static final byte[] VALUES = {
    WEAK_CIPHER,
    WEAK_HASH,
    SQL_INJECTION,
    COMMAND_INJECTION,
    PATH_TRAVERSAL,
    LDAP_INJECTION,
    SSRF,
    INSECURE_COOKIE,
    NO_HTTPONLY_COOKIE,
    UNVALIDATED_REDIRECT,
    WEAK_RANDOMNESS,
    XPATH_INJECTION,
    TRUST_BOUNDARY_VIOLATION,
    HSTS_HEADER_MISSING,
    XCONTENTTYPE_HEADER_MISSING,
    NO_SAMESITE_COOKIE,
    XSS
  };

  public static byte[] values() {
    return VALUES;
  }

  public static String toString(final byte sourceType) {
    switch (sourceType) {
      case VulnerabilityTypes.WEAK_CIPHER:
        return VulnerabilityTypes.WEAK_CIPHER_STRING;
      case VulnerabilityTypes.WEAK_HASH:
        return VulnerabilityTypes.WEAK_HASH_STRING;
      case VulnerabilityTypes.SQL_INJECTION:
        return VulnerabilityTypes.SQL_INJECTION_STRING;
      case VulnerabilityTypes.COMMAND_INJECTION:
        return VulnerabilityTypes.COMMAND_INJECTION_STRING;
      case VulnerabilityTypes.PATH_TRAVERSAL:
        return VulnerabilityTypes.PATH_TRAVERSAL_STRING;
      case VulnerabilityTypes.LDAP_INJECTION:
        return VulnerabilityTypes.LDAP_INJECTION_STRING;
      case VulnerabilityTypes.SSRF:
        return VulnerabilityTypes.SSRF_STRING;
      case VulnerabilityTypes.INSECURE_COOKIE:
        return VulnerabilityTypes.INSECURE_COOKIE_STRING;
      case VulnerabilityTypes.NO_HTTPONLY_COOKIE:
        return VulnerabilityTypes.NO_HTTPONLY_COOKIE_STRING;
      case VulnerabilityTypes.UNVALIDATED_REDIRECT:
        return VulnerabilityTypes.UNVALIDATED_REDIRECT_STRING;
      case VulnerabilityTypes.WEAK_RANDOMNESS:
        return VulnerabilityTypes.WEAK_RANDOMNESS_STRING;
      case VulnerabilityTypes.XPATH_INJECTION:
        return VulnerabilityTypes.XPATH_INJECTION_STRING;
      case VulnerabilityTypes.TRUST_BOUNDARY_VIOLATION:
        return VulnerabilityTypes.TRUST_BOUNDARY_VIOLATION_STRING;
      case VulnerabilityTypes.HSTS_HEADER_MISSING:
        return VulnerabilityTypes.HSTS_HEADER_MISSING_STRING;
      case VulnerabilityTypes.XCONTENTTYPE_HEADER_MISSING:
        return VulnerabilityTypes.XCONTENTTYPE_HEADER_MISSING_STRING;
      case VulnerabilityTypes.NO_SAMESITE_COOKIE:
        return VulnerabilityTypes.NO_SAMESITE_COOKIE_STRING;
      case VulnerabilityTypes.XSS:
        return VulnerabilityTypes.XSS_STRING;
      default:
        return null;
    }
  }
}
