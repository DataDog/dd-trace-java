apply from: "$rootDir/gradle/java.gradle"

minimumBranchCoverage = 0.7
minimumInstructionCoverage = 0.8

excludedClassesCoverage += [
  "datadog.trace.bootstrap.instrumentation.api.Tags",
  "datadog.trace.bootstrap.instrumentation.api.CommonTagValues",
  "datadog.trace.bootstrap.instrumentation.api.AgentTracer.NoopAgentPropagation",
  "datadog.trace.bootstrap.instrumentation.api.AgentTracer",
  "datadog.trace.bootstrap.instrumentation.api.AgentTracer.NoopContext",
  "datadog.trace.bootstrap.instrumentation.api.InstrumentationTags",
  "datadog.trace.bootstrap.instrumentation.api.AgentTracer.NoopContinuation",
  "datadog.trace.bootstrap.instrumentation.api.AgentTracer.NoopAgentSpan",
  "datadog.trace.bootstrap.instrumentation.api.DDComponents",
  "datadog.trace.bootstrap.instrumentation.api.AgentTracer.NoopAgentScope",
  "datadog.trace.bootstrap.instrumentation.api.AgentTracer.NoopTracerAPI",
  "datadog.trace.bootstrap.instrumentation.api.AgentTracer.NoopAgentTrace",
  "datadog.trace.bootstrap.instrumentation.api.ScopeSource",
  "datadog.trace.bootstrap.instrumentation.api.InternalSpanTypes",
  "datadog.trace.logging.LoggingSettingsDescription",
  "datadog.trace.util.AgentProxySelector",
  "datadog.trace.util.AgentTaskScheduler",
  "datadog.trace.util.AgentTaskScheduler.PeriodicTask",
  "datadog.trace.util.AgentTaskScheduler.ShutdownHook",
  "datadog.trace.util.AgentThreadFactory",
  "datadog.trace.util.AgentThreadFactory.1",
]

sourceSets {
  java8 {
    java {
      srcDirs = ['src/main/java8']
    }
  }
  testJava8 {
    java {
      srcDirs = ['src/test/java8']
    }
    resources {
      srcDirs = ['src/test/java8resources']
    }
  }
}

compileJava8Java {
  sourceCompatibility = 8
  targetCompatibility = 8
}

compileTestJava8Java {
  sourceCompatibility = 8
  targetCompatibility = 8
}

dependencies {
  // references TraceScope and Continuation from public api
  compile project(':dd-trace-api')
  java8Compile sourceSets.main.output

  testCompile project(":utils:test-utils")
  testJava8Compile deps.junit5
  testJava8Compile deps.jmc
  testJava8Compile deps.commonsMath
  testJava8Compile deps.mockito
  testJava8Compile deps.slf4j
  testJava8Compile sourceSets.java8.output
  testJava8Compile sourceSets.main.compileClasspath
  testJava8Compile sourceSets.main.runtimeClasspath
  testJava8Compile project(":utils:test-utils")
}

jar {
  into('') {
    from sourceSets.java8.output
  }
}

task junitTests(type: Test) {
  useJUnitPlatform()
  testClassesDirs = sourceSets.testJava8.output.classesDirs
  classpath = sourceSets.testJava8.runtimeClasspath
  outputs.upToDateWhen {false}
}

tasks.withType(Test).all {
  if (it.name.contains("Java8")) {
    it.dependsOn += tasks.named('junitTests')
  }
  it.outputs.upToDateWhen {false}
}
