include:
  - remote: https://gitlab-templates.ddbuild.io/libdatadog/include/ci_authenticated_job.yml
  - remote: https://gitlab-templates.ddbuild.io/libdatadog/include/one-pipeline.yml
  - local: ".gitlab/benchmarks.yml"
  - local: ".gitlab/macrobenchmarks.yml"
  - local: ".gitlab/exploration-tests.yml"
  - local: ".gitlab/ci-visibility-tests.yml"

stages:
  - build
  - shared-pipeline
  - publish
  - benchmarks
  - macrobenchmarks
  - tests
  - exploration-tests
  - ci-visibility-tests
  - generate-signing-key

variables:
  REGISTRY: 486234852809.dkr.ecr.us-east-1.amazonaws.com
  BUILD_JOB_NAME: "build"
  DEPENDENCY_CACHE_POLICY: pull
  BUILD_CACHE_POLICY: pull
  GRADLE_VERSION: "8.4" # must match gradle-wrapper.properties
  MAVEN_REPOSITORY_PROXY: "http://artifactual.artifactual.all-clusters.local-dc.fabric.dog:8081/repository/maven-central/"
  GRADLE_PLUGIN_PROXY: "http://artifactual.artifactual.all-clusters.local-dc.fabric.dog:8081/repository/gradle-plugin-portal-proxy/"
  JAVA_BUILD_IMAGE_VERSION: "v25.01"
  REPO_NOTIFICATION_CHANNEL: "#apm-java-escalations"
  PROFILE_TESTS:
    description: "Enable profiling of tests"
    value: "false"

default:
  tags: [ "arch:amd64" ]

.fan_in:
  stage: tests
  image: registry.ddbuild.io/images/base/gbi-ubuntu_2204-slim:release
  script:
    - echo "done"

.set_datadog_api_keys: &set_datadog_api_keys
  - export DATADOG_API_KEY_PROD=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.DATADOG_API_KEY_PROD --with-decryption --query "Parameter.Value" --out text)

# CI_NODE_INDEX and CI_NODE_TOTAL are 1-indexed and not always set. These steps normalize the numbers for jobs
.normalize_node_index: &normalize_node_index
  - echo "CI_NODE_TOTAL=$CI_NODE_TOTAL , CI_NODE_INDEX=$CI_NODE_INDEX"
  - export NORMALIZED_NODE_TOTAL=${CI_NODE_TOTAL:-1}
  - ONE_INDEXED_NODE_INDEX=${CI_NODE_INDEX:-1}; export NORMALIZED_NODE_INDEX=$((ONE_INDEXED_NODE_INDEX - 1))
  - echo "NORMALIZED_NODE_TOTAL=$NORMALIZED_NODE_TOTAL , NORMALIZED_NODE_INDEX=$NORMALIZED_NODE_INDEX"

.gradle_build: &gradle_build
  image: ghcr.io/datadog/dd-trace-java-docker-build:${JAVA_BUILD_IMAGE_VERSION}-base
  stage: build
  variables:
    GRADLE_OPTS: "-Dorg.gradle.jvmargs='-Xmx2560M -Xms2560M -XX:ErrorFile=/tmp/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp'"
    MAVEN_OPTS: "-Xms64M -Xmx512M"
    GRADLE_WORKERS: 2
    KUBERNETES_CPU_REQUEST: 8
    KUBERNETES_MEMORY_REQUEST: 6Gi
  cache:
    - key: '$CI_SERVER_VERSION-v2' # Dependencies cache. Reset the cache every time gitlab is upgraded.  ~Every couple months
      paths:
        # Cached dependencies and wrappers for gradle
        - .gradle/wrapper
        - .gradle/caches
        - .gradle/notifications
      policy: $DEPENDENCY_CACHE_POLICY
    - key: $CI_PIPELINE_ID-$BUILD_CACHE_TYPE # Incremental build cache. Shared by all jobs in the pipeline of the same type
      paths:
        - .gradle/caches/$GRADLE_VERSION
        - .gradle/$GRADLE_VERSION/executionHistory
        - workspace
      policy: $BUILD_CACHE_POLICY
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - export GRADLE_ARGS=" --build-cache --stacktrace --no-daemon --parallel --max-workers=$GRADLE_WORKERS -PmavenRepositoryProxy=$MAVEN_REPOSITORY_PROXY -PgradlePluginProxy=$GRADLE_PLUGIN_PROXY"
    - *normalize_node_index
    # for weird reasons, gradle will always "chmod 700" the .gradle folder
    # with Gitlab caching, .gradle is always owned by root and thus gradle's chmod invocation fails
    # This dance is a hack to have .gradle owned by the Gitlab runner user
    - mkdir -p .gradle
    - cp -r .gradle .gradle-copy
    - rm -rf .gradle
    - mv .gradle-copy .gradle
    - ls -la

build:
  extends: .gradle_build
  variables:
    BUILD_CACHE_POLICY: push
    BUILD_CACHE_TYPE: lib
    DEPENDENCY_CACHE_POLICY: pull
  script:
    - if [ $CI_PIPELINE_SOURCE == "schedule" ] ; then ./gradlew resolveAndLockAll --write-locks; fi
    - ./gradlew clean :dd-java-agent:shadowJar :dd-trace-api:jar :dd-trace-ot:shadowJar -PskipTests $GRADLE_ARGS
    - echo UPSTREAM_TRACER_VERSION=$(java -jar workspace/dd-java-agent/build/libs/*.jar) >> upstream.env
    - echo "BUILD_JOB_NAME=$CI_JOB_NAME" >> build.env
    - echo "BUILD_JOB_ID=$CI_JOB_ID" >> build.env
  artifacts:
    when: always
    paths:
      - 'workspace/dd-java-agent/build/libs/*.jar'
      - 'workspace/dd-trace-api/build/libs/*.jar'
      - 'workspace/dd-trace-ot/build/libs/*.jar'
      - 'upstream.env'
      - '.gradle/daemon/*/*.out.log'
    reports:
      dotenv: build.env

build_and_populate_dep_cache:
  extends: build
  variables:
    BUILD_CACHE_POLICY: push
    DEPENDENCY_CACHE_POLICY: push
  rules:
    - if: '$POPULATE_CACHE'
      when: on_success
    - when: manual
      allow_failure: true

spotless:
  extends: .gradle_build
  stage: tests
  needs: []
  script:
    - export JAVA_HOME=$JAVA_11_HOME
    - ./gradlew spotlessCheck $GRADLE_ARGS

test_published_artifacts:
  extends: .gradle_build
  image: ghcr.io/datadog/dd-trace-java-docker-build:${JAVA_BUILD_IMAGE_VERSION}-7 # Needs Java7 for some tests
  stage: tests
  needs: [ build ]
  variables:
    BUILD_CACHE_TYPE: lib
  script:
    - mvn_local_repo=$(./mvnw help:evaluate -Dexpression=settings.localRepository -q -DforceStdout)
    - rm -rf "${mvn_local_repo}/com/datadoghq"
    - export GPG_PRIVATE_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.signing.gpg_private_key --with-decryption --query "Parameter.Value" --out text)
    - export GPG_PASSWORD=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.signing.gpg_passphrase --with-decryption --query "Parameter.Value" --out text)
    - export GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx2G -Xms2G -XX:ErrorFile=/tmp/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp'"
    - ./gradlew publishToMavenLocal $GRADLE_ARGS
    - cd test-published-dependencies
    - export GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx512M -Xms512M -XX:ErrorFile=/tmp/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp'"
    - ./gradlew check --info $GRADLE_ARGS
  after_script:
    - .circleci/collect_reports.sh
  artifacts:
    when: always
    paths:
      - ./check_reports

.check_job:
  extends: .gradle_build
  needs: [ build ]
  stage: tests
  variables:
    BUILD_CACHE_TYPE: lib
  script:
    - ./gradlew $GRADLE_TARGET -PskipTests -PrunBuildSrcTests -PskipSpotless -PtaskPartitionCount=$NORMALIZED_NODE_TOTAL -PtaskPartition=$NORMALIZED_NODE_INDEX $GRADLE_ARGS
  after_script:
    - .circleci/collect_reports.sh --destination ./check_reports --move
  artifacts:
    when: always
    paths:
      - ./check_reports
      - '.gradle/daemon/*/*.out.log'

check_base:
  extends: .check_job
  variables:
    GRADLE_TARGET: ":baseCheck"

check_inst:
  extends: .check_job
  parallel: 4
  variables:
    GRADLE_TARGET: ":instrumentationCheck"

check_smoke:
  extends: .check_job
  parallel: 4
  variables:
    GRADLE_TARGET: ":smokeCheck"

check_profiling:
  extends: .check_job
  variables:
    GRADLE_TARGET: ":profilingCheck"

check_debugger:
  extends: .check_job
  variables:
    GRADLE_TARGET: ":debuggerCheck"

muzzle:
  extends: .gradle_build
  needs: [ build ]
  stage: tests
  parallel: 8
  variables:
    BUILD_CACHE_TYPE: lib
  script:
    - export SKIP_BUILDSCAN="true"
    - ./gradlew writeMuzzleTasksToFile $GRADLE_ARGS
    - sort workspace/build/muzzleTasks > sortedMuzzleTasks
    - split --number=l/$NORMALIZED_NODE_TOTAL --suffix-length=1 --numeric-suffixes sortedMuzzleTasks muzzleSplit
    - ./gradlew `cat muzzleSplit${NORMALIZED_NODE_INDEX} | xargs` $GRADLE_ARGS
  after_script:
    - .circleci/collect_reports.sh
  artifacts:
    when: always
    paths:
      - ./reports
      - '.gradle/daemon/*/*.out.log'

muzzle-dep-report:
  extends: .gradle_build
  needs: [ build ]
  stage: tests
  variables:
    BUILD_CACHE_TYPE: test
  script:
    - export SKIP_BUILDSCAN="true"
    - ./gradlew generateMuzzleReport muzzleInstrumentationReport $GRADLE_ARGS
  after_script:
    - .circleci/collect_muzzle_deps.sh
  artifacts:
    when: always
    paths:
      - ./reports
      - '.gradle/daemon/*/*.out.log'

# In Gitlab, DD_* variables are set because the build runner is instrumented with Datadog telemetry
# To have a pristine environment for the tests, these variables are saved before the test run and restored afterwards
.prepare_test_env: &prepare_test_env
  - export gitlabVariables=("DD_SERVICE" "DD_ENTITY_ID" "DD_SITE" "DD_ENV" "DD_DATACENTER" "DD_PARTITION" "DD_CLOUDPROVIDER")
  - '[ ! -e pretest.env ] || rm pretest.env'
  - |
    for VARIABLE in "${gitlabVariables[@]}"
    do
      echo "export $VARIABLE=${!VARIABLE}" >> pretest.env
      unset "$VARIABLE"
    done

.restore_pretest_env: &restore_pretest_env
  - source pretest.env

.test_job:
  extends: .gradle_build
  image: ghcr.io/datadog/dd-trace-java-docker-build:$testJvm
  needs: [ build ]
  stage: tests
  variables:
    BUILD_CACHE_TYPE: lib
    GRADLE_PARAMS: ""
    CONTINUE_ON_FAILURE: "false"
  script:
    - > 
      if [ "$PROFILE_TESTS" == "true" ] && [ "$testJvm" != "ibm8" ] && [ "$testJvm" != "oracle8" ];
      then
      export PROFILER_COMMAND="-XX:StartFlightRecording=settings=profile,filename=/tmp/${CI_JOB_NAME_SLUG}.jfr,dumponexit=true";
      fi
    - *prepare_test_env
    - export GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xms2G -Xmx2G $PROFILER_COMMAND -XX:ErrorFile=/tmp/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp' -Ddatadog.forkedMaxHeapSize=768M -Ddatadog.forkedMinHeapSize=128M"
    - ./gradlew $GRADLE_TARGET $GRADLE_PARAMS -PtestJvm=$testJvm $GRADLE_ARGS --continue || $CONTINUE_ON_FAILURE
  after_script:
    - *restore_pretest_env
    - *set_datadog_api_keys
    - .circleci/collect_reports.sh
    - if [ "$PROFILE_TESTS" == "true" ]; then .circleci/collect_profiles.sh; fi
    - .circleci/collect_results.sh
    - .circleci/upload_ciapp.sh tests $testJvm
# TODO Get APM Test Agent Trace Check Results
  artifacts:
    when: always
    paths:
      - ./reports.tar
      - ./profiles.tar
      - ./results
      - '.gradle/daemon/*/*.out.log'

agent_integration_tests:
  extends: .test_job
  variables:
    testJvm: "8"
    CI_AGENT_HOST: local-agent
    GRADLE_TARGET: "traceAgentTest"
  services:
    - name: datadog/agent:7.34.0
      alias: local-agent
      variables:
        DD_APM_ENABLED: "true"
        DD_BIND_HOST: "0.0.0.0"
        DD_API_KEY: "invalid_key_but_this_is_fine"

required:
  extends: .fan_in
  needs:
    - job: spotless
      optional: true
    - job: muzzle
      optional: true
    - job: test_published_artifacts
      optional: true
    - job: agent_integration_tests
      optional: true
    - job: check_base
      optional: true
    - job: check_inst
      optional: true
    - job: check_smoke
      optional: true
    - job: check_profiling
      optional: true
    - job: check_debugger
      optional: true

deploy_to_profiling_backend:
  stage: publish
  needs: [ build ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/profiling-backend
    branch: dogfooding
  variables:
    UPSTREAM_PACKAGE_JOB: $BUILD_JOB_NAME
    UPSTREAM_PACKAGE_JOB_ID: $BUILD_JOB_ID
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_BRANCH: $CI_COMMIT_BRANCH
    UPSTREAM_TAG: $CI_COMMIT_TAG

trigger_tibco_tests:
  stage: tests
  needs: [ build ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/tibco-testing
    branch: main
    strategy: depend
  variables:
    UPSTREAM_PACKAGE_JOB: $BUILD_JOB_NAME
    UPSTREAM_PACKAGE_JOB_ID: $BUILD_JOB_ID
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_BRANCH: $CI_COMMIT_BRANCH
    UPSTREAM_TAG: $CI_COMMIT_TAG
    FORCE_TRIGGER: $FORCE_TRIGGER

deploy_to_di_backend:manual:
  stage: publish
  needs: [ build ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/debugger-demos
    branch: main
  variables:
    UPSTREAM_PACKAGE_JOB: build
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_BRANCH: $CI_COMMIT_BRANCH
    UPSTREAM_TAG: $CI_COMMIT_TAG
    UPSTREAM_COMMIT_AUTHOR: $CI_COMMIT_AUTHOR
    UPSTREAM_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA

deploy_to_sonatype:
  extends: .gradle_build
  stage: publish
  needs: [ build ]
  variables:
    BUILD_CACHE_TYPE: lib
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    # Do not deploy release candidate versions
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      when: on_success
    - when: manual
      allow_failure: true
  script:
    - export SONATYPE_USERNAME=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.sonatype_username --with-decryption --query "Parameter.Value" --out text)
    - export SONATYPE_PASSWORD=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.sonatype_password --with-decryption --query "Parameter.Value" --out text)
    - export GPG_PRIVATE_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.signing.gpg_private_key --with-decryption --query "Parameter.Value" --out text)
    - export GPG_PASSWORD=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.signing.gpg_passphrase --with-decryption --query "Parameter.Value" --out text)
    - ./gradlew -PbuildInfo.build.number=$CI_JOB_ID publishToSonatype closeSonatypeStagingRepository -PskipTests $GRADLE_ARGS
  artifacts:
    paths:
      - 'workspace/dd-java-agent/build/libs/*.jar'
      - 'workspace/dd-trace-api/build/libs/*.jar'
      - 'workspace/dd-trace-ot/build/libs/*.jar'

deploy_artifacts_to_github:
  stage: publish
  image: registry.ddbuild.io/github-cli:v27480869-eafb11d-2.43.0
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      when: on_success
  # Requires the deploy_to_sonatype job to have run first the UP-TO-DATE gradle check across jobs is broken
  # This will deploy the artifacts built from the publishToSonatype task to the GitHub release
  needs:
    - job: deploy_to_sonatype
      # The deploy_to_sonatype job is not run for release candidate versions
      optional: true
  script:
    - aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.gh_release_token --with-decryption --query "Parameter.Value" --out text > github-token.txt
    - gh auth login --with-token < github-token.txt
    - gh auth status  # Maybe helpful to have this output in logs?
    - export VERSION=${CI_COMMIT_TAG##v} # remove "v" from front of tag to get version
    - cp workspace/dd-java-agent/build/libs/dd-java-agent-${VERSION}.jar workspace/dd-java-agent/build/libs/dd-java-agent.jar # we upload two filenames
    - gh release upload --clobber --repo DataDog/dd-trace-java $CI_COMMIT_TAG workspace/dd-java-agent/build/libs/dd-java-agent.jar
    - gh release upload --clobber --repo DataDog/dd-trace-java $CI_COMMIT_TAG workspace/dd-java-agent/build/libs/dd-java-agent-${VERSION}.jar
    - gh release upload --clobber --repo DataDog/dd-trace-java $CI_COMMIT_TAG workspace/dd-trace-api/build/libs/dd-trace-api-${VERSION}.jar
    - gh release upload --clobber --repo DataDog/dd-trace-java $CI_COMMIT_TAG workspace/dd-trace-ot/build/libs/dd-trace-ot-${VERSION}.jar
  retry:
    max: 2
    when: always

requirements_json_test:
  rules:
    - when: on_success
  variables:
    REQUIREMENTS_BLOCK_JSON_PATH: "metadata/requirements-block.json"
    REQUIREMENTS_ALLOW_JSON_PATH: "metadata/requirements-allow.json"

package-oci:
  needs: [ build ]

configure_system_tests:
  variables:
    SYSTEM_TESTS_SCENARIOS_GROUPS: "simple_onboarding,simple_onboarding_profiling,docker-ssi,lib-injection"

create_key:
  stage: generate-signing-key
  when: manual
  needs: [ ]
  variables:
    PROJECT_NAME: "dd-trace-java"
    EXPORT_TO_KEYSERVER: "true"
  image: $REGISTRY/ci/agent-key-management-tools/gpg:1
  script:
    - /create.sh
  artifacts:
    expire_in: 13 mos
    paths:
      - pubkeys

tracer-base-image-release:
  extends: .ci_authenticated_job
  stage: publish
  needs: [ build ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v1\..*/'
      when: on_success
  dependencies:
    - build
  script:
    - echo $GH_TOKEN|docker login ghcr.io/datadog -u uploader --password-stdin
    - mkdir -p ./tooling/ci/binaries/ && cp workspace/dd-java-agent/build/libs/*.jar ./tooling/ci/binaries/dd-java-agent.jar
    - docker buildx build -t ghcr.io/datadog/dd-trace-java/dd-trace-java:latest -f ./tooling/ci/Dockerfile .
    - docker push ghcr.io/datadog/dd-trace-java/dd-trace-java:latest

tracer-base-image-snapshot:
  extends: .ci_authenticated_job
  stage: publish
  needs: [ build ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
  dependencies:
    - build
  script:
    - echo $GH_TOKEN|docker login ghcr.io/datadog -u uploader --password-stdin
    - mkdir -p ./tooling/ci/binaries/ && cp workspace/dd-java-agent/build/libs/*.jar ./tooling/ci/binaries/dd-java-agent.jar
    - docker buildx build -t ghcr.io/datadog/dd-trace-java/dd-trace-java:latest_snapshot -f ./tooling/ci/Dockerfile .
    - docker push ghcr.io/datadog/dd-trace-java/dd-trace-java:latest_snapshot  
