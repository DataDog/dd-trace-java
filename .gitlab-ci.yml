stages:
  - build
  - tests

variables:
  # Gitlab runner features; see https://docs.gitlab.com/runner/configuration/feature-flags.html
  # Fold and time all script sections
  FF_SCRIPT_SECTIONS: 1

  REGISTRY: 486234852809.dkr.ecr.us-east-1.amazonaws.com
  BUILD_JOB_NAME: "build"
  DEPENDENCY_CACHE_POLICY: pull
  BUILD_CACHE_POLICY: pull
  GRADLE_VERSION: "8.14.3" # must match gradle-wrapper.properties
  MAVEN_REPOSITORY_PROXY: "https://depot-read-api-java.us1.ddbuild.io/magicmirror/magicmirror/@current/"
  GRADLE_PLUGIN_PROXY: "https://depot-read-api-java.us1.ddbuild.io/magicmirror/magicmirror/@current/"
  BUILDER_IMAGE_VERSION_PREFIX: "v25.07-" # use either an empty string (e.g. "") for latest images or a version followed by a hyphen (e.g. "v25.05-")
  REPO_NOTIFICATION_CHANNEL: "#apm-java-escalations"
  DEFAULT_TEST_JVMS: /^(8|11|17|21|stable)$/
  PROFILE_TESTS:
    description: "Enable profiling of tests"
    value: "false"
  NON_DEFAULT_JVMS:
    description: "Enable tests on JVMs that are not the default"
    value: "false"
  RUN_FLAKY_TESTS:
    description: "Enable flaky tests"
    value: "false"

# trigger new commit cancel
workflow:
  auto_cancel:
    on_new_commit: interruptible
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      auto_cancel:
        on_new_commit: none
    - if: '$CI_COMMIT_BRANCH =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      auto_cancel:
        on_new_commit: none
    - when: always

default:
  tags: [ "arch:amd64" ]
  interruptible: true

.set_datadog_api_keys: &set_datadog_api_keys
  - export DATADOG_API_KEY_PROD=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.DATADOG_API_KEY_PROD --with-decryption --query "Parameter.Value" --out text)

# CI_NODE_INDEX and CI_NODE_TOTAL are 1-indexed and not always set. These steps normalize the numbers for jobs
.normalize_node_index: &normalize_node_index
  - if [ "$CI_NO_SPLIT" == "true" ] ; then CI_NODE_INDEX=1; CI_NODE_TOTAL=1; fi # A job uses parallel but doesn't intend to split by index
  - if [ -n "$CI_SPLIT" ]; then CI_NODE_INDEX="${CI_SPLIT%%/*}"; CI_NODE_TOTAL="${CI_SPLIT##*/}"; fi
  - echo "CI_NODE_TOTAL=${CI_NODE_TOTAL}, CI_NODE_INDEX=$CI_NODE_INDEX"
  - export NORMALIZED_NODE_TOTAL=${CI_NODE_TOTAL:-1}
  - ONE_INDEXED_NODE_INDEX=${CI_NODE_INDEX:-1}; export NORMALIZED_NODE_INDEX=$((ONE_INDEXED_NODE_INDEX - 1))
  - echo "NORMALIZED_NODE_TOTAL=${NORMALIZED_NODE_TOTAL}, NORMALIZED_NODE_INDEX=$NORMALIZED_NODE_INDEX"

.cgroup_info: &cgroup_info
  - source .gitlab/gitlab-utils.sh
  - gitlab_section_start "cgroup-info" "cgroup info"
  - .gitlab/cgroup-info.sh
  - gitlab_section_end "cgroup-info"

.gitlab_base_ref_params: &gitlab_base_ref_params
  - |
    export GIT_BASE_REF=$(.gitlab/find-gh-base-ref.sh)
    if [[ -n "$GIT_BASE_REF" ]]; then
      export GRADLE_PARAMS="$GRADLE_PARAMS -PgitBaseRef=origin/$GIT_BASE_REF"
    else
      echo "Failed to find base ref for PR" >&2
    fi

.gradle_build: &gradle_build
  image: ghcr.io/datadog/dd-trace-java-docker-build:${BUILDER_IMAGE_VERSION_PREFIX}base
  stage: build
  variables:
    MAVEN_OPTS: "-Xms64M -Xmx512M"
    GRADLE_WORKERS: 2
    GRADLE_MEM: 2560M
    KUBERNETES_CPU_REQUEST: 8
    KUBERNETES_MEMORY_REQUEST: 8Gi
    KUBERNETES_MEMORY_LIMIT: 8Gi
    CACHE_TYPE: lib #default
    FF_USE_FASTZIP: "true"
    CACHE_COMPRESSION_LEVEL: "slowest"

    RUNTIME_AVAILABLE_PROCESSORS_OVERRIDE: 4 # Runtime.getRuntime().availableProcessors() returns incorrect or very high values in Kubernetes
    GIT_SUBMODULE_STRATEGY: normal
    GIT_SUBMODULE_DEPTH: 1
  cache:
    - key: dependency-$CACHE_TYPE # Dependencies cache
      paths:
        # Cached dependencies and wrappers for gradle
        - .gradle/wrapper
        - .gradle/caches
        - .gradle/notifications
      policy: $DEPENDENCY_CACHE_POLICY
      unprotect: true
      fallback_keys: # Use fallback keys because all cache types are not populated. See note under: populate_dep_cache
        - 'dependency-base'
        - 'dependency-lib'
    - key: $CI_PIPELINE_ID-$CACHE_TYPE # Incremental build cache. Shared by all jobs in the pipeline of the same type
      paths:
        - .gradle/caches/$GRADLE_VERSION
        - .gradle/$GRADLE_VERSION/executionHistory
        - workspace
      policy: $BUILD_CACHE_POLICY
      unprotect: true
  before_script:
    - source .gitlab/gitlab-utils.sh
    # Akka token added to SSM from https://account.akka.io/token
    - export AKKA_REPO_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.akka_repo_token --with-decryption --query "Parameter.Value" --out text)
    - mkdir -p .gradle
    - export GRADLE_USER_HOME=$(pwd)/.gradle
    - |
      # Don't put jvm args here as it will be picked up by child gradle processes used in tests
      cat << EOF > $GRADLE_USER_HOME/gradle.properties
      mavenRepositoryProxy=$MAVEN_REPOSITORY_PROXY
      gradlePluginProxy=$GRADLE_PLUGIN_PROXY
      akkaRepositoryToken=$AKKA_REPO_TOKEN
      EOF
    - |
      # replace maven central part by MAVEN_REPOSITORY_PROXY in .mvn/wrapper/maven-wrapper.properties
      sed -i "s|https://repo.maven.apache.org/maven2/|$MAVEN_REPOSITORY_PROXY|g" .mvn/wrapper/maven-wrapper.properties
    - export GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx$GRADLE_MEM -Xms$GRADLE_MEM -XX:ErrorFile=/tmp/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp'"
    - export GRADLE_ARGS=" --build-cache --stacktrace --no-daemon --parallel --max-workers=$GRADLE_WORKERS"
    - *normalize_node_index
    # for weird reasons, gradle will always "chmod 700" the .gradle folder
    # with Gitlab caching, .gradle is always owned by root and thus gradle's chmod invocation fails
    # This dance is a hack to have .gradle owned by the Gitlab runner user
    - gitlab_section_start "gradle-dance" "Fix .gradle directory permissions"
    - cp -r .gradle .gradle-copy
    - rm -rf .gradle
    - mv .gradle-copy .gradle
    - ls -la
    - gitlab_section_end "gradle-dance"
  after_script:
    - *cgroup_info

# In Gitlab, DD_* variables are set because the build runner is instrumented with Datadog telemetry
# To have a pristine environment for the tests, these variables are saved before the test run and restored afterwards
.prepare_test_env: &prepare_test_env
  - export gitlabVariables=("DD_SERVICE" "DD_ENTITY_ID" "DD_SITE" "DD_ENV" "DD_DATACENTER" "DD_PARTITION" "DD_CLOUDPROVIDER")
  - '[ ! -e pretest.env ] || rm pretest.env'
  - |
    for VARIABLE in "${gitlabVariables[@]}"
    do
      echo "export $VARIABLE=${!VARIABLE}" >> pretest.env
      unset "$VARIABLE"
    done

.restore_pretest_env: &restore_pretest_env
  - source pretest.env

.test_job:
  extends: .gradle_build
  image: ghcr.io/datadog/dd-trace-java-docker-build:${BUILDER_IMAGE_VERSION_PREFIX}$testJvm
  tags: [ "docker-in-docker:amd64" ] # use docker-in-docker runner for testcontainers
  needs: [ build_tests ]
  stage: tests
  variables:
    KUBERNETES_MEMORY_REQUEST: 17Gi
    KUBERNETES_MEMORY_LIMIT: 17Gi
    KUBERNETES_CPU_REQUEST: 10
    GRADLE_WORKERS: 4
    GRADLE_MEM: 3G
    GRADLE_PARAMS: "-PskipFlakyTests"
    CONTINUE_ON_FAILURE: "false"
    TESTCONTAINERS_CHECKS_DISABLE: "true"
    TESTCONTAINERS_RYUK_DISABLED: "true"
    TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX: "registry.ddbuild.io/images/mirror/"
    JETTY_AVAILABLE_PROCESSORS: 4 # Jetty incorrectly calculates processor count in containers
  rules:
    - if: $testJvm =~ $DEFAULT_TEST_JVMS
      when: on_success
    - if: $NON_DEFAULT_JVMS == "true"
      when: on_success
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success
  script:
    - *gitlab_base_ref_params
    - >
      if [ "$PROFILE_TESTS" == "true" ] && [ "$testJvm" != "ibm8" ] && [ "$testJvm" != "oracle8" ];
      then
      export PROFILER_COMMAND="-XX:StartFlightRecording=settings=profile,filename=/tmp/${CI_JOB_NAME_SLUG}.jfr,dumponexit=true";
      fi
    - *prepare_test_env
    - export GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xms$GRADLE_MEM -Xmx$GRADLE_MEM $PROFILER_COMMAND -XX:ErrorFile=/tmp/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp' -Ddatadog.forkedMaxHeapSize=1024M -Ddatadog.forkedMinHeapSize=128M"
    - ./gradlew $GRADLE_TARGET $GRADLE_PARAMS -PtestJvm=$testJvm -PtaskPartitionCount=$NORMALIZED_NODE_TOTAL -PtaskPartition=$NORMALIZED_NODE_INDEX $GRADLE_ARGS --continue || $CONTINUE_ON_FAILURE
  after_script:
    - *restore_pretest_env
    - *set_datadog_api_keys
    - *cgroup_info
    - source .gitlab/gitlab-utils.sh
    - gitlab_section_start "collect-reports" "Collecting reports"
    - .gitlab/collect_reports.sh
    - if [ "$PROFILE_TESTS" == "true" ]; then .gitlab/collect_profiles.sh; fi
    - .gitlab/collect_results.sh
    - .gitlab/upload_ciapp.sh $CACHE_TYPE $testJvm
    - gitlab_section_end "collect-reports"
    - URL_ENCODED_JOB_NAME=$(jq -rn --arg x "$CI_JOB_NAME" '$x|@uri')
    - echo -e "${TEXT_BOLD}${TEXT_YELLOW}See test results in Datadog:${TEXT_CLEAR} https://app.datadoghq.com/ci/test/runs?query=test_level%3Atest%20%40test.service%3Add-trace-java%20%40ci.pipeline.id%3A${CI_PIPELINE_ID}%20%40ci.job.name%3A%22${URL_ENCODED_JOB_NAME}%22"
  artifacts:
    when: always
    paths:
      - ./reports.tar
      - ./profiles.tar
      - ./results
      - '.gradle/daemon/*/*.out.log'
    reports:
      junit: results/*.xml
  retry:
    max: 2
    when:
      - unknown_failure
      - stuck_or_timeout_failure
      - runner_system_failure
      - unmet_prerequisites
      - scheduler_failure
      - data_integrity_failure

build:
  extends: .gradle_build
  variables:
    BUILD_CACHE_POLICY: push
    CACHE_TYPE: lib
    DEPENDENCY_CACHE_POLICY: pull
  script:
    - if [ $CI_PIPELINE_SOURCE == "schedule" ] ; then ./gradlew resolveAndLockAll --write-locks $GRADLE_ARGS; fi
    - ./gradlew clean :dd-java-agent:shadowJar :dd-trace-api:jar :dd-trace-ot:shadowJar -PskipTests $GRADLE_ARGS
    - echo UPSTREAM_TRACER_VERSION=$(java -jar workspace/dd-java-agent/build/libs/*.jar) >> upstream.env
    - echo "BUILD_JOB_NAME=$CI_JOB_NAME" >> build.env
    - echo "BUILD_JOB_ID=$CI_JOB_ID" >> build.env
  artifacts:
    when: always
    paths:
      - 'workspace/dd-java-agent/build/libs/*.jar'
      - 'workspace/dd-trace-api/build/libs/*.jar'
      - 'workspace/dd-trace-ot/build/libs/*.jar'
      - 'upstream.env'
      - '.gradle/daemon/*/*.out.log'
    reports:
      dotenv: build.env

build_tests:
  extends: .gradle_build
  variables:
    BUILD_CACHE_POLICY: push
    DEPENDENCY_CACHE_POLICY: pull
    GRADLE_MEM: 4G
    GRADLE_WORKERS: 3
    KUBERNETES_MEMORY_REQUEST: 18Gi
    KUBERNETES_MEMORY_LIMIT: 18Gi
    GRADLE_TARGET: ":instrumentationTest"
    CACHE_TYPE: "inst"
  script:
    - *gitlab_base_ref_params
    - ./gradlew clean $GRADLE_TARGET $GRADLE_PARAMS -PskipTests $GRADLE_ARGS

.couchbase_test_matrix: &couchbase_test_matrix
  - testJvm:
      - "8"
      - "11"
      - "17"
      - "21"
      - "stable"

test_couchbase_only:
  extends: .test_job
  variables:
    CACHE_TYPE: "inst"
  needs: [ build_tests ]
  parallel:
    matrix: *couchbase_test_matrix
  script:
    - *gitlab_base_ref_params
    - *prepare_test_env
    - export GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xms$GRADLE_MEM -Xmx$GRADLE_MEM -XX:ErrorFile=/tmp/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp' -Ddatadog.forkedMaxHeapSize=1024M -Ddatadog.forkedMinHeapSize=128M"
    - ./gradlew :dd-java-agent:instrumentation:couchbase:couchbase-3.1:test :dd-java-agent:instrumentation:couchbase:couchbase-3.1:forkedTest $GRADLE_PARAMS -PtestJvm=$testJvm --tests="*CouchbaseClient31V0Test" --tests="*CouchbaseClient31V1ForkedTest" $GRADLE_ARGS --continue || $CONTINUE_ON_FAILURE