include:
  - remote: https://gitlab-templates.ddbuild.io/libdatadog/include/ci_authenticated_job.yml
  - remote: https://gitlab-templates.ddbuild.io/libdatadog/include/one-pipeline.yml
  - local: ".gitlab/benchmarks.yml"
  - local: ".gitlab/macrobenchmarks.yml"
  - local: ".gitlab/exploration-tests.yml"
  - local: ".gitlab/ci-visibility-tests.yml"

stages:
  - build
  - shared-pipeline
  - publish
  - benchmarks
  - macrobenchmarks
  - tests
  - exploration-tests
  - ci-visibility-tests
  - generate-signing-key

#TODO display memory usage
#TODO test containers
#TODO paralization (muzzle)
#TODO publish tests to datadog
#TODO agent_integration_tests
#TODO no output timeout

variables:
  REGISTRY: 486234852809.dkr.ecr.us-east-1.amazonaws.com
  BUILD_JOB_NAME: "build"
  DEPENDENCY_CACHE_POLICY: pull
  BUILD_CACHE_POLICY: pull
  GRADLE_VERSION: "8.4" # must match gradle-wrapper.properties
  PROFILE_TESTS:
    description: "Enable profiling of tests"
    value: "false"
  SYSTEM_TESTS_COMMIT:
    description: "Commit hash of system tests to use"
    value: "c706e333ef06800b866ac300e4b6cdb7566cc5e5"

.test_matrix: &test_matrix
    - testJvm:
        - "8"
        - "semeru11"
        - "oracle8"
        - "21"
        - "ubuntu17"
        - "zulu8"
        - "semeru8"
        - "ibm8"
        - "zulu11"
        - "11"
        - "17"
        - "semeru17"

default:
  tags: [ "arch:amd64" ]

.gradle_build: &gradle_build
  image: ghcr.io/datadog/dd-trace-java-docker-build:v24.10-base
  stage: build
  variables:
    GRADLE_OPTS: "-Dorg.gradle.jvmargs='-Xmx2560M -Xms2560M -XX:ErrorFile=/tmp/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp'"
    MAVEN_OPTS: "-Xms64M -Xmx512M"
    GRADLE_ARGS: " --build-cache --stacktrace --no-daemon --parallel --max-workers=2"
    KUBERNETES_CPU_REQUEST: 8
    KUBERNETES_MEMORY_REQUEST: 6Gi
  cache:
    - key: '$CI_SERVER_VERSION-v2' # Dependencies cache. Reset the cache every time gitlab is upgraded.  ~Every couple months
      paths:
        # Cached dependencies and wrappers for gradle
        - .gradle/wrapper
        - .gradle/caches
        - .gradle/notifications
      policy: $DEPENDENCY_CACHE_POLICY
    - key: $CI_PIPELINE_ID-$BUILD_CACHE_TYPE # Incremental build cache. Shared by all jobs in the pipeline of the same type
      paths:
        - .gradle/caches/$GRADLE_VERSION
        - .gradle/$GRADLE_VERSION/executionHistory
        - workspace
      policy: $BUILD_CACHE_POLICY
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    # for weird reasons, gradle will always "chmod 700" the .gradle folder
    # with Gitlab caching, .gradle is always owned by root and thus gradle's chmod invocation fails
    # This dance is a hack to have .gradle owned by the Gitlab runner user
    - mkdir -p .gradle
    - cp -r .gradle .gradle-copy
    - rm -rf .gradle
    - mv .gradle-copy .gradle
    - ls -la

build:
  extends: .gradle_build
  variables:
    BUILD_CACHE_POLICY: push
    BUILD_CACHE_TYPE: lib
    DEPENDENCY_CACHE_POLICY: pull
  script:
    - ./gradlew resolveAndLockAll --write-locks
    - ./gradlew clean :dd-java-agent:shadowJar :dd-trace-api:jar :dd-trace-ot:shadowJar -PskipTests $GRADLE_ARGS
    - echo UPSTREAM_TRACER_VERSION=$(java -jar workspace/dd-java-agent/build/libs/*.jar) >> upstream.env
    - echo "BUILD_JOB_NAME=$CI_JOB_NAME" >> build.env
    - echo "BUILD_JOB_ID=$CI_JOB_ID" >> build.env
  artifacts:
    paths:
      - 'workspace/dd-java-agent/build/libs/*.jar'
      - 'workspace/dd-trace-api/build/libs/*.jar'
      - 'workspace/dd-trace-ot/build/libs/*.jar'
      - 'upstream.env'
      - '.gradle/daemon/*/*.out.log'
    reports:
      dotenv: build.env

build_tests:
  extends: .gradle_build
  variables:
    BUILD_CACHE_POLICY: push
    BUILD_CACHE_TYPE: test
    DEPENDENCY_CACHE_POLICY: pull
  script:
    - ./gradlew resolveAndLockAll --write-locks
    - ./gradlew clean :baseTest :instrumentationTest :instrumentationLatestDepTest :instrumentationTest :profilingTest -PskipTests $GRADLE_ARGS

build_and_populate_dep_cache:
  extends: build
  variables:
    BUILD_CACHE_POLICY: push
    DEPENDENCY_CACHE_POLICY: push
  rules:
    - if: '$POPULATE_CACHE'
      when: on_success
    - when: manual
      allow_failure: true

spotless:
  extends: .gradle_build
  script:
    - export JAVA_HOME=$JAVA_11_HOME
    - ./gradlew spotlessCheck $GRADLE_ARGS

.check_job:
  extends: .gradle_build
  needs: [ "build_tests" ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - when: always
  variables:
    BUILD_CACHE_TYPE: test
  script:
    - ./gradlew $GRADLE_TARGET -PskipTests -PrunBuildSrcTests -PskipSpotless $GRADLE_ARGS
  after_script:
    - .circleci/collect_reports.sh --destination ./check_reports --move
  artifacts:
    paths:
      - ./check_reports
      - '.gradle/daemon/*/*.out.log'

check_base:
  extends: .check_job
  variables:
    GRADLE_TARGET: ":baseCheck"

check_inst:
  extends: .check_job
  variables:
    GRADLE_TARGET: ":instrumentationCheck"

check_smoke:
  extends: .check_job
  variables:
    GRADLE_TARGET: ":smokeCheck"

check_profiling:
  extends: .check_job
  variables:
    GRADLE_TARGET: ":profilingCheck"

check_debugger:
  extends: .check_job
  variables:
    GRADLE_TARGET: ":debuggerCheck"

test_published_artifacts:
  extends: .gradle_build
  needs: [ build ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - when: always
  variables:
    BUILD_CACHE_TYPE: lib
  script:
    - mvn_local_repo=$(./mvnw help:evaluate -Dexpression=settings.localRepository -q -DforceStdout)
    - rm -rf "${mvn_local_repo}/com/datadoghq"
    - export GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx2G -Xms2G -XX:ErrorFile=/tmp/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp'"
    - ./gradlew publishToMavenLocal $GRADLE_ARGS
    - cd test-published-dependencies
    - export GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx512M -Xms512M -XX:ErrorFile=/tmp/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp'"
    - ./gradlew check --info $GRADLE_ARGS
  after_script:
    - .circleci/collect_reports.sh
  artifacts:
    paths:
      - ./check_reports

muzzle:
  extends: .gradle_build
  needs: [ build_tests ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - when: always
  variables:
    BUILD_CACHE_TYPE: test
  script:
    - export SKIP_BUILDSCAN="true"
    - ./gradlew muzzle $GRADLE_ARGS
  after_script:
    - .circleci/collect_reports.sh
  artifacts:
    paths:
      - ./reports
      - '.gradle/daemon/*/*.out.log'

muzzle-dep-report:
  extends: .gradle_build
  needs: [ build_tests ]
  variables:
    BUILD_CACHE_TYPE: test
  script:
    - export SKIP_BUILDSCAN="true"
    - ./gradlew generateMuzzleReport muzzleInstrumentationReport $GRADLE_ARGS
  after_script:
    - .circleci/collect_muzzle_deps.sh
  artifacts:
    paths:
      - ./reports
      - '.gradle/daemon/*/*.out.log'

.test_job:
  extends: .gradle_build
  needs: [ build_tests ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - when: always
  variables:
    BUILD_CACHE_TYPE: test
    GRADLE_PARAMS: ""
    CONTINUE_ON_FAILURE: "false"
  script:
    - > 
      if [ "$PROFILE_TESTS" == "true" ] && [ "$testJvm" != "ibm8" ] && [ "$testJvm" != "oracle8" ];
      then
      export PROFILER_COMMAND="-XX:StartFlightRecording=settings=profile,filename=/tmp/${CI_JOB_NAME_SLUG}.jfr,dumponexit=true";
      fi
    - export GRADLE_OPTS="GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xms2G -Xmx2G $PROFILER_COMMAND -XX:ErrorFile=/tmp/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp' -Ddatadog.forkedMaxHeapSize=768M -Ddatadog.forkedMinHeapSize=128M"
    - ./gradlew $GRADLE_TARGET $GRADLE_PARAMS -PtestJvm=$testJvm $GRADLE_ARGS --continue || $CONTINUE_ON_FAILURE
  after_script:
    - .circleci/collect_reports.sh
    - if [ "$PROFILE_TESTS" == "true" ]; then .circleci/collect_profiles.sh; fi
    - .circleci/collect_results.sh
# TODO upload test results
# TODO Get APM Test Agent Trace Check Results
  artifacts:
    paths:
      - ./reports.tar
      - ./profiles.tar
      - ./results
      - '.gradle/daemon/*/*.out.log'

test_base:
  extends: .test_job
  variables:
    GRADLE_TARGET: ":baseTest"
    GRADLE_PARAMS: "-PskipFlakyTests"
  parallel:
    matrix: *test_matrix
  script:
    - if [ "$testJvm" == "8" ]; then export GRADLE_PARAMS="-PskipFlakyTests -PcheckCoverage"; fi
    - !reference [.test_job, script]

test_inst:
  extends: .test_job
  variables:
    GRADLE_TARGET: ":instrumentationTest"
    GRADLE_PARAMS: "-PskipFlakyTests"
  parallel:
    matrix: *test_matrix

test_inst_latest:
  extends: .test_job
  variables:
    GRADLE_TARGET: ":instrumentationLatestDepTest"
    GRADLE_PARAMS: "-PskipFlakyTests"
  parallel:
    matrix:
      - testJvm: ["8", "17", "21" ]

test_flaky:
  extends: .test_job
  variables:
    GRADLE_PARAMS: "-PrunFlakyTests"
    testJvm: "8"
    CONTINUE_ON_FAILURE: "true"
  parallel:
    matrix:
      - GRADLE_TARGET: [":baseTest", ":instrumentationTest", ":smokeTest", ":debuggerTest"]

test_profiling:
  extends: .test_job
  variables:
    GRADLE_TARGET: ":profilingTest"
    GRADLE_PARAMS: "-PskipFlakyTests"
  parallel:
    matrix: *test_matrix

test_debugger:
  extends: .test_job
  variables:
    GRADLE_TARGET: ":debuggerTest"
    GRADLE_PARAMS: "-PskipFlakyTests"
  parallel:
    matrix: *test_matrix

test_smoke:
  extends: .test_job
  variables:
    GRADLE_TARGET: "stageMainDist :smokeTest"
    GRADLE_PARAMS: "-PskipFlakyTests"
  parallel:
    matrix: *test_matrix

test_ssi_smoke:
  extends: .test_job
  variables:
    GRADLE_TARGET: "stageMainDist :smokeTest"
    GRADLE_PARAMS: "-PskipFlakyTests"
    DD_INJECT_FORCE: "true"
    DD_INJECTION_ENABLED: "tracer"
  parallel:
    matrix: *test_matrix

test_smoke_graalvm:
  extends: .test_job
  variables:
    GRADLE_TARGET: "stageMainDist :dd-smoke-test:spring-boot-3.0-native:test"
  parallel:
    matrix:
      - testJvm: ["graalvm17", "graalvm21"]

test_smoke_semeru8_debugger:
  extends: .test_job
  variables:
    GRADLE_TARGET: "stageMainDist dd-smoke-tests:debugger-integration-tests:test"
    GRADLE_PARAMS: "-PskipFlakyTests"
    testJvm: "semeru8"

.system-tests-job:
  image: $SYSTEM_TESTS_IMAGE
  tags: [ "runner:docker" ]
  stage: tests
  needs: [ build ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - when: always
  variables:
    BUILD_CACHE_TYPE: lib
  before_script:
    - cd /system-tests
    - git fetch origin $SYSTEM_TESTS_COMMIT
    - git reset --hard FETCH_HEAD
    - mkdir -p /system-tests/binaries/
    - cp workspace/dd-java-agent/build/libs/*.jar /system-tests/binaries/
    - cp workspace/dd-trace-api/build/libs/*.jar /system-tests/binaries/
    - cd /system-tests
    - export SYSTEM_TESTS_IDM_AWS_ACCESS_KEY_ID="" #TODO fix variable fetch
    - export SYSTEM_TESTS_IDM_AWS_SECRET_ACCESS_KEY=""
    - export SYSTEM_TESTS_E2E_DD_API_KEY=""
    - export SYSTEM_TESTS_E2E_DD_APP_KEY=""
    - export SYSTEM_TESTS_DD_API_KEY=""

system-tests:
  extends: .system-tests-job
  parallel:
    matrix:
      - WEBLOG_VARIANT: ['akka-http', 'jersey-grizzly2', 'play', 'resteasy-netty3', 'ratpack', 'spring-boot', 'spring-boot-jetty', 'spring-boot-openliberty', 'spring-boot-payara', 'spring-boot-undertow', 'spring-boot-wildfly', 'uds-spring-boot', 'vertx3', 'vertx4']
        SCENARIO: [ DEFAULT, APM_TRACING_E2E, APM_TRACING_E2E_SINGLE_SPAN, APPSEC_BLOCKING, APPSEC_REQUEST_BLOCKING, APPSEC_RASP, APPSEC_RUNTIME_ACTIVATION, REMOTE_CONFIG_MOCKED_BACKEND_ASM_DD ]
      - WEBLOG_VARIANT: ['spring-boot-3-native']
        SCENARIO: [ DEFAULT, APM_TRACING_E2E, APM_TRACING_E2E_SINGLE_SPAN ]
  script:
    - ./build.sh java --weblog-variant $WEBLOG_VARIANT
    - >
      if [[ $SCENARIO =~ .*_E2E.* ]]; then
        export DD_SITE=datadoghq.com;
        export DD_API_KEY=$SYSTEM_TESTS_E2E_DD_API_KEY;
        export DD_APPLICATION_KEY=$SYSTEM_TESTS_E2E_DD_APP_KEY;
      else
        export DD_API_KEY=$SYSTEM_TESTS_DD_API_KEY;
      fi
    - echo "Running scenario $SCENARIO"
    - ./run.sh $SCENARIO
  after_script:
    - |
      mkdir -p artifacts
      cd /system-tests
      shopt -s nullglob
      for log_dir in logs*; do
        tar -cvzf ../artifacts/${log_dir}_${WEBLOG_VARIANT}.tar.gz $log_dir
      done
  artifacts:
    when: always
    paths:
      - artifacts
      - '.gradle/daemon/*/*.out.log'

integration-system-tests:
  extends: .system-tests-job
  script:
    - ./build.sh --library java --weblog-variant spring-boot
    - export AWS_ACCESS_KEY_ID="$SYSTEM_TESTS_IDM_AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$SYSTEM_TESTS_IDM_AWS_SECRET_ACCESS_KEY"
    - export AWS_REGION="us-east-1"
    - export AWS_DEFAULT_REGION="us-east-1"  # AWS services should use `AWS_REGION`, but some still use the older `AWS_DEFAULT_REGION`
    - DD_SITE=datadoghq.com DD_API_KEY=$SYSTEM_TESTS_E2E_DD_API_KEY DD_APPLICATION_KEY=$SYSTEM_TESTS_E2E_DD_APP_KEY ./run.sh INTEGRATIONS
    - DD_API_KEY=$SYSTEM_TESTS_DD_API_KEY ./run.sh CROSSED_TRACING_LIBRARIES
  artifacts:
    when: always
    reports:
      junit: /system-tests/logs_integrations/*.xml
    paths:
      - /system-tests/logs_integrations
      - '.gradle/daemon/*/*.out.log'

debugger-system-tests:
  extends: .system-tests-job
  script:
    - ./build.sh --library java --weblog-variant spring-boot
    - DD_API_KEY=$SYSTEM_TESTS_E2E_DD_API_KEY ./run.sh DEBUGGER_SCENARIOS
  after_script:
    - |
      mkdir -p logs_debugger
      for dir in /system-tests/logs*/; do
          cp -r "$dir" logs_debugger
      done
  artifacts:
    when: always
    reports:
      junit: logs_debugger/*.xml
    paths:
      - logs_debugger
      - '.gradle/daemon/*/*.out.log'

parametric-tests:
  extends: .system-tests-job
  script:
    - ./build.sh -i runner
    - timeout 20m ./run.sh PARAMETRIC --library java --durations=30 -vv
  after_script:
    - tar -cvzf logs_java_parametric_dev.tar.gz -C /system-tests logs_parametric
  artifacts:
    when: always
    reports:
      junit: /system-tests/logs_parametric/*.xml
    paths:
      - logs_java_parametric_dev.tar.gz
      - '.gradle/daemon/*/*.out.log'

deploy_to_profiling_backend:
  stage: publish
  needs: [ build ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/profiling-backend
    branch: dogfooding
  variables:
    UPSTREAM_PACKAGE_JOB: $BUILD_JOB_NAME
    UPSTREAM_PACKAGE_JOB_ID: $BUILD_JOB_ID
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_BRANCH: $CI_COMMIT_BRANCH
    UPSTREAM_TAG: $CI_COMMIT_TAG

trigger_tibco_tests:
  stage: tests
  needs: [ build ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: on_success
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: on_success
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/tibco-testing
    branch: main
    strategy: depend
  variables:
    UPSTREAM_PACKAGE_JOB: $BUILD_JOB_NAME
    UPSTREAM_PACKAGE_JOB_ID: $BUILD_JOB_ID
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_BRANCH: $CI_COMMIT_BRANCH
    UPSTREAM_TAG: $CI_COMMIT_TAG
    FORCE_TRIGGER: $FORCE_TRIGGER

deploy_to_di_backend:manual:
  stage: publish
  needs: [ build ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/debugger-demos
    branch: main
  variables:
    UPSTREAM_PACKAGE_JOB: build
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_BRANCH: $CI_COMMIT_BRANCH
    UPSTREAM_TAG: $CI_COMMIT_TAG
    UPSTREAM_COMMIT_AUTHOR: $CI_COMMIT_AUTHOR
    UPSTREAM_COMMIT_SHORT_SHA: $CI_COMMIT_SHORT_SHA

deploy_to_sonatype:
  extends: .gradle_build
  stage: publish
  needs: [ build ]
  variables:
    BUILD_CACHE_TYPE: lib
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    # Do not deploy release candidate versions
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      when: on_success
    - when: manual
      allow_failure: true
  script:
    - export SONATYPE_USERNAME=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.sonatype_username --with-decryption --query "Parameter.Value" --out text)
    - export SONATYPE_PASSWORD=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.sonatype_password --with-decryption --query "Parameter.Value" --out text)
    - export GPG_PRIVATE_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.signing.gpg_private_key --with-decryption --query "Parameter.Value" --out text)
    - export GPG_PASSWORD=$(aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.signing.gpg_passphrase --with-decryption --query "Parameter.Value" --out text)
    - ./gradlew -PbuildInfo.build.number=$CI_JOB_ID publishToSonatype closeSonatypeStagingRepository -PskipTests $GRADLE_ARGS
  artifacts:
    paths:
      - 'workspace/dd-java-agent/build/libs/*.jar'
      - 'workspace/dd-trace-api/build/libs/*.jar'
      - 'workspace/dd-trace-ot/build/libs/*.jar'

deploy_artifacts_to_github:
  stage: publish
  image: registry.ddbuild.io/github-cli:v27480869-eafb11d-2.43.0
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      when: on_success
  # Requires the deploy_to_sonatype job to have run first the UP-TO-DATE gradle check across jobs is broken
  # This will deploy the artifacts built from the publishToSonatype task to the GitHub release
  needs:
    - job: deploy_to_sonatype
      # The deploy_to_sonatype job is not run for release candidate versions
      optional: true
  script:
    - aws ssm get-parameter --region us-east-1 --name ci.dd-trace-java.gh_release_token --with-decryption --query "Parameter.Value" --out text > github-token.txt
    - gh auth login --with-token < github-token.txt
    - gh auth status  # Maybe helpful to have this output in logs?
    - export VERSION=${CI_COMMIT_TAG##v} # remove "v" from front of tag to get version
    - cp workspace/dd-java-agent/build/libs/dd-java-agent-${VERSION}.jar workspace/dd-java-agent/build/libs/dd-java-agent.jar # we upload two filenames
    - gh release upload --clobber --repo DataDog/dd-trace-java $CI_COMMIT_TAG workspace/dd-java-agent/build/libs/dd-java-agent.jar
    - gh release upload --clobber --repo DataDog/dd-trace-java $CI_COMMIT_TAG workspace/dd-java-agent/build/libs/dd-java-agent-${VERSION}.jar
    - gh release upload --clobber --repo DataDog/dd-trace-java $CI_COMMIT_TAG workspace/dd-trace-api/build/libs/dd-trace-api-${VERSION}.jar
    - gh release upload --clobber --repo DataDog/dd-trace-java $CI_COMMIT_TAG workspace/dd-trace-ot/build/libs/dd-trace-ot-${VERSION}.jar
  retry:
    max: 2
    when: always

requirements_json_test:
  rules:
    - when: on_success
  variables:
    REQUIREMENTS_BLOCK_JSON_PATH: "metadata/requirements-block.json"
    REQUIREMENTS_ALLOW_JSON_PATH: "metadata/requirements-allow.json"

package-oci:
  needs: [ build ]

onboarding_tests_installer:
  parallel:
    matrix:
      - ONBOARDING_FILTER_WEBLOG: [test-app-java, test-app-java-container, test-app-java-alpine]
        SCENARIO: [ SIMPLE_INSTALLER_AUTO_INJECTION, SIMPLE_AUTO_INJECTION_PROFILING ]

onboarding_tests_k8s_injection:
  parallel:
    matrix:
      - WEBLOG_VARIANT: [dd-lib-java-init-test-app]
        SCENARIO: [K8S_LIB_INJECTION, K8S_LIB_INJECTION_UDS, K8S_LIB_INJECTION_NO_AC, K8S_LIB_INJECTION_NO_AC_UDS, K8S_LIB_INJECTION_PROFILING_DISABLED, K8S_LIB_INJECTION_PROFILING_ENABLED, K8S_LIB_INJECTION_PROFILING_OVERRIDE]
        K8S_CLUSTER_VERSION: ['7.56.2', '7.57.0', '7.59.0']

      - WEBLOG_VARIANT: [dd-djm-spark-test-app]
        SCENARIO: [K8S_LIB_INJECTION_SPARK_DJM]
        K8S_CLUSTER_VERSION: ['7.57.0', '7.59.0']

create_key:
  stage: generate-signing-key
  when: manual
  needs: [ ]
  variables:
    PROJECT_NAME: "dd-trace-java"
    EXPORT_TO_KEYSERVER: "true"
  image: $REGISTRY/ci/agent-key-management-tools/gpg:1
  script:
    - /create.sh
  artifacts:
    expire_in: 13 mos
    paths:
      - pubkeys

tracer-base-image-release:
  extends: .ci_authenticated_job
  stage: publish
  needs: [ build ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v1\..*/'
      when: on_success
  dependencies:
    - build
  script:
    - echo $GH_TOKEN|docker login ghcr.io/datadog -u uploader --password-stdin
    - mkdir -p ./tooling/ci/binaries/ && cp workspace/dd-java-agent/build/libs/*.jar ./tooling/ci/binaries/dd-java-agent.jar
    - docker buildx build -t ghcr.io/datadog/dd-trace-java/dd-trace-java:latest -f ./tooling/ci/Dockerfile .
    - docker push ghcr.io/datadog/dd-trace-java/dd-trace-java:latest

tracer-base-image-snapshot:
  extends: .ci_authenticated_job
  stage: publish
  needs: [ build ]
  rules:
    - if: '$POPULATE_CACHE'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
  dependencies:
    - build
  script:
    - echo $GH_TOKEN|docker login ghcr.io/datadog -u uploader --password-stdin
    - mkdir -p ./tooling/ci/binaries/ && cp workspace/dd-java-agent/build/libs/*.jar ./tooling/ci/binaries/dd-java-agent.jar
    - docker buildx build -t ghcr.io/datadog/dd-trace-java/dd-trace-java:latest_snapshot -f ./tooling/ci/Dockerfile .
    - docker push ghcr.io/datadog/dd-trace-java/dd-trace-java:latest_snapshot  
