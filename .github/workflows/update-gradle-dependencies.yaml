name: Update Gradle dependencies
on:
  schedule:
    - cron: "0 4 * * 0"
  workflow_dispatch:

jobs:
  update-gradle-dependencies:
    runs-on: ubuntu-latest
    name: Update Gradle dependencies
    permissions:
      contents: read
      id-token: write # Required for OIDC token federation
    steps:
      - uses: DataDog/dd-octo-sts-action@acaa02eee7e3bb0839e4272dacb37b8f3b58ba80 # v1.0.3
        id: octo-sts
        with:
          scope: DataDog/dd-trace-java
          policy: self.update-gradle-dependencies.create-pr

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2
        with:
          submodules: "recursive"
      - name: Pick a branch name
        run: echo "branch=ci/update-gradle-dependencies-$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
      - name: Update Gradle dependencies
        run: |
          GRADLE_OPTS="-Dorg.gradle.jvmargs='-Xmx3G -Xms2G'" \
          JAVA_HOME=$JAVA_HOME_8_X64 \
          JAVA_8_HOME=$JAVA_HOME_8_X64 \
          JAVA_11_HOME=$JAVA_HOME_11_X64 \
          JAVA_17_HOME=$JAVA_HOME_17_X64 \
          JAVA_21_HOME=$JAVA_HOME_21_X64 \
          ./gradlew resolveAndLockAll --write-locks --parallel --stacktrace --no-daemon --max-workers=4
      - name: Commit changes
        id: create-commits
        env:
          BRANCH_NAME: ${{ steps.define-branch.outputs.branch }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          FILES=""
          COMMITS=""
          COUNT=0
          # XXX: Could be replaced by ${{ github.sha }}
          BRANCH_HEAD=$(git rev-parse HEAD)
          for lockfile in $(git status --porcelain=v1 | awk '{ print $NF }'); do
            echo "Found lockfile: $lockfile"
            FILES="$FILES $lockfile"
            COUNT=$((COUNT+1))
            if [ $COUNT -eq 10 ]; then
              echo "Creating a commit to $BRANCH_NAME@$BRANCH_HEAD with files $FILES"
              git commit --no-verify --message="chore: Update Gradle dependencies" "${FILES}"
              COMMITS="$COMMITS $(git rev-parse HEAD)"
              FILES=""
              COUNT=0
            fi
          done
          # Check at uncommited files
          echo "Checking uncommited files"
          git status

          # Commit any remaining files
          if [ $COUNT -gt 0 ]; then
            echo "Creating a commit to $BRANCH_NAME@$BRANCH_HEAD with $FILES"
            git commit --no-verify --message="chore: Update Gradle dependencies" "${FILES}"
            COMMITS="$COMMITS $(git rev-parse HEAD)"
          fi

          echo "Commits to push: ${COMMITS}"
          echo "commits=\"${COMMITS}\"" >> $GITHUB_OUTPUT
      - name: Push changes
        uses: DataDog/commit-headless@1186485b788f57eedaaadb19919781698b4d262f # action/v1.0.0
        if: ${{ steps.create-commits.outputs.commits != '' }}
        with:
          token: "${{ steps.octo-sts.outputs.token }}"
          branch: "${{ steps.define-branch.outputs.branch }}"
          # for scheduled runs, sha is the tip of the default branch
          # for dispatched runs, sha is the tip of the branch it was dispatched on
          branch-from: "${{ github.sha }}"
          command: push
          commits: "${{ steps.create-commits.outputs.commits }}"
      - name: Create pull request
        env:
          GH_TOKEN: ${{ steps.octo-sts.outputs.token }}
          BRANCH_NAME: ${{ steps.define-branch.outputs.branch }}
        run: |
          # use echo to set a multiline body for the PR
          echo -e "This PR updates the Gradle dependencies. ⚠️ Don't forget to squash commits before merging. ⚠️\n\n- [ ] Update PR title if a code change is needed to support one of those new dependencies" | \
            gh pr create --title "Update Gradle dependencies" \
            --base master \
            --head $BRANCH_NAME \
            --label "tag: dependencies" \
            --label "tag: no release notes" \
            --body-file -
