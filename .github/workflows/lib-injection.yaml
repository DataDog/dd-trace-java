name: "Lib Injection Test"
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test-app-image-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4

      - name: Log in to the Container registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # 2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build app image
        run: |
          JAVA_HOME=$JAVA_HOME_8_X64 JAVA_8_HOME=$JAVA_HOME_8_X64 JAVA_11_HOME=$JAVA_HOME_11_X64 \
          ./lib-injection/run.sh build-test-app-image push-test-app-image

  lib-injection-image-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4

      - name: Log in to the Container registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # 2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8 # 2.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # 2.0.0
        with:
          install: true
          config-inline: |
            [worker.oci]
              max-parallelism = 1

      - name: Build dd-java-agent.jar
        run: JAVA_HOME=$JAVA_HOME_8_X64 JAVA_8_HOME=$JAVA_HOME_8_X64 JAVA_11_HOME=$JAVA_HOME_11_X64 ./gradlew clean shadowJar --build-cache --parallel --no-daemon --max-workers=8

      - name: Build injection image
        run: |
          ./lib-injection/run.sh build-and-push-init-image

  system-tests:
    needs:
      - lib-injection-image-build
      - test-app-image-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lib-injection-enabled: ['lib-injection-enabled']
        lib-injection-connection: ['network', 'uds']
        lib-injection-use-admission-controller: ['', 'use-admission-controller']
    env:
      TEST_LIBRARY: java
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
      LIBRARY_INJECTION_ENABLED: ${{ matrix.lib-injection-enabled }}
      LIBRARY_INJECTION_CONNECTION: ${{ matrix.lib-injection-connection }}
      LIBRARY_INJECTION_ADMISSION_CONTROLLER: ${{ matrix.lib-injection-admission-controller }}
      LIBRARY_INJECTION_INIT_IMAGE: ghcr.io/datadog/dd-trace-java/dd-lib-java-init:${{ github.sha }}
      LIBRARY_INJECTION_TEST_APP_IMAGE: ghcr.io/datadog/dd-trace-java/dd-lib-java-init-test-app:${{ github.sha }}

    steps:
      - name: Checkout system tests
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4
        with:
          repository: 'DataDog/system-tests'
          ref: 'injection-tests'  # TODO: update when https://github.com/DataDog/system-tests/pull/453 merged

      - name: Checkout dd-trace-java
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4
        with:
          path: 'binaries/dd-trace-java'

      - name: Build
        run: ./build.sh

      - name: Run
        run: ./run.sh

      - name: Compress artifact
        if: ${{ always() }}
        run: tar -czvf artifact.tar.gz $(ls | grep logs) || true

      - name: Upload artifact
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2
        if: ${{ always() }}
        with:
          name: logs
          path: artifact.tar.gz
