name: "Lib Injection Test"
on:
  push:
    branches:
      - master
      - 'release/*'
  pull_request:
    branches:
      - master

jobs:

  build-and-publish-init-image:
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout repository
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8 # 2.0.0

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # 2.0.0

    - name: Build dd-java-agent.jar
      run: |
          JAVA_HOME=$JAVA_HOME_8_X64 JAVA_8_HOME=$JAVA_HOME_8_X64 JAVA_11_HOME=$JAVA_HOME_11_X64 ./gradlew dd-java-agent:build dd-java-agent:shadowJar --build-cache --parallel --no-daemon --max-workers=8
          echo "After build. Ls workspace/dd-java-agent/build/libs"
          ls workspace/dd-java-agent/build/libs
          echo "PWD???"
          pwd
          cp workspace/dd-java-agent/build/libs/dd-java-agent-*.jar .
          echo "after copy. list current folder"
          ls
          rm *-sources.jar
          rm *-javadoc.jar
          mv *.jar dd-java-agent.jar
          echo "after renaming file tracer"
          ls
    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Set Docker Image Tag
      id: set_names
      run: |
        DOCKER_IMAGE_TAG=${{ github.sha }}
        DOCKER_IMAGE_NAME=dd-lib-java-init
        DOCKER_IMAGE_NAME=$(echo ghcr.io/${GITHUB_REPOSITORY}/${DOCKER_IMAGE_NAME} | tr '[:upper:]' '[:lower:]')
        DOCKER_IMAGE_NAME_WITH_TAG=$(echo ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} | tr '[:upper:]' '[:lower:]')
        echo "Using image name '$DOCKER_IMAGE_NAME_WITH_TAG'"
        echo "::set-output name=image_name::$DOCKER_IMAGE_NAME_WITH_TAG"
    - name: Login to Docker
      run: docker login -u publisher -p ${{ secrets.GITHUB_TOKEN }} ghcr.io
    - name: Docker Build
      uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5 # 3.2.0
      with:
        push: true
        tags: ${{ steps.set_names.outputs.image_name }}
        platforms: "linux/amd64,linux/arm64/v8"
        context: ./lib-injection

  injection-tests:
    needs:
      - build-and-publish-init-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        lib-injection-connection: [ 'network','uds']
        lib-injection-use-admission-controller: ['', 'use-admission-controller']
        weblog-variant: [ 'dd-lib-java-init-test-app']
      fail-fast: false
    env:
      TEST_LIBRARY: java
      WEBLOG_VARIANT: ${{ matrix.weblog-variant }}
      LIBRARY_INJECTION_CONNECTION: ${{ matrix.lib-injection-connection }}
      LIBRARY_INJECTION_ADMISSION_CONTROLLER: ${{ matrix.lib-injection-use-admission-controller }}
      DOCKER_REGISTRY_IMAGES_PATH: ghcr.io/datadog
      DOCKER_IMAGE_TAG: ${{ github.sha }}

    steps:

      - name: Checkout dd-trace-java
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4

      - name: Checkout system tests
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4
        with:
          repository: 'DataDog/system-tests'
          ref: 'robertomonteromiguel/lib_injection_integration'
          path: './system-tests'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # 2.0.0
        with: 
          install: true
          config-inline: |
            [worker.oci]
              max-parallelism = 1

      - name: Log in to the Container registry
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # 2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

 
      - name: Build and push images
        run: |
          cd system-tests   
          ./lib-injection/run.sh build-and-push-test-app-image 
          ./lib-injection/build.sh
 
      - name: Run lib injection tests
        run: |
          cd system-tests   
          ./lib-injection/run-lib-injection.sh

 #
 # lib-injection-image-build:
 #   runs-on: ubuntu-latest
 #   steps:
 #     - name: Checkout repository
 #       uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4

 #     - name: Log in to the Container registry
 #       uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # 2.0.0
 #       with:
 #         registry: ghcr.io
 #         username: ${{ github.actor }}
 #         password: ${{ secrets.GITHUB_TOKEN }}

 #    - name: Set up QEMU
 #       uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8 # 2.0.0

 #     - name: Set up Docker Buildx
 #       uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # 2.0.0
 #       with:
 #         install: true
 #         config-inline: |
 #           [worker.oci]
 #             max-parallelism = 1

 #     - name: Build dd-java-agent.jar
 #       run: JAVA_HOME=$JAVA_HOME_8_X64 JAVA_8_HOME=$JAVA_HOME_8_X64 JAVA_11_HOME=$JAVA_HOME_11_X64 ./gradlew clean shadowJar --build-cache --parallel --no-daemon --max-workers=8

 #     - name: Build injection image
 #       run: |
 #         ./lib-injection/run.sh build-and-push-init-image

 # injection-tests:
 #   needs:
 #     - lib-injection-image-build
 #   runs-on: ubuntu-latest
 #   permissions:
 #     contents: read
 #     packages: write
 #   strategy:
 #     matrix:
 #       lib-injection-connection: [ 'network','uds']
 #       lib-injection-use-admission-controller: ['', 'use-admission-controller']
 #       weblog-variant: [ 'dd-lib-java-init-test-app']
 #     fail-fast: false
 #   env:
 #     TEST_LIBRARY: java
 #     WEBLOG_VARIANT: ${{ matrix.weblog-variant }}
 #     LIBRARY_INJECTION_CONNECTION: ${{ matrix.lib-injection-connection }}
 #     LIBRARY_INJECTION_ADMISSION_CONTROLLER: ${{ matrix.lib-injection-use-admission-controller }}
 #     DOCKER_REGISTRY_IMAGES_PATH: ghcr.io/datadog
 #     DOCKER_IMAGE_TAG: ${{ github.sha }}

 #   steps:

 #     - name: Checkout dd-trace-java
 #       uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4

 #     - name: Checkout system tests
 #       uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4
 #       with:
 #         repository: 'DataDog/system-tests'
 #         ref: 'robertomonteromiguel/lib_injection_integration'
 #         path: './system-tests'

 #     - name: Set up Docker Buildx
 #       uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # 2.0.0
 #       with: 
 #         install: true
 #         config-inline: |
 #           [worker.oci]
 #             max-parallelism = 1

 #     - name: Log in to the Container registry
 #       uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # 2.0.0
 #       with:
 #         registry: ghcr.io
 #         username: ${{ github.repository_owner }}
 #         password: ${{ secrets.GITHUB_TOKEN }}

 #     - name: Build and copy java agent
 #       run: |
 #         JAVA_HOME=$JAVA_HOME_8_X64 JAVA_8_HOME=$JAVA_HOME_8_X64 JAVA_11_HOME=$JAVA_HOME_11_X64 ./gradlew dd-java-agent:build dd-java-agent:shadowJar
 #         cp workspace/dd-java-agent/build/libs/dd-java-agent-*.jar system-tests/binaries/
 #         rm system-tests/binaries/*-sources.jar
 #         rm system-tests/binaries/*-javadoc.jar
 #         mv system-tests/binaries/*.jar system-tests/binaries/dd-java-agent.jar

 #     - name: Build and push images
 #       run: |
 #         cd system-tests   
 #         ./lib-injection/run.sh build-and-push-test-app-image build-and-push-init-image  
 #         ./lib-injection/build.sh
 
 #     - name: Run lib injection tests
 #       run: |
 #         cd system-tests   
 #         ./lib-injection/run-lib-injection.sh
