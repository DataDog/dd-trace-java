name: Update Docker Build Image

on:
  schedule:
    # A day after creating the tag from https://github.com/DataDog/dd-trace-java-docker-build/blob/master/.github/workflows/docker-tag.yml
    - cron: "0 0 1 2,5,8,11 *"
  workflow_dispatch:
    inputs:
      tag:
        description: "The tag to use for the Docker build image"
        required: true
        default: "vYY.MM"

jobs:
  update-docker-build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Required for OIDC token federation
    steps:
      - uses: DataDog/dd-octo-sts-action@acaa02eee7e3bb0839e4272dacb37b8f3b58ba80 # v1.0.3
        id: octo-sts
        with:
          scope: DataDog/dd-trace-java
          policy: self.update-docker-build-image.create-pr

      - name: Checkout the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Pick a branch name
        id: define-branch
        run: echo "branch=ci/update-docker-build-image-$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
      - name: Define the Docker build image tage to use
        id: define-tag
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            TAG=${{ github.event.inputs.tag }}
          else
            CURRENT_MONTH=$(date +%m)
            CURRENT_YEAR=$(date +%y)
            case $CURRENT_MONTH in
              01) TAG_DATE="$(($CURRENT_YEAR - 1)).10" ;;
              02|03|04) TAG_DATE="${CURRENT_YEAR}.01" ;;
              05|06|07) TAG_DATE="${CURRENT_YEAR}.04" ;;
              08|09|10) TAG_DATE="${CURRENT_YEAR}.07" ;;
              11|12) TAG_DATE="${CURRENT_YEAR}.10" ;;
            esac
            TAG="v${TAG_DATE}"
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "::notice::Using Docker build image tag: ${TAG}"
      - name: Update the Docker build image in GitLab CI config
        run: |
          sed -i -E 's|(BUILDER_IMAGE_VERSION_PREFIX:)[^#]*([#].*)|\1 "${{ steps.define-tag.outputs.tag }}-" \2|' .gitlab-ci.yml
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ steps.octo-sts.outputs.token }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if [[ -z "$(git status -s)" ]]; then
            echo "No changes to commit, exiting."
            exit 0;
          fi

          git commit --message "feat(ci): Update Docker build image" .gitlab-ci.yml
          echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: Push changes
        uses: DataDog/commit-headless@1186485b788f57eedaaadb19919781698b4d262f # action/v1.0.0
        if: ${{ steps.create-commit.outputs.commit != '' }}
        with:
          token: "${{ steps.octo-sts.outputs.token }}"
          branch: "${{ steps.define-branch.outputs.branch }}"
          # for scheduled runs, sha is the tip of the default branch
          # for dispatched runs, sha is the tip of the branch it was dispatched on
          branch-from: "${{ github.sha }}"
          command: push
          commits: "${{ steps.create-commit.outputs.commit }}"
      - name: Create pull request
        env:
          GH_TOKEN: ${{ steps.octo-sts.outputs.token }}
        run: |
          gh pr create --title "Update Docker build image" \
            --base master \
            --head ${{ steps.define-branch.outputs.branch }} \
            --label "comp: tooling" \
            --label "type: enhancement" \
            --label "tag: no release notes" \
            --body "This PR updates the Docker build image to ${{ steps.define-tag.outputs.tag }}."
